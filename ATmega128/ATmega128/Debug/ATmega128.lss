
ATmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000039e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  00800100  00800100  0000039e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000039e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002264  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b08  00000000  00000000  00002738  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c56  00000000  00000000  00003240  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  00003e98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000097c  00000000  00000000  000040e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013dc  00000000  00000000  00004a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00005e40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	46 c0       	rjmp	.+140    	; 0x8e <__ctors_end>
   2:	00 00       	nop
   4:	6b c0       	rjmp	.+214    	; 0xdc <__bad_interrupt>
   6:	00 00       	nop
   8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
   a:	00 00       	nop
   c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
   e:	00 00       	nop
  10:	65 c0       	rjmp	.+202    	; 0xdc <__bad_interrupt>
  12:	00 00       	nop
  14:	63 c0       	rjmp	.+198    	; 0xdc <__bad_interrupt>
  16:	00 00       	nop
  18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>
  1e:	00 00       	nop
  20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
  22:	00 00       	nop
  24:	5b c0       	rjmp	.+182    	; 0xdc <__bad_interrupt>
  26:	00 00       	nop
  28:	59 c0       	rjmp	.+178    	; 0xdc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	57 c0       	rjmp	.+174    	; 0xdc <__bad_interrupt>
  2e:	00 00       	nop
  30:	55 c0       	rjmp	.+170    	; 0xdc <__bad_interrupt>
  32:	00 00       	nop
  34:	53 c0       	rjmp	.+166    	; 0xdc <__bad_interrupt>
  36:	00 00       	nop
  38:	51 c0       	rjmp	.+162    	; 0xdc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4f c0       	rjmp	.+158    	; 0xdc <__bad_interrupt>
  3e:	00 00       	nop
  40:	4d c0       	rjmp	.+154    	; 0xdc <__bad_interrupt>
  42:	00 00       	nop
  44:	4b c0       	rjmp	.+150    	; 0xdc <__bad_interrupt>
  46:	00 00       	nop
  48:	49 c0       	rjmp	.+146    	; 0xdc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	47 c0       	rjmp	.+142    	; 0xdc <__bad_interrupt>
  4e:	00 00       	nop
  50:	45 c0       	rjmp	.+138    	; 0xdc <__bad_interrupt>
  52:	00 00       	nop
  54:	43 c0       	rjmp	.+134    	; 0xdc <__bad_interrupt>
  56:	00 00       	nop
  58:	41 c0       	rjmp	.+130    	; 0xdc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3f c0       	rjmp	.+126    	; 0xdc <__bad_interrupt>
  5e:	00 00       	nop
  60:	3d c0       	rjmp	.+122    	; 0xdc <__bad_interrupt>
  62:	00 00       	nop
  64:	3b c0       	rjmp	.+118    	; 0xdc <__bad_interrupt>
  66:	00 00       	nop
  68:	39 c0       	rjmp	.+114    	; 0xdc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	37 c0       	rjmp	.+110    	; 0xdc <__bad_interrupt>
  6e:	00 00       	nop
  70:	35 c0       	rjmp	.+106    	; 0xdc <__bad_interrupt>
  72:	00 00       	nop
  74:	33 c0       	rjmp	.+102    	; 0xdc <__bad_interrupt>
  76:	00 00       	nop
  78:	31 c0       	rjmp	.+98     	; 0xdc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2f c0       	rjmp	.+94     	; 0xdc <__bad_interrupt>
  7e:	00 00       	nop
  80:	2d c0       	rjmp	.+90     	; 0xdc <__bad_interrupt>
  82:	00 00       	nop
  84:	2b c0       	rjmp	.+86     	; 0xdc <__bad_interrupt>
  86:	00 00       	nop
  88:	29 c0       	rjmp	.+82     	; 0xdc <__bad_interrupt>
	...

0000008c <__ctors_start>:
  8c:	84 01       	movw	r16, r8

0000008e <__ctors_end>:
  8e:	11 24       	eor	r1, r1
  90:	1f be       	out	0x3f, r1	; 63
  92:	cf ef       	ldi	r28, 0xFF	; 255
  94:	d0 e1       	ldi	r29, 0x10	; 16
  96:	de bf       	out	0x3e, r29	; 62
  98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
  9a:	11 e0       	ldi	r17, 0x01	; 1
  9c:	a0 e0       	ldi	r26, 0x00	; 0
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	ea e2       	ldi	r30, 0x2A	; 42
  a2:	f3 e0       	ldi	r31, 0x03	; 3
  a4:	00 e0       	ldi	r16, 0x00	; 0
  a6:	0b bf       	out	0x3b, r16	; 59
  a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x14>
  aa:	07 90       	elpm	r0, Z+
  ac:	0d 92       	st	X+, r0
  ae:	a0 30       	cpi	r26, 0x00	; 0
  b0:	b1 07       	cpc	r27, r17
  b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0x10>

000000b4 <__do_clear_bss>:
  b4:	21 e0       	ldi	r18, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a9 32       	cpi	r26, 0x29	; 41
  c0:	b2 07       	cpc	r27, r18
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>

000000c4 <__do_global_ctors>:
  c4:	10 e0       	ldi	r17, 0x00	; 0
  c6:	c7 e4       	ldi	r28, 0x47	; 71
  c8:	d0 e0       	ldi	r29, 0x00	; 0
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <__do_global_ctors+0xe>
  cc:	21 97       	sbiw	r28, 0x01	; 1
  ce:	fe 01       	movw	r30, r28
  d0:	21 d1       	rcall	.+578    	; 0x314 <__tablejump2__>
  d2:	c6 34       	cpi	r28, 0x46	; 70
  d4:	d1 07       	cpc	r29, r17
  d6:	d1 f7       	brne	.-12     	; 0xcc <__do_global_ctors+0x8>
  d8:	58 d0       	rcall	.+176    	; 0x18a <main>
  da:	25 c1       	rjmp	.+586    	; 0x326 <_exit>

000000dc <__bad_interrupt>:
  dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <_Z41__static_initialization_and_destruction_0ii>:
		stop();
	}
	
	isOn = true;
	
}
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	e9 f4       	brne	.+58     	; 0x11c <_Z41__static_initialization_and_destruction_0ii+0x3e>
  e2:	6f 3f       	cpi	r22, 0xFF	; 255
  e4:	7f 4f       	sbci	r23, 0xFF	; 255
  e6:	d1 f4       	brne	.+52     	; 0x11c <_Z41__static_initialization_and_destruction_0ii+0x3e>
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <rightMotor+0x1>
  f0:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <rightMotor>
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <leftMotor+0x1>
  fc:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <leftMotor>
 100:	e6 e1       	ldi	r30, 0x16	; 22
 102:	f1 e0       	ldi	r31, 0x01	; 1
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	91 83       	std	Z+1, r25	; 0x01
 10a:	80 83       	st	Z, r24
 10c:	82 83       	std	Z+2, r24	; 0x02
 10e:	ed e0       	ldi	r30, 0x0D	; 13
 110:	f1 e0       	ldi	r31, 0x01	; 1
 112:	24 e0       	ldi	r18, 0x04	; 4
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	31 83       	std	Z+1, r19	; 0x01
 118:	20 83       	st	Z, r18
 11a:	82 83       	std	Z+2, r24	; 0x02
 11c:	08 95       	ret

0000011e <_ZN3MCU7Setting9beginPortEib>:
 11e:	66 23       	and	r22, r22
 120:	11 f0       	breq	.+4      	; 0x126 <_ZN3MCU7Setting9beginPortEib+0x8>
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	01 c0       	rjmp	.+2      	; 0x128 <_ZN3MCU7Setting9beginPortEib+0xa>
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	82 30       	cpi	r24, 0x02	; 2
 12a:	91 05       	cpc	r25, r1
 12c:	99 f0       	breq	.+38     	; 0x154 <_ZN3MCU7Setting9beginPortEib+0x36>
 12e:	2c f4       	brge	.+10     	; 0x13a <_ZN3MCU7Setting9beginPortEib+0x1c>
 130:	00 97       	sbiw	r24, 0x00	; 0
 132:	51 f0       	breq	.+20     	; 0x148 <_ZN3MCU7Setting9beginPortEib+0x2a>
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	59 f0       	breq	.+22     	; 0x14e <_ZN3MCU7Setting9beginPortEib+0x30>
 138:	08 95       	ret
 13a:	84 30       	cpi	r24, 0x04	; 4
 13c:	91 05       	cpc	r25, r1
 13e:	81 f0       	breq	.+32     	; 0x160 <_ZN3MCU7Setting9beginPortEib+0x42>
 140:	64 f0       	brlt	.+24     	; 0x15a <_ZN3MCU7Setting9beginPortEib+0x3c>
 142:	05 97       	sbiw	r24, 0x05	; 5
 144:	81 f0       	breq	.+32     	; 0x166 <_ZN3MCU7Setting9beginPortEib+0x48>
 146:	08 95       	ret
 148:	2a bb       	out	0x1a, r18	; 26
 14a:	1b ba       	out	0x1b, r1	; 27
 14c:	08 95       	ret
 14e:	27 bb       	out	0x17, r18	; 23
 150:	18 ba       	out	0x18, r1	; 24
 152:	08 95       	ret
 154:	24 bb       	out	0x14, r18	; 20
 156:	15 ba       	out	0x15, r1	; 21
 158:	08 95       	ret
 15a:	21 bb       	out	0x11, r18	; 17
 15c:	12 ba       	out	0x12, r1	; 18
 15e:	08 95       	ret
 160:	22 b9       	out	0x02, r18	; 2
 162:	13 b8       	out	0x03, r1	; 3
 164:	08 95       	ret
 166:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 16a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 16e:	08 95       	ret

00000170 <_Z9sensorOffv>:
//========================================*/


void sensorOff (void)
{
	left = OFF;
 170:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <left>
	leftMiddle = OFF;
 174:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <leftMiddle>
	middle = OFF;
 178:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <middle>
	rightMiddle = OFF;
 17c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <rightMiddle>
	right = OFF;
 180:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <right>
	all = OFF;
 184:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <all>
 188:	08 95       	ret

0000018a <main>:
-------------   MAIN START   ---------------
//========================================*/

int main(void)
{
	beginPort(C, OUT);
 18a:	61 e0       	ldi	r22, 0x01	; 1
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	c6 df       	rcall	.-116    	; 0x11e <_ZN3MCU7Setting9beginPortEib>
    beginPort(D, OUT);
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	83 e0       	ldi	r24, 0x03	; 3
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	c2 df       	rcall	.-124    	; 0x11e <_ZN3MCU7Setting9beginPortEib>
	beginPort(B, IN);
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	be df       	rcall	.-132    	; 0x11e <_ZN3MCU7Setting9beginPortEib>
	beginPort(E, IN);
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	84 e0       	ldi	r24, 0x04	; 4
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	ba df       	rcall	.-140    	; 0x11e <_ZN3MCU7Setting9beginPortEib>
	
	//sei();
	
    while (true) 
    {
		newdata = PINE;
 1aa:	81 b1       	in	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <newdata+0x1>
 1b2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <newdata>
		detection = olddata & (~ newdata);
 1b6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <newdata>
 1ba:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <newdata+0x1>
 1be:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <olddata>
 1c2:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <olddata+0x1>
 1c6:	80 95       	com	r24
 1c8:	90 95       	com	r25
 1ca:	82 23       	and	r24, r18
 1cc:	93 23       	and	r25, r19
 1ce:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		if (detection != 0x00)
 1d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1da:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1de:	89 2b       	or	r24, r25
 1e0:	a1 f1       	breq	.+104    	; 0x24a <main+0xc0>
		{
			switch (detection)
 1e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ea:	85 30       	cpi	r24, 0x05	; 5
 1ec:	91 05       	cpc	r25, r1
 1ee:	a9 f0       	breq	.+42     	; 0x21a <main+0x90>
 1f0:	30 f4       	brcc	.+12     	; 0x1fe <main+0x74>
 1f2:	81 30       	cpi	r24, 0x01	; 1
 1f4:	91 05       	cpc	r25, r1
 1f6:	61 f0       	breq	.+24     	; 0x210 <main+0x86>
 1f8:	04 97       	sbiw	r24, 0x04	; 4
 1fa:	a1 f0       	breq	.+40     	; 0x224 <main+0x9a>
 1fc:	26 c0       	rjmp	.+76     	; 0x24a <main+0xc0>
 1fe:	84 31       	cpi	r24, 0x14	; 20
 200:	91 05       	cpc	r25, r1
 202:	a9 f0       	breq	.+42     	; 0x22e <main+0xa4>
 204:	85 31       	cpi	r24, 0x15	; 21
 206:	91 05       	cpc	r25, r1
 208:	e1 f0       	breq	.+56     	; 0x242 <main+0xb8>
 20a:	40 97       	sbiw	r24, 0x10	; 16
 20c:	f1 f4       	brne	.+60     	; 0x24a <main+0xc0>
			{
				case 0x01:
					sensorOff();
 20e:	14 c0       	rjmp	.+40     	; 0x238 <main+0xae>
					left = ON;
 210:	af df       	rcall	.-162    	; 0x170 <_Z9sensorOffv>
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <left>
					break;
					
				case 0x05:
					sensorOff();
 218:	18 c0       	rjmp	.+48     	; 0x24a <main+0xc0>
					leftMiddle = ON;
 21a:	aa df       	rcall	.-172    	; 0x170 <_Z9sensorOffv>
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <leftMiddle>
					break;
					
				case 0x04:
					sensorOff();
 222:	13 c0       	rjmp	.+38     	; 0x24a <main+0xc0>
					middle = ON;
 224:	a5 df       	rcall	.-182    	; 0x170 <_Z9sensorOffv>
 226:	81 e0       	ldi	r24, 0x01	; 1
					break;
 228:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <middle>
					
				case 0x14:
					sensorOff();
 22c:	0e c0       	rjmp	.+28     	; 0x24a <main+0xc0>
					rightMiddle = ON;
 22e:	a0 df       	rcall	.-192    	; 0x170 <_Z9sensorOffv>
 230:	81 e0       	ldi	r24, 0x01	; 1
					break;
 232:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <rightMiddle>
					
				case 0x10:
					sensorOff();
 236:	09 c0       	rjmp	.+18     	; 0x24a <main+0xc0>
					right = ON;
 238:	9b df       	rcall	.-202    	; 0x170 <_Z9sensorOffv>
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <right>
					break;
					
				case 0x15:
					sensorOff();
 240:	04 c0       	rjmp	.+8      	; 0x24a <main+0xc0>
 242:	96 df       	rcall	.-212    	; 0x170 <_Z9sensorOffv>
					all = ON;
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <all>
				default:
					break;
			}
		}

		olddata = newdata;
 24a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <newdata>
 24e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <newdata+0x1>
 252:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <olddata+0x1>
 256:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <olddata>
		
		if (left == ON)
 25a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <left>
 25e:	88 23       	and	r24, r24
 260:	51 f0       	breq	.+20     	; 0x276 <main+0xec>
		{
			PORTD = 0x01;
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 266:	85 e2       	ldi	r24, 0x25	; 37
 268:	8a 95       	dec	r24
 26a:	f1 f7       	brne	.-4      	; 0x268 <main+0xde>
 26c:	00 00       	nop
			_delay_us(7);
			PORTD = 0x00;
 26e:	12 ba       	out	0x12, r1	; 18
			
			isOn = false;
 270:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <isOn>
 274:	9a cf       	rjmp	.-204    	; 0x1aa <main+0x20>
		}
		
		else if (leftMiddle == ON)
 276:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <leftMiddle>
 27a:	88 23       	and	r24, r24
 27c:	51 f0       	breq	.+20     	; 0x292 <main+0x108>
		{
			PORTD = 0x08;
 27e:	88 e0       	ldi	r24, 0x08	; 8
 280:	82 bb       	out	0x12, r24	; 18
 282:	8a e2       	ldi	r24, 0x2A	; 42
 284:	8a 95       	dec	r24
 286:	f1 f7       	brne	.-4      	; 0x284 <main+0xfa>
 288:	00 c0       	rjmp	.+0      	; 0x28a <main+0x100>
			_delay_us(8);
			PORTD = 0x00;
 28a:	12 ba       	out	0x12, r1	; 18
			
			isOn = false;
 28c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <isOn>
 290:	8c cf       	rjmp	.-232    	; 0x1aa <main+0x20>
		}
		
		else if (middle == ON)
 292:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <middle>
 296:	88 23       	and	r24, r24
 298:	61 f0       	breq	.+24     	; 0x2b2 <main+0x128>
		{
			PORTD = 0x01;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	82 bb       	out	0x12, r24	; 18
			PORTC = 0x01;
 29e:	85 bb       	out	0x15, r24	; 21
 2a0:	85 e2       	ldi	r24, 0x25	; 37
 2a2:	8a 95       	dec	r24
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <main+0x118>
 2a6:	00 00       	nop
			_delay_us(7);

			PORTD = 0x00;
 2a8:	12 ba       	out	0x12, r1	; 18
			PORTC = 0x00;
 2aa:	15 ba       	out	0x15, r1	; 21
			
			isOn = false;
 2ac:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <isOn>
 2b0:	7c cf       	rjmp	.-264    	; 0x1aa <main+0x20>
		}
		
		else if (rightMiddle == ON)
 2b2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <rightMiddle>
 2b6:	88 23       	and	r24, r24
 2b8:	51 f0       	breq	.+20     	; 0x2ce <main+0x144>
		{
			PORTC = 0x01;
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	85 bb       	out	0x15, r24	; 21
 2be:	8a e2       	ldi	r24, 0x2A	; 42
 2c0:	8a 95       	dec	r24
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <main+0x136>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <main+0x13c>
			_delay_us(8);
			PORTC = 0x00;
 2c6:	15 ba       	out	0x15, r1	; 21
			
			isOn = false;
 2c8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <isOn>
 2cc:	6e cf       	rjmp	.-292    	; 0x1aa <main+0x20>
		}
		
		else if (right == ON)
 2ce:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <right>
 2d2:	88 23       	and	r24, r24
 2d4:	51 f0       	breq	.+20     	; 0x2ea <main+0x160>
		{
			PORTC = 0x01;
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	85 bb       	out	0x15, r24	; 21
 2da:	85 e2       	ldi	r24, 0x25	; 37
 2dc:	8a 95       	dec	r24
 2de:	f1 f7       	brne	.-4      	; 0x2dc <main+0x152>
 2e0:	00 00       	nop
			_delay_us(7);
			PORTC = 0x00;
 2e2:	15 ba       	out	0x15, r1	; 21
			
			isOn = false;
 2e4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <isOn>
 2e8:	60 cf       	rjmp	.-320    	; 0x1aa <main+0x20>
		}
		
		else if (all == ON)
 2ea:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <all>
 2ee:	88 23       	and	r24, r24
 2f0:	09 f4       	brne	.+2      	; 0x2f4 <main+0x16a>
 2f2:	5b cf       	rjmp	.-330    	; 0x1aa <main+0x20>
		{
			PORTC = 0x08;
 2f4:	88 e0       	ldi	r24, 0x08	; 8
 2f6:	85 bb       	out	0x15, r24	; 21
 2f8:	85 e2       	ldi	r24, 0x25	; 37
 2fa:	8a 95       	dec	r24
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <main+0x170>
 2fe:	00 00       	nop
			_delay_us(7);
			PORTC = 0x00;
 300:	15 ba       	out	0x15, r1	; 21
			
			isOn = false;
 302:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <isOn>
 306:	51 cf       	rjmp	.-350    	; 0x1aa <main+0x20>

00000308 <_GLOBAL__sub_I__Z9insertBitib>:
	leftMiddle = OFF;
	middle = OFF;
	rightMiddle = OFF;
	right = OFF;
	all = OFF;
}
 308:	6f ef       	ldi	r22, 0xFF	; 255
 30a:	7f ef       	ldi	r23, 0xFF	; 255
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	e6 ce       	rjmp	.-564    	; 0xde <_Z41__static_initialization_and_destruction_0ii>
 312:	08 95       	ret

00000314 <__tablejump2__>:
 314:	ee 0f       	add	r30, r30
 316:	ff 1f       	adc	r31, r31
 318:	00 24       	eor	r0, r0
 31a:	00 1c       	adc	r0, r0
 31c:	0b be       	out	0x3b, r0	; 59
 31e:	07 90       	elpm	r0, Z+
 320:	f6 91       	elpm	r31, Z
 322:	e0 2d       	mov	r30, r0
 324:	09 94       	ijmp

00000326 <_exit>:
 326:	f8 94       	cli

00000328 <__stop_program>:
 328:	ff cf       	rjmp	.-2      	; 0x328 <__stop_program>
