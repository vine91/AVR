
ATmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000a6e  00000b02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800102  00800102  00000b04  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001964  00000000  00000000  00000c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d54  00000000  00000000  000025cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a5d  00000000  00000000  00003320  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  00003d80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000080a  00000000  00000000  00003fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cb9  00000000  00000000  000047be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00005477  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	64 c0       	rjmp	.+200    	; 0xca <__ctors_end>
   2:	00 00       	nop
   4:	89 c0       	rjmp	.+274    	; 0x118 <__bad_interrupt>
   6:	00 00       	nop
   8:	87 c0       	rjmp	.+270    	; 0x118 <__bad_interrupt>
   a:	00 00       	nop
   c:	85 c0       	rjmp	.+266    	; 0x118 <__bad_interrupt>
   e:	00 00       	nop
  10:	83 c0       	rjmp	.+262    	; 0x118 <__bad_interrupt>
  12:	00 00       	nop
  14:	81 c0       	rjmp	.+258    	; 0x118 <__bad_interrupt>
  16:	00 00       	nop
  18:	7f c0       	rjmp	.+254    	; 0x118 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7d c0       	rjmp	.+250    	; 0x118 <__bad_interrupt>
  1e:	00 00       	nop
  20:	7b c0       	rjmp	.+246    	; 0x118 <__bad_interrupt>
  22:	00 00       	nop
  24:	bd c0       	rjmp	.+378    	; 0x1a0 <__vector_9>
  26:	00 00       	nop
  28:	77 c0       	rjmp	.+238    	; 0x118 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	75 c0       	rjmp	.+234    	; 0x118 <__bad_interrupt>
  2e:	00 00       	nop
  30:	73 c0       	rjmp	.+230    	; 0x118 <__bad_interrupt>
  32:	00 00       	nop
  34:	71 c0       	rjmp	.+226    	; 0x118 <__bad_interrupt>
  36:	00 00       	nop
  38:	6f c0       	rjmp	.+222    	; 0x118 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6d c0       	rjmp	.+218    	; 0x118 <__bad_interrupt>
  3e:	00 00       	nop
  40:	6b c0       	rjmp	.+214    	; 0x118 <__bad_interrupt>
  42:	00 00       	nop
  44:	69 c0       	rjmp	.+210    	; 0x118 <__bad_interrupt>
  46:	00 00       	nop
  48:	67 c0       	rjmp	.+206    	; 0x118 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	65 c0       	rjmp	.+202    	; 0x118 <__bad_interrupt>
  4e:	00 00       	nop
  50:	63 c0       	rjmp	.+198    	; 0x118 <__bad_interrupt>
  52:	00 00       	nop
  54:	61 c0       	rjmp	.+194    	; 0x118 <__bad_interrupt>
  56:	00 00       	nop
  58:	5f c0       	rjmp	.+190    	; 0x118 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5d c0       	rjmp	.+186    	; 0x118 <__bad_interrupt>
  5e:	00 00       	nop
  60:	5b c0       	rjmp	.+182    	; 0x118 <__bad_interrupt>
  62:	00 00       	nop
  64:	59 c0       	rjmp	.+178    	; 0x118 <__bad_interrupt>
  66:	00 00       	nop
  68:	57 c0       	rjmp	.+174    	; 0x118 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	55 c0       	rjmp	.+170    	; 0x118 <__bad_interrupt>
  6e:	00 00       	nop
  70:	53 c0       	rjmp	.+166    	; 0x118 <__bad_interrupt>
  72:	00 00       	nop
  74:	51 c0       	rjmp	.+162    	; 0x118 <__bad_interrupt>
  76:	00 00       	nop
  78:	4f c0       	rjmp	.+158    	; 0x118 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4d c0       	rjmp	.+154    	; 0x118 <__bad_interrupt>
  7e:	00 00       	nop
  80:	4b c0       	rjmp	.+150    	; 0x118 <__bad_interrupt>
  82:	00 00       	nop
  84:	49 c0       	rjmp	.+146    	; 0x118 <__bad_interrupt>
  86:	00 00       	nop
  88:	47 c0       	rjmp	.+142    	; 0x118 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	a8 01       	movw	r20, r16
  8e:	ab 01       	movw	r20, r22
  90:	ae 01       	movw	r20, r28
  92:	b1 01       	movw	r22, r2
  94:	b4 01       	movw	r22, r8
  96:	b7 01       	movw	r22, r14
  98:	bc 01       	movw	r22, r24
  9a:	72 02       	muls	r23, r18
  9c:	90 02       	muls	r25, r16
  9e:	9f 02       	muls	r25, r31
  a0:	ae 02       	muls	r26, r30
  a2:	81 02       	muls	r24, r17
  a4:	bd 02       	muls	r27, r29
  a6:	ce 02       	muls	r28, r30
  a8:	df 02       	muls	r29, r31
  aa:	27 03       	mulsu	r18, r23
  ac:	29 03       	fmul	r18, r17
  ae:	2e 03       	fmul	r18, r22
  b0:	33 03       	mulsu	r19, r19
  b2:	3a 03       	fmul	r19, r18
  b4:	3c 03       	fmul	r19, r20
  b6:	43 03       	mulsu	r20, r19
  b8:	4a 03       	fmul	r20, r18
  ba:	92 03       	fmuls	r17, r18
  bc:	99 03       	fmulsu	r17, r17
  be:	a0 03       	fmuls	r18, r16
  c0:	a7 03       	fmuls	r18, r23
  c2:	ae 03       	fmulsu	r18, r22
  c4:	b5 03       	fmuls	r19, r21
  c6:	bc 03       	fmulsu	r19, r20

000000c8 <__ctors_start>:
  c8:	87 01       	movw	r16, r14

000000ca <__ctors_end>:
  ca:	11 24       	eor	r1, r1
  cc:	1f be       	out	0x3f, r1	; 63
  ce:	cf ef       	ldi	r28, 0xFF	; 255
  d0:	d0 e1       	ldi	r29, 0x10	; 16
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	cd bf       	out	0x3d, r28	; 61

000000d6 <__do_copy_data>:
  d6:	11 e0       	ldi	r17, 0x01	; 1
  d8:	a0 e0       	ldi	r26, 0x00	; 0
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	ee e6       	ldi	r30, 0x6E	; 110
  de:	fa e0       	ldi	r31, 0x0A	; 10
  e0:	00 e0       	ldi	r16, 0x00	; 0
  e2:	0b bf       	out	0x3b, r16	; 59
  e4:	02 c0       	rjmp	.+4      	; 0xea <__do_copy_data+0x14>
  e6:	07 90       	elpm	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	a2 30       	cpi	r26, 0x02	; 2
  ec:	b1 07       	cpc	r27, r17
  ee:	d9 f7       	brne	.-10     	; 0xe6 <__do_copy_data+0x10>

000000f0 <__do_clear_bss>:
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	a2 e0       	ldi	r26, 0x02	; 2
  f4:	b1 e0       	ldi	r27, 0x01	; 1
  f6:	01 c0       	rjmp	.+2      	; 0xfa <.do_clear_bss_start>

000000f8 <.do_clear_bss_loop>:
  f8:	1d 92       	st	X+, r1

000000fa <.do_clear_bss_start>:
  fa:	a8 31       	cpi	r26, 0x18	; 24
  fc:	b2 07       	cpc	r27, r18
  fe:	e1 f7       	brne	.-8      	; 0xf8 <.do_clear_bss_loop>

00000100 <__do_global_ctors>:
 100:	10 e0       	ldi	r17, 0x00	; 0
 102:	c5 e6       	ldi	r28, 0x65	; 101
 104:	d0 e0       	ldi	r29, 0x00	; 0
 106:	03 c0       	rjmp	.+6      	; 0x10e <__do_global_ctors+0xe>
 108:	21 97       	sbiw	r28, 0x01	; 1
 10a:	fe 01       	movw	r30, r28
 10c:	a5 d4       	rcall	.+2378   	; 0xa58 <__tablejump2__>
 10e:	c4 36       	cpi	r28, 0x64	; 100
 110:	d1 07       	cpc	r29, r17
 112:	d1 f7       	brne	.-12     	; 0x108 <__do_global_ctors+0x8>
 114:	1c d0       	rcall	.+56     	; 0x14e <main>
 116:	a9 c4       	rjmp	.+2386   	; 0xa6a <_exit>

00000118 <__bad_interrupt>:
 118:	73 cf       	rjmp	.-282    	; 0x0 <__vectors>

0000011a <_Z41__static_initialization_and_destruction_0ii>:
	else
	{
		sensor.oldData = sensor.result;
	}
	
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	b9 f4       	brne	.+46     	; 0x14c <_Z41__static_initialization_and_destruction_0ii+0x32>
 11e:	6f 3f       	cpi	r22, 0xFF	; 255
 120:	7f 4f       	sbci	r23, 0xFF	; 255
 122:	a1 f4       	brne	.+40     	; 0x14c <_Z41__static_initialization_and_destruction_0ii+0x32>
private:
	unsigned int m_SwitchPort;
	unsigned int m_SwitchMode;

public:
	SW (int switchPort, int switchMode) { m_SwitchPort = switchPort; m_SwitchMode = switchMode; }
 124:	ec e0       	ldi	r30, 0x0C	; 12
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	85 e0       	ldi	r24, 0x05	; 5
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	91 83       	std	Z+1, r25	; 0x01
 12e:	80 83       	st	Z, r24
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	93 83       	std	Z+3, r25	; 0x03
 136:	82 83       	std	Z+2, r24	; 0x02
	unsigned int m_MotorPin;
	unsigned int m_Speed;
	bool m_isOn;

public:
	Motor (int motorPin) { m_MotorPin = motorPin; }
 138:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <right+0x1>
 13c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <right>
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 148:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 14c:	08 95       	ret

0000014e <main>:
-------------   MAIN START   ---------------
//========================================*/

int main(void)
{
	beginPort(B, OUT);
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	f1 d0       	rcall	.+482    	; 0x338 <_ZN3MCU7Setting9beginPortEib>
	beginPort(F, IN);
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	85 e0       	ldi	r24, 0x05	; 5
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	ed d0       	rcall	.+474    	; 0x338 <_ZN3MCU7Setting9beginPortEib>
	
	beginTimer(2, COMP);
 15e:	63 e0       	ldi	r22, 0x03	; 3
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0d d1       	rcall	.+538    	; 0x382 <_ZN3MCU7Setting10beginTimerEii>
	
	beginPWM(OC0, CORRECT);
 168:	68 e0       	ldi	r22, 0x08	; 8
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	ac d1       	rcall	.+856    	; 0x4ca <_ZN3MCU7Setting8beginPWMEii>
	beginPWM(OC1C, CORRECT);
 172:	68 e0       	ldi	r22, 0x08	; 8
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	a7 d1       	rcall	.+846    	; 0x4ca <_ZN3MCU7Setting8beginPWMEii>
	
	left.setSpeed(25);
 17c:	69 e1       	ldi	r22, 0x19	; 25
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	8e d2       	rcall	.+1308   	; 0x6a2 <_ZN5Motor8setSpeedEi>
	right.setSpeed(25);
 186:	69 e1       	ldi	r22, 0x19	; 25
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	87 e0       	ldi	r24, 0x07	; 7
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	89 d2       	rcall	.+1298   	; 0x6a2 <_ZN5Motor8setSpeedEi>
	
	sei();
 190:	78 94       	sei
	
    while (true) 
    {
		left.start();
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	ad d2       	rcall	.+1370   	; 0x6f2 <_ZN5Motor5startEv>
 198:	87 e0       	ldi	r24, 0x07	; 7
		right.start();
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	aa d2       	rcall	.+1364   	; 0x6f2 <_ZN5Motor5startEv>
 19e:	f9 cf       	rjmp	.-14     	; 0x192 <main+0x44>

000001a0 <__vector_9>:
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
--------------   MAIN END   ----------------
//========================================*/


ISR(TIMER2_COMP_vect)
{
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	0b b6       	in	r0, 0x3b	; 59
 1ac:	0f 92       	push	r0
 1ae:	2f 93       	push	r18
 1b0:	3f 93       	push	r19
 1b2:	4f 93       	push	r20
 1b4:	5f 93       	push	r21
 1b6:	6f 93       	push	r22
 1b8:	7f 93       	push	r23
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	af 93       	push	r26
 1c0:	bf 93       	push	r27
 1c2:	ef 93       	push	r30
 1c4:	ff 93       	push	r31
	
	if (g_isStart == ON)
 1c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ca:	88 23       	and	r24, r24
 1cc:	09 f4       	brne	.+2      	; 0x1d0 <__vector_9+0x30>
 1ce:	78 c0       	rjmp	.+240    	; 0x2c0 <__vector_9+0x120>
	{
		
		sensor.setMax(0x15);
 1d0:	65 e1       	ldi	r22, 0x15	; 21
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	8c e0       	ldi	r24, 0x0C	; 12
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	97 d2       	rcall	.+1326   	; 0x708 <_ZN2SW6setMaxEi>
		sensor.init();
 1da:	8c e0       	ldi	r24, 0x0C	; 12
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	98 d2       	rcall	.+1328   	; 0x710 <_ZN2SW4initEv>
		
		switch (sensor.result)
 1e0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <sensor+0x8>
 1e4:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <sensor+0x9>
 1e8:	84 30       	cpi	r24, 0x04	; 4
 1ea:	91 05       	cpc	r25, r1
 1ec:	39 f1       	breq	.+78     	; 0x23c <__vector_9+0x9c>
 1ee:	30 f4       	brcc	.+12     	; 0x1fc <__vector_9+0x5c>
 1f0:	00 97       	sbiw	r24, 0x00	; 0
 1f2:	09 f4       	brne	.+2      	; 0x1f6 <__vector_9+0x56>
 1f4:	44 c0       	rjmp	.+136    	; 0x27e <__vector_9+0xde>
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	59 f0       	breq	.+22     	; 0x210 <__vector_9+0x70>
 1fa:	62 c0       	rjmp	.+196    	; 0x2c0 <__vector_9+0x120>
 1fc:	80 31       	cpi	r24, 0x10	; 16
 1fe:	91 05       	cpc	r25, r1
 200:	99 f1       	breq	.+102    	; 0x268 <__vector_9+0xc8>
 202:	84 31       	cpi	r24, 0x14	; 20
 204:	91 05       	cpc	r25, r1
 206:	29 f1       	breq	.+74     	; 0x252 <__vector_9+0xb2>
 208:	05 97       	sbiw	r24, 0x05	; 5
 20a:	09 f0       	breq	.+2      	; 0x20e <__vector_9+0x6e>
 20c:	59 c0       	rjmp	.+178    	; 0x2c0 <__vector_9+0x120>
 20e:	0b c0       	rjmp	.+22     	; 0x226 <__vector_9+0x86>
		{
			case 0x01:
				left.setSpeed(18);
 210:	62 e1       	ldi	r22, 0x12	; 18
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	44 d2       	rcall	.+1160   	; 0x6a2 <_ZN5Motor8setSpeedEi>
				right.setSpeed(22);
 21a:	66 e1       	ldi	r22, 0x16	; 22
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	87 e0       	ldi	r24, 0x07	; 7
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	3f d2       	rcall	.+1150   	; 0x6a2 <_ZN5Motor8setSpeedEi>
				break;
 224:	4d c0       	rjmp	.+154    	; 0x2c0 <__vector_9+0x120>
			
			case 0x05:
				left.setSpeed(22);
 226:	66 e1       	ldi	r22, 0x16	; 22
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	39 d2       	rcall	.+1138   	; 0x6a2 <_ZN5Motor8setSpeedEi>
				right.setSpeed(25);
 230:	69 e1       	ldi	r22, 0x19	; 25
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	87 e0       	ldi	r24, 0x07	; 7
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	34 d2       	rcall	.+1128   	; 0x6a2 <_ZN5Motor8setSpeedEi>
				break;
 23a:	42 c0       	rjmp	.+132    	; 0x2c0 <__vector_9+0x120>
			
			case 0x04:
				left.setSpeed(25);
 23c:	69 e1       	ldi	r22, 0x19	; 25
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	2e d2       	rcall	.+1116   	; 0x6a2 <_ZN5Motor8setSpeedEi>
				right.setSpeed(25);
 246:	69 e1       	ldi	r22, 0x19	; 25
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	87 e0       	ldi	r24, 0x07	; 7
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	29 d2       	rcall	.+1106   	; 0x6a2 <_ZN5Motor8setSpeedEi>
				break;
 250:	37 c0       	rjmp	.+110    	; 0x2c0 <__vector_9+0x120>
			
			case 0x14:
				left.setSpeed(25);
 252:	69 e1       	ldi	r22, 0x19	; 25
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	23 d2       	rcall	.+1094   	; 0x6a2 <_ZN5Motor8setSpeedEi>
				right.setSpeed(22);
 25c:	66 e1       	ldi	r22, 0x16	; 22
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	87 e0       	ldi	r24, 0x07	; 7
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	1e d2       	rcall	.+1084   	; 0x6a2 <_ZN5Motor8setSpeedEi>
				break;
			
			case 0x10:
				left.setSpeed(22);
 266:	2c c0       	rjmp	.+88     	; 0x2c0 <__vector_9+0x120>
 268:	66 e1       	ldi	r22, 0x16	; 22
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	18 d2       	rcall	.+1072   	; 0x6a2 <_ZN5Motor8setSpeedEi>
				right.setSpeed(18);
 272:	62 e1       	ldi	r22, 0x12	; 18
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	87 e0       	ldi	r24, 0x07	; 7
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	13 d2       	rcall	.+1062   	; 0x6a2 <_ZN5Motor8setSpeedEi>
				break;
 27c:	21 c0       	rjmp	.+66     	; 0x2c0 <__vector_9+0x120>
			
			case 0x00:
				if (sensor.oldData == 0x01)
 27e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <sensor+0x6>
 282:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <sensor+0x7>
 286:	01 97       	sbiw	r24, 0x01	; 1
				{
					left.setSpeed(0);
 288:	59 f4       	brne	.+22     	; 0x2a0 <__vector_9+0x100>
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	07 d2       	rcall	.+1038   	; 0x6a2 <_ZN5Motor8setSpeedEi>
					right.setSpeed(18);
 294:	62 e1       	ldi	r22, 0x12	; 18
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	87 e0       	ldi	r24, 0x07	; 7
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	02 d2       	rcall	.+1028   	; 0x6a2 <_ZN5Motor8setSpeedEi>
 29e:	10 c0       	rjmp	.+32     	; 0x2c0 <__vector_9+0x120>
				}
				
				else if (sensor.oldData == 0x10)
 2a0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <sensor+0x6>
 2a4:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <sensor+0x7>
 2a8:	40 97       	sbiw	r24, 0x10	; 16
				{
					left.setSpeed(18);
 2aa:	51 f4       	brne	.+20     	; 0x2c0 <__vector_9+0x120>
 2ac:	62 e1       	ldi	r22, 0x12	; 18
 2ae:	70 e0       	ldi	r23, 0x00	; 0
 2b0:	82 e0       	ldi	r24, 0x02	; 2
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	f6 d1       	rcall	.+1004   	; 0x6a2 <_ZN5Motor8setSpeedEi>
					right.setSpeed(0);
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	87 e0       	ldi	r24, 0x07	; 7
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	f1 d1       	rcall	.+994    	; 0x6a2 <_ZN5Motor8setSpeedEi>
 2c0:	ec e0       	ldi	r30, 0x0C	; 12
				break;
		}
		
	}
	
	if (sensor.result == sensor.maxData)
 2c2:	f1 e0       	ldi	r31, 0x01	; 1
 2c4:	20 85       	ldd	r18, Z+8	; 0x08
 2c6:	31 85       	ldd	r19, Z+9	; 0x09
 2c8:	82 85       	ldd	r24, Z+10	; 0x0a
 2ca:	93 85       	ldd	r25, Z+11	; 0x0b
 2cc:	28 17       	cp	r18, r24
 2ce:	39 07       	cpc	r19, r25
 2d0:	29 f4       	brne	.+10     	; 0x2dc <__vector_9+0x13c>
 2d2:	86 81       	ldd	r24, Z+6	; 0x06
	{
		sensor.oldData = sensor.oldData;
 2d4:	97 81       	ldd	r25, Z+7	; 0x07
 2d6:	97 83       	std	Z+7, r25	; 0x07
 2d8:	86 83       	std	Z+6, r24	; 0x06
 2da:	06 c0       	rjmp	.+12     	; 0x2e8 <__vector_9+0x148>
 2dc:	ec e0       	ldi	r30, 0x0C	; 12
	}
	
	else
	{
		sensor.oldData = sensor.result;
 2de:	f1 e0       	ldi	r31, 0x01	; 1
 2e0:	80 85       	ldd	r24, Z+8	; 0x08
 2e2:	91 85       	ldd	r25, Z+9	; 0x09
 2e4:	97 83       	std	Z+7, r25	; 0x07
 2e6:	86 83       	std	Z+6, r24	; 0x06
 2e8:	ff 91       	pop	r31
	}
	
 2ea:	ef 91       	pop	r30
 2ec:	bf 91       	pop	r27
 2ee:	af 91       	pop	r26
 2f0:	9f 91       	pop	r25
 2f2:	8f 91       	pop	r24
 2f4:	7f 91       	pop	r23
 2f6:	6f 91       	pop	r22
 2f8:	5f 91       	pop	r21
 2fa:	4f 91       	pop	r20
 2fc:	3f 91       	pop	r19
 2fe:	2f 91       	pop	r18
 300:	0f 90       	pop	r0
 302:	0b be       	out	0x3b, r0	; 59
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <_GLOBAL__sub_I_sensor>:
 30e:	6f ef       	ldi	r22, 0xFF	; 255
 310:	7f ef       	ldi	r23, 0xFF	; 255
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	01 cf       	rjmp	.-510    	; 0x11a <_Z41__static_initialization_and_destruction_0ii>
 318:	08 95       	ret

0000031a <_ZN3MCU9insertBitEib>:
		
		default:
			break;
	}
	
}
 31a:	66 23       	and	r22, r22
 31c:	51 f0       	breq	.+20     	; 0x332 <_ZN3MCU9insertBitEib+0x18>
 31e:	21 e0       	ldi	r18, 0x01	; 1
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	a9 01       	movw	r20, r18
 324:	02 c0       	rjmp	.+4      	; 0x32a <_ZN3MCU9insertBitEib+0x10>
 326:	44 0f       	add	r20, r20
 328:	55 1f       	adc	r21, r21
 32a:	8a 95       	dec	r24
 32c:	e2 f7       	brpl	.-8      	; 0x326 <_ZN3MCU9insertBitEib+0xc>
 32e:	ca 01       	movw	r24, r20
 330:	08 95       	ret
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	08 95       	ret

00000338 <_ZN3MCU7Setting9beginPortEib>:
 338:	66 23       	and	r22, r22
 33a:	11 f0       	breq	.+4      	; 0x340 <_ZN3MCU7Setting9beginPortEib+0x8>
 33c:	2f ef       	ldi	r18, 0xFF	; 255
 33e:	01 c0       	rjmp	.+2      	; 0x342 <_ZN3MCU7Setting9beginPortEib+0xa>
 340:	20 e0       	ldi	r18, 0x00	; 0
 342:	87 30       	cpi	r24, 0x07	; 7
 344:	91 05       	cpc	r25, r1
 346:	e0 f4       	brcc	.+56     	; 0x380 <_ZN3MCU7Setting9beginPortEib+0x48>
 348:	fc 01       	movw	r30, r24
 34a:	ea 5b       	subi	r30, 0xBA	; 186
 34c:	ff 4f       	sbci	r31, 0xFF	; 255
 34e:	84 c3       	rjmp	.+1800   	; 0xa58 <__tablejump2__>
 350:	2a bb       	out	0x1a, r18	; 26
 352:	1b ba       	out	0x1b, r1	; 27
 354:	08 95       	ret
 356:	27 bb       	out	0x17, r18	; 23
 358:	18 ba       	out	0x18, r1	; 24
 35a:	08 95       	ret
 35c:	24 bb       	out	0x14, r18	; 20
 35e:	15 ba       	out	0x15, r1	; 21
 360:	08 95       	ret
 362:	21 bb       	out	0x11, r18	; 17
 364:	12 ba       	out	0x12, r1	; 18
 366:	08 95       	ret
 368:	22 b9       	out	0x02, r18	; 2
 36a:	13 b8       	out	0x03, r1	; 3
 36c:	08 95       	ret
 36e:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 372:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 376:	08 95       	ret
 378:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
 37c:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 380:	08 95       	ret

00000382 <_ZN3MCU7Setting10beginTimerEii>:
//----------------------------------------*/

void MCU::Setting::beginTimer (int timerIndex, int timerMode)
{
	
	switch (timerIndex)
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	91 05       	cpc	r25, r1
 386:	09 f4       	brne	.+2      	; 0x38a <_ZN3MCU7Setting10beginTimerEii+0x8>
 388:	49 c0       	rjmp	.+146    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 38a:	1c f4       	brge	.+6      	; 0x392 <_ZN3MCU7Setting10beginTimerEii+0x10>
 38c:	89 2b       	or	r24, r25
 38e:	41 f0       	breq	.+16     	; 0x3a0 <_ZN3MCU7Setting10beginTimerEii+0x1e>
 390:	08 95       	ret
 392:	82 30       	cpi	r24, 0x02	; 2
 394:	91 05       	cpc	r25, r1
 396:	19 f1       	breq	.+70     	; 0x3de <_ZN3MCU7Setting10beginTimerEii+0x5c>
 398:	03 97       	sbiw	r24, 0x03	; 3
 39a:	09 f4       	brne	.+2      	; 0x39e <_ZN3MCU7Setting10beginTimerEii+0x1c>
 39c:	64 c0       	rjmp	.+200    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 39e:	08 95       	ret
	{
		// TIMER INTERRUPT 0, 2 (8 BIT)
		case 0:
			if (timerMode == OVF)
 3a0:	64 30       	cpi	r22, 0x04	; 4
 3a2:	71 05       	cpc	r23, r1
 3a4:	59 f4       	brne	.+22     	; 0x3bc <_ZN3MCU7Setting10beginTimerEii+0x3a>
			{
				TIMSK += insertBit(0, HIGH);
 3a6:	61 e0       	ldi	r22, 0x01	; 1
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	b6 df       	rcall	.-148    	; 0x31a <_ZN3MCU9insertBitEib>
 3ae:	97 b7       	in	r25, 0x37	; 55
 3b0:	89 0f       	add	r24, r25
 3b2:	87 bf       	out	0x37, r24	; 55
				
				TCCR0 = 0x07;		// 1024, Normal Mode
 3b4:	87 e0       	ldi	r24, 0x07	; 7
 3b6:	83 bf       	out	0x33, r24	; 51
				TCNT0 = 0x00;		// Start Counting 0x00
 3b8:	12 be       	out	0x32, r1	; 50
 3ba:	08 95       	ret
			}
			
			else if (timerMode == COMP)
 3bc:	63 30       	cpi	r22, 0x03	; 3
 3be:	71 05       	cpc	r23, r1
 3c0:	09 f0       	breq	.+2      	; 0x3c4 <_ZN3MCU7Setting10beginTimerEii+0x42>
 3c2:	82 c0       	rjmp	.+260    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
			{
				TIMSK += insertBit(1, HIGH);
 3c4:	61 e0       	ldi	r22, 0x01	; 1
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	a7 df       	rcall	.-178    	; 0x31a <_ZN3MCU9insertBitEib>
 3cc:	97 b7       	in	r25, 0x37	; 55
 3ce:	89 0f       	add	r24, r25
 3d0:	87 bf       	out	0x37, r24	; 55
				
				TCCR0 = 0x0F;		// 1024, CTC Mode
 3d2:	8f e0       	ldi	r24, 0x0F	; 15
 3d4:	83 bf       	out	0x33, r24	; 51
				TCNT0 = 0x00;		// Start Counting 0x00
 3d6:	12 be       	out	0x32, r1	; 50
				OCR0 = _OCR0;
 3d8:	8f ef       	ldi	r24, 0xFF	; 255
 3da:	81 bf       	out	0x31, r24	; 49
 3dc:	08 95       	ret
			}
			
			break;
		
		case 2:
			if (timerMode == OVF)
 3de:	64 30       	cpi	r22, 0x04	; 4
 3e0:	71 05       	cpc	r23, r1
 3e2:	59 f4       	brne	.+22     	; 0x3fa <_ZN3MCU7Setting10beginTimerEii+0x78>
			{
				TIMSK += insertBit(6, HIGH);
 3e4:	61 e0       	ldi	r22, 0x01	; 1
 3e6:	86 e0       	ldi	r24, 0x06	; 6
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	97 df       	rcall	.-210    	; 0x31a <_ZN3MCU9insertBitEib>
 3ec:	97 b7       	in	r25, 0x37	; 55
 3ee:	89 0f       	add	r24, r25
 3f0:	87 bf       	out	0x37, r24	; 55
				
				TCCR2 = 0x05;		// 1024, Normal Mode
 3f2:	85 e0       	ldi	r24, 0x05	; 5
 3f4:	85 bd       	out	0x25, r24	; 37
				TCNT2 = 0x00;		// Start Counting 0x00
 3f6:	14 bc       	out	0x24, r1	; 36
 3f8:	08 95       	ret
			}
			
			else if (timerMode == COMP)
 3fa:	63 30       	cpi	r22, 0x03	; 3
 3fc:	71 05       	cpc	r23, r1
 3fe:	09 f0       	breq	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 400:	63 c0       	rjmp	.+198    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
			{
				TIMSK += insertBit(7, HIGH);
 402:	61 e0       	ldi	r22, 0x01	; 1
 404:	87 e0       	ldi	r24, 0x07	; 7
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	88 df       	rcall	.-240    	; 0x31a <_ZN3MCU9insertBitEib>
 40a:	97 b7       	in	r25, 0x37	; 55
 40c:	89 0f       	add	r24, r25
 40e:	87 bf       	out	0x37, r24	; 55
				
				TCCR2 = 0x0D;		// 1024, CTC Mode
 410:	8d e0       	ldi	r24, 0x0D	; 13
 412:	85 bd       	out	0x25, r24	; 37
				TCNT2 = 0x00;		// Start Counting 0x00
 414:	14 bc       	out	0x24, r1	; 36
				OCR2 = _OCR2;
 416:	80 ea       	ldi	r24, 0xA0	; 160
 418:	83 bd       	out	0x23, r24	; 35
 41a:	08 95       	ret
			
			break;
		
		// TIMER INTERRUPT 1, 3 (16 BIT)
		case 1:
			if (timerMode == OVF)
 41c:	64 30       	cpi	r22, 0x04	; 4
 41e:	71 05       	cpc	r23, r1
			{
				TIMSK += insertBit(2, HIGH);
 420:	69 f4       	brne	.+26     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 422:	61 e0       	ldi	r22, 0x01	; 1
 424:	82 e0       	ldi	r24, 0x02	; 2
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	78 df       	rcall	.-272    	; 0x31a <_ZN3MCU9insertBitEib>
 42a:	97 b7       	in	r25, 0x37	; 55
 42c:	89 0f       	add	r24, r25
 42e:	87 bf       	out	0x37, r24	; 55
				
				TCCR1A = 0x00;
 430:	1f bc       	out	0x2f, r1	; 47
				TCCR1B = 0x05;		// 1024, Normal Mode
 432:	85 e0       	ldi	r24, 0x05	; 5
 434:	8e bd       	out	0x2e, r24	; 46
				TCNT1H = 0x00;
 436:	1d bc       	out	0x2d, r1	; 45
				TCNT1L = 0x00;		// Start Counting 0x0000
 438:	1c bc       	out	0x2c, r1	; 44
 43a:	08 95       	ret
			}
			
			else if (timerMode == COMP)
 43c:	63 30       	cpi	r22, 0x03	; 3
 43e:	71 05       	cpc	r23, r1
 440:	09 f0       	breq	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
			{
				TIMSK += insertBit(4, HIGH);
 442:	42 c0       	rjmp	.+132    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 444:	61 e0       	ldi	r22, 0x01	; 1
 446:	84 e0       	ldi	r24, 0x04	; 4
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	67 df       	rcall	.-306    	; 0x31a <_ZN3MCU9insertBitEib>
 44c:	97 b7       	in	r25, 0x37	; 55
 44e:	89 0f       	add	r24, r25
 450:	87 bf       	out	0x37, r24	; 55
				
				TCCR1A = 0x00;
 452:	1f bc       	out	0x2f, r1	; 47
				TCCR1B = 0x0D;		// 1024, CTC Mode
 454:	8d e0       	ldi	r24, 0x0D	; 13
 456:	8e bd       	out	0x2e, r24	; 46
				TCNT1H = 0x00;
 458:	1d bc       	out	0x2d, r1	; 45
				TCNT1L = 0x00;		// Start Counting 0x0000
 45a:	1c bc       	out	0x2c, r1	; 44
				OCR1AH = _OCR1AH;
 45c:	8d e3       	ldi	r24, 0x3D	; 61
 45e:	8b bd       	out	0x2b, r24	; 43
				OCR1AL = _OCR1AL;
 460:	89 e0       	ldi	r24, 0x09	; 9
 462:	8a bd       	out	0x2a, r24	; 42
 464:	08 95       	ret
			}
			
			break;
		
		case 3:
			if (timerMode == OVF)
 466:	64 30       	cpi	r22, 0x04	; 4
 468:	71 05       	cpc	r23, r1
			{
				ETIMSK += insertBit(2, HIGH);
 46a:	99 f4       	brne	.+38     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 46c:	61 e0       	ldi	r22, 0x01	; 1
 46e:	82 e0       	ldi	r24, 0x02	; 2
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	53 df       	rcall	.-346    	; 0x31a <_ZN3MCU9insertBitEib>
 474:	ed e7       	ldi	r30, 0x7D	; 125
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	90 81       	ld	r25, Z
 47a:	89 0f       	add	r24, r25
 47c:	80 83       	st	Z, r24
				
				TCCR3A = 0x00;
 47e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
				TCCR3B = 0x05;		// 1024, Normal Mode
 482:	85 e0       	ldi	r24, 0x05	; 5
 484:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				TCNT3H = 0x00;
 488:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
				TCNT3L = 0x00;		// Start Counting 0x0000
 48c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			}
			
			else if (timerMode == COMP)
 490:	08 95       	ret
 492:	63 30       	cpi	r22, 0x03	; 3
 494:	71 05       	cpc	r23, r1
			{
				ETIMSK += insertBit(4, HIGH);
 496:	c1 f4       	brne	.+48     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 498:	61 e0       	ldi	r22, 0x01	; 1
 49a:	84 e0       	ldi	r24, 0x04	; 4
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	3d df       	rcall	.-390    	; 0x31a <_ZN3MCU9insertBitEib>
 4a0:	ed e7       	ldi	r30, 0x7D	; 125
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	90 81       	ld	r25, Z
 4a6:	89 0f       	add	r24, r25
 4a8:	80 83       	st	Z, r24
				
				TCCR3A = 0x00;
 4aa:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
				TCCR3B = 0x0D;		// 1024, CTC Mode
 4ae:	8d e0       	ldi	r24, 0x0D	; 13
 4b0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				TCNT3H = 0x00;
 4b4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
				TCNT3L = 0x00;		// Start Counting 0x0000
 4b8:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				OCR3AH = _OCR3AH;
 4bc:	8d e3       	ldi	r24, 0x3D	; 61
 4be:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
				OCR3AL = _OCR3AL;
 4c2:	89 e0       	ldi	r24, 0x09	; 9
 4c4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 4c8:	08 95       	ret

000004ca <_ZN3MCU7Setting8beginPWMEii>:
/*----------------------------------------//
			  Begin Timer PWM
//----------------------------------------*/

void MCU::Setting::beginPWM(int PWMIndex, int PWMMode)
{
 4ca:	0f 93       	push	r16
 4cc:	1f 93       	push	r17
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
 4d2:	eb 01       	movw	r28, r22
	
	int correctValue = 0x04;		// 256, Phase Correct PWM (8Bit)
	int fastValue = 0x0C;			// 256, Fast PWM Mode (8Bit)
	
	switch (PWMIndex)
 4d4:	88 30       	cpi	r24, 0x08	; 8
 4d6:	91 05       	cpc	r25, r1
 4d8:	08 f0       	brcs	.+2      	; 0x4dc <_ZN3MCU7Setting8beginPWMEii+0x12>
 4da:	81 c0       	rjmp	.+258    	; 0x5de <_ZN3MCU7Setting8beginPWMEii+0x114>
 4dc:	fc 01       	movw	r30, r24
 4de:	e3 5b       	subi	r30, 0xB3	; 179
 4e0:	ff 4f       	sbci	r31, 0xFF	; 255
 4e2:	ba c2       	rjmp	.+1396   	; 0xa58 <__tablejump2__>
	{
		// TIMER PWM 0, 2 (8 BIT)
		case OC0:
			if (PWMMode == CORRECT)
 4e4:	68 30       	cpi	r22, 0x08	; 8
 4e6:	71 05       	cpc	r23, r1
 4e8:	21 f4       	brne	.+8      	; 0x4f2 <_ZN3MCU7Setting8beginPWMEii+0x28>
			{
				TCCR0 = 0x66;		// 256, Phase Correct PWM
 4ea:	86 e6       	ldi	r24, 0x66	; 102
 4ec:	83 bf       	out	0x33, r24	; 51
				TCNT0 = 0x00;		// Start Counting 0x00
 4ee:	12 be       	out	0x32, r1	; 50
 4f0:	76 c0       	rjmp	.+236    	; 0x5de <_ZN3MCU7Setting8beginPWMEii+0x114>
			}
			
			else if (PWMMode == FAST)
 4f2:	69 30       	cpi	r22, 0x09	; 9
 4f4:	71 05       	cpc	r23, r1
 4f6:	09 f0       	breq	.+2      	; 0x4fa <_ZN3MCU7Setting8beginPWMEii+0x30>
 4f8:	72 c0       	rjmp	.+228    	; 0x5de <_ZN3MCU7Setting8beginPWMEii+0x114>
			{
				TCCR0 = 0x6E;		// 256, Fast PWM Mode
 4fa:	8e e6       	ldi	r24, 0x6E	; 110
 4fc:	83 bf       	out	0x33, r24	; 51
				TCNT0 = 0x00;		// Start Counting 0x00
 4fe:	12 be       	out	0x32, r1	; 50
 500:	6e c0       	rjmp	.+220    	; 0x5de <_ZN3MCU7Setting8beginPWMEii+0x114>
			}
			
			break;
		
		case OC2:
			if (PWMMode == CORRECT)
 502:	68 30       	cpi	r22, 0x08	; 8
 504:	71 05       	cpc	r23, r1
 506:	21 f4       	brne	.+8      	; 0x510 <_ZN3MCU7Setting8beginPWMEii+0x46>
			{
				TCCR2 = 0x64;		// 256, Phase Correct PWM
 508:	84 e6       	ldi	r24, 0x64	; 100
 50a:	85 bd       	out	0x25, r24	; 37
				TCNT2 = 0x00;		// Start Counting 0x00
 50c:	14 bc       	out	0x24, r1	; 36
 50e:	67 c0       	rjmp	.+206    	; 0x5de <_ZN3MCU7Setting8beginPWMEii+0x114>
			}
			
			else if (PWMMode == FAST)
 510:	69 30       	cpi	r22, 0x09	; 9
 512:	71 05       	cpc	r23, r1
 514:	09 f0       	breq	.+2      	; 0x518 <_ZN3MCU7Setting8beginPWMEii+0x4e>
 516:	63 c0       	rjmp	.+198    	; 0x5de <_ZN3MCU7Setting8beginPWMEii+0x114>
			{
				TCCR2 = 0x6C;		// 256, Fast PWM Mode
 518:	8c e6       	ldi	r24, 0x6C	; 108
 51a:	85 bd       	out	0x25, r24	; 37
				TCNT2 = 0x00;		// Start Counting 0x00
 51c:	14 bc       	out	0x24, r1	; 36
 51e:	5f c0       	rjmp	.+190    	; 0x5de <_ZN3MCU7Setting8beginPWMEii+0x114>
			
			break;
		
		// TIMER PWM 1, 3 (8, 9, 10 BIT)
		case OC1A:
			TCCR1A |= insertBit(0, HIGH) | insertBit(7, HIGH);
 520:	61 e0       	ldi	r22, 0x01	; 1
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	f9 de       	rcall	.-526    	; 0x31a <_ZN3MCU9insertBitEib>
 528:	8c 01       	movw	r16, r24
 52a:	61 e0       	ldi	r22, 0x01	; 1
 52c:	87 e0       	ldi	r24, 0x07	; 7
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	f4 de       	rcall	.-536    	; 0x31a <_ZN3MCU9insertBitEib>
 532:	2f b5       	in	r18, 0x2f	; 47
 534:	80 2b       	or	r24, r16
 536:	91 2b       	or	r25, r17
 538:	82 2b       	or	r24, r18
 53a:	8f bd       	out	0x2f, r24	; 47
			break;
 53c:	50 c0       	rjmp	.+160    	; 0x5de <_ZN3MCU7Setting8beginPWMEii+0x114>
		
		case OC1B:
			TCCR1A |= insertBit(0, HIGH) | insertBit(5, HIGH);
 53e:	61 e0       	ldi	r22, 0x01	; 1
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	ea de       	rcall	.-556    	; 0x31a <_ZN3MCU9insertBitEib>
 546:	8c 01       	movw	r16, r24
 548:	61 e0       	ldi	r22, 0x01	; 1
 54a:	85 e0       	ldi	r24, 0x05	; 5
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	e5 de       	rcall	.-566    	; 0x31a <_ZN3MCU9insertBitEib>
 550:	2f b5       	in	r18, 0x2f	; 47
 552:	80 2b       	or	r24, r16
 554:	91 2b       	or	r25, r17
 556:	82 2b       	or	r24, r18
 558:	8f bd       	out	0x2f, r24	; 47
			break;
 55a:	41 c0       	rjmp	.+130    	; 0x5de <_ZN3MCU7Setting8beginPWMEii+0x114>
		
		case OC1C:
			TCCR1A |= insertBit(0, HIGH) | insertBit(3, HIGH);
 55c:	61 e0       	ldi	r22, 0x01	; 1
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	db de       	rcall	.-586    	; 0x31a <_ZN3MCU9insertBitEib>
 564:	8c 01       	movw	r16, r24
 566:	61 e0       	ldi	r22, 0x01	; 1
 568:	83 e0       	ldi	r24, 0x03	; 3
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	d6 de       	rcall	.-596    	; 0x31a <_ZN3MCU9insertBitEib>
 56e:	2f b5       	in	r18, 0x2f	; 47
 570:	80 2b       	or	r24, r16
 572:	91 2b       	or	r25, r17
 574:	82 2b       	or	r24, r18
 576:	8f bd       	out	0x2f, r24	; 47
			break;
 578:	32 c0       	rjmp	.+100    	; 0x5de <_ZN3MCU7Setting8beginPWMEii+0x114>
		
		case OC3A:
			TCCR3A |= insertBit(0, HIGH) | insertBit(7, HIGH);
 57a:	61 e0       	ldi	r22, 0x01	; 1
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	cc de       	rcall	.-616    	; 0x31a <_ZN3MCU9insertBitEib>
 582:	8c 01       	movw	r16, r24
 584:	61 e0       	ldi	r22, 0x01	; 1
 586:	87 e0       	ldi	r24, 0x07	; 7
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	c7 de       	rcall	.-626    	; 0x31a <_ZN3MCU9insertBitEib>
 58c:	eb e8       	ldi	r30, 0x8B	; 139
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	20 81       	ld	r18, Z
 592:	80 2b       	or	r24, r16
 594:	91 2b       	or	r25, r17
 596:	82 2b       	or	r24, r18
 598:	80 83       	st	Z, r24
			break;
		
		case OC3B:
			TCCR3A |= insertBit(0, HIGH) | insertBit(5, HIGH);
 59a:	21 c0       	rjmp	.+66     	; 0x5de <_ZN3MCU7Setting8beginPWMEii+0x114>
 59c:	61 e0       	ldi	r22, 0x01	; 1
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	bb de       	rcall	.-650    	; 0x31a <_ZN3MCU9insertBitEib>
 5a4:	8c 01       	movw	r16, r24
 5a6:	61 e0       	ldi	r22, 0x01	; 1
 5a8:	85 e0       	ldi	r24, 0x05	; 5
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	b6 de       	rcall	.-660    	; 0x31a <_ZN3MCU9insertBitEib>
 5ae:	eb e8       	ldi	r30, 0x8B	; 139
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	20 81       	ld	r18, Z
 5b4:	80 2b       	or	r24, r16
 5b6:	91 2b       	or	r25, r17
 5b8:	82 2b       	or	r24, r18
			break;
 5ba:	80 83       	st	Z, r24
		
		case OC3C:
			TCCR3A |= insertBit(0, HIGH) | insertBit(3, HIGH);
 5bc:	10 c0       	rjmp	.+32     	; 0x5de <_ZN3MCU7Setting8beginPWMEii+0x114>
 5be:	61 e0       	ldi	r22, 0x01	; 1
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	aa de       	rcall	.-684    	; 0x31a <_ZN3MCU9insertBitEib>
 5c6:	8c 01       	movw	r16, r24
 5c8:	61 e0       	ldi	r22, 0x01	; 1
 5ca:	83 e0       	ldi	r24, 0x03	; 3
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	a5 de       	rcall	.-694    	; 0x31a <_ZN3MCU9insertBitEib>
 5d0:	eb e8       	ldi	r30, 0x8B	; 139
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	20 81       	ld	r18, Z
 5d6:	80 2b       	or	r24, r16
 5d8:	91 2b       	or	r25, r17
 5da:	82 2b       	or	r24, r18
 5dc:	80 83       	st	Z, r24
 5de:	8e b5       	in	r24, 0x2e	; 46
		
		default:
			break;
	}
	
	if (TCCR1B == 0x00)
 5e0:	81 11       	cpse	r24, r1
 5e2:	0f c0       	rjmp	.+30     	; 0x602 <_ZN3MCU7Setting8beginPWMEii+0x138>
 5e4:	c8 30       	cpi	r28, 0x08	; 8
	{
		if (PWMMode == CORRECT)
 5e6:	d1 05       	cpc	r29, r1
 5e8:	29 f4       	brne	.+10     	; 0x5f4 <_ZN3MCU7Setting8beginPWMEii+0x12a>
 5ea:	84 e0       	ldi	r24, 0x04	; 4
		{
			TCCR1B = correctValue;
 5ec:	8e bd       	out	0x2e, r24	; 46
 5ee:	1d bc       	out	0x2d, r1	; 45
			TCNT1H = 0x00;
 5f0:	1c bc       	out	0x2c, r1	; 44
			TCNT1L = 0x00;
 5f2:	1f c0       	rjmp	.+62     	; 0x632 <_ZN3MCU7Setting8beginPWMEii+0x168>
 5f4:	29 97       	sbiw	r28, 0x09	; 9
		}
		
		else if (PWMMode == FAST)
 5f6:	e9 f4       	brne	.+58     	; 0x632 <_ZN3MCU7Setting8beginPWMEii+0x168>
 5f8:	8c e0       	ldi	r24, 0x0C	; 12
		{
			TCCR1B = fastValue;
 5fa:	8e bd       	out	0x2e, r24	; 46
 5fc:	1d bc       	out	0x2d, r1	; 45
			TCNT1H = 0x00;
 5fe:	1c bc       	out	0x2c, r1	; 44
			TCNT1L = 0x00;
 600:	18 c0       	rjmp	.+48     	; 0x632 <_ZN3MCU7Setting8beginPWMEii+0x168>
 602:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		}
	}
	
	else if (TCCR3B == 0x00)
 606:	81 11       	cpse	r24, r1
 608:	14 c0       	rjmp	.+40     	; 0x632 <_ZN3MCU7Setting8beginPWMEii+0x168>
 60a:	c8 30       	cpi	r28, 0x08	; 8
	{
		if (PWMMode == CORRECT)
 60c:	d1 05       	cpc	r29, r1
 60e:	41 f4       	brne	.+16     	; 0x620 <_ZN3MCU7Setting8beginPWMEii+0x156>
 610:	84 e0       	ldi	r24, 0x04	; 4
		{
			TCCR3B = correctValue;
 612:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 616:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
			TCNT3H = 0x00;
 61a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			TCNT3L = 0x00;
 61e:	09 c0       	rjmp	.+18     	; 0x632 <_ZN3MCU7Setting8beginPWMEii+0x168>
 620:	29 97       	sbiw	r28, 0x09	; 9
		}
		
		else if (PWMMode == FAST)
 622:	39 f4       	brne	.+14     	; 0x632 <_ZN3MCU7Setting8beginPWMEii+0x168>
 624:	8c e0       	ldi	r24, 0x0C	; 12
		{
			TCCR3B = fastValue;
 626:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 62a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
			TCNT3H = 0x00;
 62e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			TCNT3L = 0x00;
 632:	df 91       	pop	r29
		}
	}
	
 634:	cf 91       	pop	r28
 636:	1f 91       	pop	r17
 638:	0f 91       	pop	r16
 63a:	08 95       	ret

0000063c <_ZN5Motor9attachPinEi>:
//----------------------------------------*/

void Motor::attachPin(int pinValue)
{
	
	switch (m_MotorPin)
 63c:	dc 01       	movw	r26, r24
 63e:	ed 91       	ld	r30, X+
 640:	fc 91       	ld	r31, X
 642:	e8 30       	cpi	r30, 0x08	; 8
 644:	f1 05       	cpc	r31, r1
 646:	60 f5       	brcc	.+88     	; 0x6a0 <_ZN5Motor9attachPinEi+0x64>
 648:	eb 5a       	subi	r30, 0xAB	; 171
 64a:	ff 4f       	sbci	r31, 0xFF	; 255
 64c:	05 c2       	rjmp	.+1034   	; 0xa58 <__tablejump2__>
	{
		// OC0
		case OC0:
			OCR0 = pinValue;
 64e:	61 bf       	out	0x31, r22	; 49
			break;
 650:	08 95       	ret
		
		// OC1A
		case OC1A:
			OCR1A = pinValue;
 652:	86 2f       	mov	r24, r22
 654:	97 2f       	mov	r25, r23
 656:	9b bd       	out	0x2b, r25	; 43
 658:	8a bd       	out	0x2a, r24	; 42
			break;
 65a:	08 95       	ret
		
		// OC1B
		case OC1B:
			OCR1B = pinValue;
 65c:	86 2f       	mov	r24, r22
 65e:	97 2f       	mov	r25, r23
 660:	99 bd       	out	0x29, r25	; 41
 662:	88 bd       	out	0x28, r24	; 40
			break;
 664:	08 95       	ret
		
		// OC1C
		case OC1C:
			OCR1C = pinValue;
 666:	86 2f       	mov	r24, r22
 668:	97 2f       	mov	r25, r23
 66a:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 66e:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
			break;
 672:	08 95       	ret
		
		// OC2
		case OC2:
			OCR2 = pinValue;
 674:	63 bd       	out	0x23, r22	; 35
			break;
 676:	08 95       	ret
		
		// OC3A
		case OC3A:
			OCR3A = pinValue;
 678:	86 2f       	mov	r24, r22
 67a:	97 2f       	mov	r25, r23
 67c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 680:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
			break;
 684:	08 95       	ret
		
		// OC3B
		case OC3B:
			OCR3B = pinValue;
 686:	86 2f       	mov	r24, r22
 688:	97 2f       	mov	r25, r23
 68a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 68e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
			break;
 692:	08 95       	ret
		
		// OC3C
		case OC3C:
			OCR3C = pinValue;
 694:	86 2f       	mov	r24, r22
 696:	97 2f       	mov	r25, r23
 698:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
 69c:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
 6a0:	08 95       	ret

000006a2 <_ZN5Motor8setSpeedEi>:
/*----------------------------------------//
			  Set Motor Speed
//----------------------------------------*/

void Motor::setSpeed (int speedValue)
{
 6a2:	ef 92       	push	r14
 6a4:	ff 92       	push	r15
 6a6:	0f 93       	push	r16
 6a8:	1f 93       	push	r17
 6aa:	cf 93       	push	r28
 6ac:	df 93       	push	r29
 6ae:	7c 01       	movw	r14, r24
 6b0:	8b 01       	movw	r16, r22
	
	for (int i=0; i<=100; i++)
 6b2:	c0 e0       	ldi	r28, 0x00	; 0
 6b4:	d0 e0       	ldi	r29, 0x00	; 0
 6b6:	c5 36       	cpi	r28, 0x65	; 101
 6b8:	d1 05       	cpc	r29, r1
 6ba:	a4 f4       	brge	.+40     	; 0x6e4 <_ZN5Motor8setSpeedEi+0x42>
	{
		if (speedValue == i)
 6bc:	c0 17       	cp	r28, r16
 6be:	d1 07       	cpc	r29, r17
 6c0:	79 f4       	brne	.+30     	; 0x6e0 <_ZN5Motor8setSpeedEi+0x3e>
		{
			m_Speed = i * 2.55;
 6c2:	be 01       	movw	r22, r28
 6c4:	0d 2e       	mov	r0, r29
 6c6:	00 0c       	add	r0, r0
 6c8:	88 0b       	sbc	r24, r24
 6ca:	99 0b       	sbc	r25, r25
 6cc:	d6 d0       	rcall	.+428    	; 0x87a <__floatsisf>
 6ce:	23 e3       	ldi	r18, 0x33	; 51
 6d0:	33 e3       	ldi	r19, 0x33	; 51
 6d2:	43 e2       	ldi	r20, 0x23	; 35
 6d4:	50 e4       	ldi	r21, 0x40	; 64
 6d6:	35 d1       	rcall	.+618    	; 0x942 <__mulsf3>
 6d8:	a2 d0       	rcall	.+324    	; 0x81e <__fixunssfsi>
 6da:	f7 01       	movw	r30, r14
 6dc:	73 83       	std	Z+3, r23	; 0x03
 6de:	62 83       	std	Z+2, r22	; 0x02
//----------------------------------------*/

void Motor::setSpeed (int speedValue)
{
	
	for (int i=0; i<=100; i++)
 6e0:	21 96       	adiw	r28, 0x01	; 1
 6e2:	e9 cf       	rjmp	.-46     	; 0x6b6 <_ZN5Motor8setSpeedEi+0x14>
		{
			m_Speed = i * 2.55;
		}
	}
	
}
 6e4:	df 91       	pop	r29
 6e6:	cf 91       	pop	r28
 6e8:	1f 91       	pop	r17
 6ea:	0f 91       	pop	r16
 6ec:	ff 90       	pop	r15
 6ee:	ef 90       	pop	r14
 6f0:	08 95       	ret

000006f2 <_ZN5Motor5startEv>:
/*----------------------------------------//
			 	Start Motor
//----------------------------------------*/

void Motor::start (void)
{
 6f2:	cf 93       	push	r28
 6f4:	df 93       	push	r29
 6f6:	ec 01       	movw	r28, r24
	attachPin(m_Speed);
 6f8:	6a 81       	ldd	r22, Y+2	; 0x02
 6fa:	7b 81       	ldd	r23, Y+3	; 0x03
 6fc:	9f df       	rcall	.-194    	; 0x63c <_ZN5Motor9attachPinEi>
	m_isOn = true;
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	8c 83       	std	Y+4, r24	; 0x04
}
 702:	df 91       	pop	r29
 704:	cf 91       	pop	r28
 706:	08 95       	ret

00000708 <_ZN2SW6setMaxEi>:
			 Set Sensor Value
//----------------------------------------*/

void SW::setMax(int maxValue)
{
	maxData = maxValue;
 708:	fc 01       	movw	r30, r24
 70a:	73 87       	std	Z+11, r23	; 0x0b
 70c:	62 87       	std	Z+10, r22	; 0x0a
 70e:	08 95       	ret

00000710 <_ZN2SW4initEv>:
/*----------------------------------------//
			 Initialize Switch
//----------------------------------------*/

void SW::init (void)
{
 710:	dc 01       	movw	r26, r24
	
	switch (m_SwitchPort)
 712:	ed 91       	ld	r30, X+
 714:	fc 91       	ld	r31, X
 716:	11 97       	sbiw	r26, 0x01	; 1
 718:	e7 30       	cpi	r30, 0x07	; 7
 71a:	f1 05       	cpc	r31, r1
 71c:	a0 f5       	brcc	.+104    	; 0x786 <_ZN2SW4initEv+0x76>
 71e:	e3 5a       	subi	r30, 0xA3	; 163
 720:	ff 4f       	sbci	r31, 0xFF	; 255
 722:	9a c1       	rjmp	.+820    	; 0xa58 <__tablejump2__>
	{
		// PORTA
		case A:
			newData = PINA;
 724:	89 b3       	in	r24, 0x19	; 25
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	15 96       	adiw	r26, 0x05	; 5
 72a:	9c 93       	st	X, r25
 72c:	8e 93       	st	-X, r24
 72e:	14 97       	sbiw	r26, 0x04	; 4
			break;
 730:	2a c0       	rjmp	.+84     	; 0x786 <_ZN2SW4initEv+0x76>
		
		// PORTB
		case B:
			newData = PINB;
 732:	86 b3       	in	r24, 0x16	; 22
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	15 96       	adiw	r26, 0x05	; 5
 738:	9c 93       	st	X, r25
 73a:	8e 93       	st	-X, r24
 73c:	14 97       	sbiw	r26, 0x04	; 4
			break;
 73e:	23 c0       	rjmp	.+70     	; 0x786 <_ZN2SW4initEv+0x76>
		
		// PORTC
		case C:
			newData = PINC;
 740:	83 b3       	in	r24, 0x13	; 19
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	15 96       	adiw	r26, 0x05	; 5
 746:	9c 93       	st	X, r25
 748:	8e 93       	st	-X, r24
 74a:	14 97       	sbiw	r26, 0x04	; 4
			break;
 74c:	1c c0       	rjmp	.+56     	; 0x786 <_ZN2SW4initEv+0x76>
		
		// PORTD
		case D:
			newData = PIND;
 74e:	80 b3       	in	r24, 0x10	; 16
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	15 96       	adiw	r26, 0x05	; 5
 754:	9c 93       	st	X, r25
 756:	8e 93       	st	-X, r24
 758:	14 97       	sbiw	r26, 0x04	; 4
			break;
 75a:	15 c0       	rjmp	.+42     	; 0x786 <_ZN2SW4initEv+0x76>
		
		// PORTE
		case E:
			newData = PINE;
 75c:	81 b1       	in	r24, 0x01	; 1
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	15 96       	adiw	r26, 0x05	; 5
 762:	9c 93       	st	X, r25
 764:	8e 93       	st	-X, r24
 766:	14 97       	sbiw	r26, 0x04	; 4
			break;
 768:	0e c0       	rjmp	.+28     	; 0x786 <_ZN2SW4initEv+0x76>
		
		// PORTF
		case F:
			newData = PINF;
 76a:	80 b1       	in	r24, 0x00	; 0
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	15 96       	adiw	r26, 0x05	; 5
 770:	9c 93       	st	X, r25
 772:	8e 93       	st	-X, r24
 774:	14 97       	sbiw	r26, 0x04	; 4
			break;
 776:	07 c0       	rjmp	.+14     	; 0x786 <_ZN2SW4initEv+0x76>
		
		// PORTG
		case G:
			newData = PING;
 778:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	15 96       	adiw	r26, 0x05	; 5
 780:	9c 93       	st	X, r25
 782:	8e 93       	st	-X, r24
 784:	14 97       	sbiw	r26, 0x04	; 4
		
		default:
			break;
	}
	
	switch (m_SwitchMode)
 786:	12 96       	adiw	r26, 0x02	; 2
 788:	8d 91       	ld	r24, X+
 78a:	9c 91       	ld	r25, X
 78c:	13 97       	sbiw	r26, 0x03	; 3
 78e:	81 30       	cpi	r24, 0x01	; 1
 790:	91 05       	cpc	r25, r1
 792:	e9 f0       	breq	.+58     	; 0x7ce <_ZN2SW4initEv+0xbe>
 794:	18 f0       	brcs	.+6      	; 0x79c <_ZN2SW4initEv+0x8c>
 796:	02 97       	sbiw	r24, 0x02	; 2
 798:	99 f1       	breq	.+102    	; 0x800 <_ZN2SW4initEv+0xf0>
 79a:	08 95       	ret
	{
		// REVERSAL
		case REVERSAL:
			result = oldData & ~newData;
 79c:	16 96       	adiw	r26, 0x06	; 6
 79e:	2d 91       	ld	r18, X+
 7a0:	3c 91       	ld	r19, X
 7a2:	17 97       	sbiw	r26, 0x07	; 7
 7a4:	14 96       	adiw	r26, 0x04	; 4
 7a6:	8d 91       	ld	r24, X+
 7a8:	9c 91       	ld	r25, X
 7aa:	15 97       	sbiw	r26, 0x05	; 5
 7ac:	80 95       	com	r24
 7ae:	90 95       	com	r25
 7b0:	82 23       	and	r24, r18
 7b2:	93 23       	and	r25, r19
 7b4:	19 96       	adiw	r26, 0x09	; 9
 7b6:	9c 93       	st	X, r25
 7b8:	8e 93       	st	-X, r24
 7ba:	18 97       	sbiw	r26, 0x08	; 8
			oldData = newData;
 7bc:	14 96       	adiw	r26, 0x04	; 4
 7be:	8d 91       	ld	r24, X+
 7c0:	9c 91       	ld	r25, X
 7c2:	15 97       	sbiw	r26, 0x05	; 5
 7c4:	17 96       	adiw	r26, 0x07	; 7
 7c6:	9c 93       	st	X, r25
 7c8:	8e 93       	st	-X, r24
 7ca:	16 97       	sbiw	r26, 0x06	; 6
			break;
 7cc:	08 95       	ret
		
		// NONREVERSAL
		case NONREVERSAL:
			result = oldData & newData;
 7ce:	16 96       	adiw	r26, 0x06	; 6
 7d0:	2d 91       	ld	r18, X+
 7d2:	3c 91       	ld	r19, X
 7d4:	17 97       	sbiw	r26, 0x07	; 7
 7d6:	14 96       	adiw	r26, 0x04	; 4
 7d8:	8d 91       	ld	r24, X+
 7da:	9c 91       	ld	r25, X
 7dc:	15 97       	sbiw	r26, 0x05	; 5
 7de:	82 23       	and	r24, r18
 7e0:	93 23       	and	r25, r19
 7e2:	19 96       	adiw	r26, 0x09	; 9
 7e4:	9c 93       	st	X, r25
 7e6:	8e 93       	st	-X, r24
 7e8:	18 97       	sbiw	r26, 0x08	; 8
			oldData = ~newData;
 7ea:	14 96       	adiw	r26, 0x04	; 4
 7ec:	8d 91       	ld	r24, X+
 7ee:	9c 91       	ld	r25, X
 7f0:	15 97       	sbiw	r26, 0x05	; 5
 7f2:	80 95       	com	r24
 7f4:	90 95       	com	r25
 7f6:	17 96       	adiw	r26, 0x07	; 7
 7f8:	9c 93       	st	X, r25
 7fa:	8e 93       	st	-X, r24
 7fc:	16 97       	sbiw	r26, 0x06	; 6
			break;
 7fe:	08 95       	ret
		
		// SENSOR
		case SENSOR:
			result = newData & maxData;
 800:	14 96       	adiw	r26, 0x04	; 4
 802:	2d 91       	ld	r18, X+
 804:	3c 91       	ld	r19, X
 806:	15 97       	sbiw	r26, 0x05	; 5
 808:	1a 96       	adiw	r26, 0x0a	; 10
 80a:	8d 91       	ld	r24, X+
 80c:	9c 91       	ld	r25, X
 80e:	1b 97       	sbiw	r26, 0x0b	; 11
 810:	82 23       	and	r24, r18
 812:	93 23       	and	r25, r19
 814:	19 96       	adiw	r26, 0x09	; 9
 816:	9c 93       	st	X, r25
 818:	8e 93       	st	-X, r24
 81a:	18 97       	sbiw	r26, 0x08	; 8
 81c:	08 95       	ret

0000081e <__fixunssfsi>:
 81e:	70 d0       	rcall	.+224    	; 0x900 <__fp_splitA>
 820:	88 f0       	brcs	.+34     	; 0x844 <__fixunssfsi+0x26>
 822:	9f 57       	subi	r25, 0x7F	; 127
 824:	90 f0       	brcs	.+36     	; 0x84a <__fixunssfsi+0x2c>
 826:	b9 2f       	mov	r27, r25
 828:	99 27       	eor	r25, r25
 82a:	b7 51       	subi	r27, 0x17	; 23
 82c:	a0 f0       	brcs	.+40     	; 0x856 <__fixunssfsi+0x38>
 82e:	d1 f0       	breq	.+52     	; 0x864 <__fixunssfsi+0x46>
 830:	66 0f       	add	r22, r22
 832:	77 1f       	adc	r23, r23
 834:	88 1f       	adc	r24, r24
 836:	99 1f       	adc	r25, r25
 838:	1a f0       	brmi	.+6      	; 0x840 <__fixunssfsi+0x22>
 83a:	ba 95       	dec	r27
 83c:	c9 f7       	brne	.-14     	; 0x830 <__fixunssfsi+0x12>
 83e:	12 c0       	rjmp	.+36     	; 0x864 <__fixunssfsi+0x46>
 840:	b1 30       	cpi	r27, 0x01	; 1
 842:	81 f0       	breq	.+32     	; 0x864 <__fixunssfsi+0x46>
 844:	77 d0       	rcall	.+238    	; 0x934 <__fp_zero>
 846:	b1 e0       	ldi	r27, 0x01	; 1
 848:	08 95       	ret
 84a:	74 c0       	rjmp	.+232    	; 0x934 <__fp_zero>
 84c:	67 2f       	mov	r22, r23
 84e:	78 2f       	mov	r23, r24
 850:	88 27       	eor	r24, r24
 852:	b8 5f       	subi	r27, 0xF8	; 248
 854:	39 f0       	breq	.+14     	; 0x864 <__fixunssfsi+0x46>
 856:	b9 3f       	cpi	r27, 0xF9	; 249
 858:	cc f3       	brlt	.-14     	; 0x84c <__fixunssfsi+0x2e>
 85a:	86 95       	lsr	r24
 85c:	77 95       	ror	r23
 85e:	67 95       	ror	r22
 860:	b3 95       	inc	r27
 862:	d9 f7       	brne	.-10     	; 0x85a <__fixunssfsi+0x3c>
 864:	3e f4       	brtc	.+14     	; 0x874 <__fixunssfsi+0x56>
 866:	90 95       	com	r25
 868:	80 95       	com	r24
 86a:	70 95       	com	r23
 86c:	61 95       	neg	r22
 86e:	7f 4f       	sbci	r23, 0xFF	; 255
 870:	8f 4f       	sbci	r24, 0xFF	; 255
 872:	9f 4f       	sbci	r25, 0xFF	; 255
 874:	08 95       	ret

00000876 <__floatunsisf>:
 876:	e8 94       	clt
 878:	09 c0       	rjmp	.+18     	; 0x88c <__floatsisf+0x12>

0000087a <__floatsisf>:
 87a:	97 fb       	bst	r25, 7
 87c:	3e f4       	brtc	.+14     	; 0x88c <__floatsisf+0x12>
 87e:	90 95       	com	r25
 880:	80 95       	com	r24
 882:	70 95       	com	r23
 884:	61 95       	neg	r22
 886:	7f 4f       	sbci	r23, 0xFF	; 255
 888:	8f 4f       	sbci	r24, 0xFF	; 255
 88a:	9f 4f       	sbci	r25, 0xFF	; 255
 88c:	99 23       	and	r25, r25
 88e:	a9 f0       	breq	.+42     	; 0x8ba <__floatsisf+0x40>
 890:	f9 2f       	mov	r31, r25
 892:	96 e9       	ldi	r25, 0x96	; 150
 894:	bb 27       	eor	r27, r27
 896:	93 95       	inc	r25
 898:	f6 95       	lsr	r31
 89a:	87 95       	ror	r24
 89c:	77 95       	ror	r23
 89e:	67 95       	ror	r22
 8a0:	b7 95       	ror	r27
 8a2:	f1 11       	cpse	r31, r1
 8a4:	f8 cf       	rjmp	.-16     	; 0x896 <__floatsisf+0x1c>
 8a6:	fa f4       	brpl	.+62     	; 0x8e6 <__floatsisf+0x6c>
 8a8:	bb 0f       	add	r27, r27
 8aa:	11 f4       	brne	.+4      	; 0x8b0 <__floatsisf+0x36>
 8ac:	60 ff       	sbrs	r22, 0
 8ae:	1b c0       	rjmp	.+54     	; 0x8e6 <__floatsisf+0x6c>
 8b0:	6f 5f       	subi	r22, 0xFF	; 255
 8b2:	7f 4f       	sbci	r23, 0xFF	; 255
 8b4:	8f 4f       	sbci	r24, 0xFF	; 255
 8b6:	9f 4f       	sbci	r25, 0xFF	; 255
 8b8:	16 c0       	rjmp	.+44     	; 0x8e6 <__floatsisf+0x6c>
 8ba:	88 23       	and	r24, r24
 8bc:	11 f0       	breq	.+4      	; 0x8c2 <__floatsisf+0x48>
 8be:	96 e9       	ldi	r25, 0x96	; 150
 8c0:	11 c0       	rjmp	.+34     	; 0x8e4 <__floatsisf+0x6a>
 8c2:	77 23       	and	r23, r23
 8c4:	21 f0       	breq	.+8      	; 0x8ce <__floatsisf+0x54>
 8c6:	9e e8       	ldi	r25, 0x8E	; 142
 8c8:	87 2f       	mov	r24, r23
 8ca:	76 2f       	mov	r23, r22
 8cc:	05 c0       	rjmp	.+10     	; 0x8d8 <__floatsisf+0x5e>
 8ce:	66 23       	and	r22, r22
 8d0:	71 f0       	breq	.+28     	; 0x8ee <__floatsisf+0x74>
 8d2:	96 e8       	ldi	r25, 0x86	; 134
 8d4:	86 2f       	mov	r24, r22
 8d6:	70 e0       	ldi	r23, 0x00	; 0
 8d8:	60 e0       	ldi	r22, 0x00	; 0
 8da:	2a f0       	brmi	.+10     	; 0x8e6 <__floatsisf+0x6c>
 8dc:	9a 95       	dec	r25
 8de:	66 0f       	add	r22, r22
 8e0:	77 1f       	adc	r23, r23
 8e2:	88 1f       	adc	r24, r24
 8e4:	da f7       	brpl	.-10     	; 0x8dc <__floatsisf+0x62>
 8e6:	88 0f       	add	r24, r24
 8e8:	96 95       	lsr	r25
 8ea:	87 95       	ror	r24
 8ec:	97 f9       	bld	r25, 7
 8ee:	08 95       	ret

000008f0 <__fp_split3>:
 8f0:	57 fd       	sbrc	r21, 7
 8f2:	90 58       	subi	r25, 0x80	; 128
 8f4:	44 0f       	add	r20, r20
 8f6:	55 1f       	adc	r21, r21
 8f8:	59 f0       	breq	.+22     	; 0x910 <__fp_splitA+0x10>
 8fa:	5f 3f       	cpi	r21, 0xFF	; 255
 8fc:	71 f0       	breq	.+28     	; 0x91a <__fp_splitA+0x1a>
 8fe:	47 95       	ror	r20

00000900 <__fp_splitA>:
 900:	88 0f       	add	r24, r24
 902:	97 fb       	bst	r25, 7
 904:	99 1f       	adc	r25, r25
 906:	61 f0       	breq	.+24     	; 0x920 <__fp_splitA+0x20>
 908:	9f 3f       	cpi	r25, 0xFF	; 255
 90a:	79 f0       	breq	.+30     	; 0x92a <__fp_splitA+0x2a>
 90c:	87 95       	ror	r24
 90e:	08 95       	ret
 910:	12 16       	cp	r1, r18
 912:	13 06       	cpc	r1, r19
 914:	14 06       	cpc	r1, r20
 916:	55 1f       	adc	r21, r21
 918:	f2 cf       	rjmp	.-28     	; 0x8fe <__fp_split3+0xe>
 91a:	46 95       	lsr	r20
 91c:	f1 df       	rcall	.-30     	; 0x900 <__fp_splitA>
 91e:	08 c0       	rjmp	.+16     	; 0x930 <__fp_splitA+0x30>
 920:	16 16       	cp	r1, r22
 922:	17 06       	cpc	r1, r23
 924:	18 06       	cpc	r1, r24
 926:	99 1f       	adc	r25, r25
 928:	f1 cf       	rjmp	.-30     	; 0x90c <__fp_splitA+0xc>
 92a:	86 95       	lsr	r24
 92c:	71 05       	cpc	r23, r1
 92e:	61 05       	cpc	r22, r1
 930:	08 94       	sec
 932:	08 95       	ret

00000934 <__fp_zero>:
 934:	e8 94       	clt

00000936 <__fp_szero>:
 936:	bb 27       	eor	r27, r27
 938:	66 27       	eor	r22, r22
 93a:	77 27       	eor	r23, r23
 93c:	cb 01       	movw	r24, r22
 93e:	97 f9       	bld	r25, 7
 940:	08 95       	ret

00000942 <__mulsf3>:
 942:	0b d0       	rcall	.+22     	; 0x95a <__mulsf3x>
 944:	78 c0       	rjmp	.+240    	; 0xa36 <__fp_round>
 946:	69 d0       	rcall	.+210    	; 0xa1a <__fp_pscA>
 948:	28 f0       	brcs	.+10     	; 0x954 <__mulsf3+0x12>
 94a:	6e d0       	rcall	.+220    	; 0xa28 <__fp_pscB>
 94c:	18 f0       	brcs	.+6      	; 0x954 <__mulsf3+0x12>
 94e:	95 23       	and	r25, r21
 950:	09 f0       	breq	.+2      	; 0x954 <__mulsf3+0x12>
 952:	5a c0       	rjmp	.+180    	; 0xa08 <__fp_inf>
 954:	5f c0       	rjmp	.+190    	; 0xa14 <__fp_nan>
 956:	11 24       	eor	r1, r1
 958:	ee cf       	rjmp	.-36     	; 0x936 <__fp_szero>

0000095a <__mulsf3x>:
 95a:	ca df       	rcall	.-108    	; 0x8f0 <__fp_split3>
 95c:	a0 f3       	brcs	.-24     	; 0x946 <__mulsf3+0x4>

0000095e <__mulsf3_pse>:
 95e:	95 9f       	mul	r25, r21
 960:	d1 f3       	breq	.-12     	; 0x956 <__mulsf3+0x14>
 962:	95 0f       	add	r25, r21
 964:	50 e0       	ldi	r21, 0x00	; 0
 966:	55 1f       	adc	r21, r21
 968:	62 9f       	mul	r22, r18
 96a:	f0 01       	movw	r30, r0
 96c:	72 9f       	mul	r23, r18
 96e:	bb 27       	eor	r27, r27
 970:	f0 0d       	add	r31, r0
 972:	b1 1d       	adc	r27, r1
 974:	63 9f       	mul	r22, r19
 976:	aa 27       	eor	r26, r26
 978:	f0 0d       	add	r31, r0
 97a:	b1 1d       	adc	r27, r1
 97c:	aa 1f       	adc	r26, r26
 97e:	64 9f       	mul	r22, r20
 980:	66 27       	eor	r22, r22
 982:	b0 0d       	add	r27, r0
 984:	a1 1d       	adc	r26, r1
 986:	66 1f       	adc	r22, r22
 988:	82 9f       	mul	r24, r18
 98a:	22 27       	eor	r18, r18
 98c:	b0 0d       	add	r27, r0
 98e:	a1 1d       	adc	r26, r1
 990:	62 1f       	adc	r22, r18
 992:	73 9f       	mul	r23, r19
 994:	b0 0d       	add	r27, r0
 996:	a1 1d       	adc	r26, r1
 998:	62 1f       	adc	r22, r18
 99a:	83 9f       	mul	r24, r19
 99c:	a0 0d       	add	r26, r0
 99e:	61 1d       	adc	r22, r1
 9a0:	22 1f       	adc	r18, r18
 9a2:	74 9f       	mul	r23, r20
 9a4:	33 27       	eor	r19, r19
 9a6:	a0 0d       	add	r26, r0
 9a8:	61 1d       	adc	r22, r1
 9aa:	23 1f       	adc	r18, r19
 9ac:	84 9f       	mul	r24, r20
 9ae:	60 0d       	add	r22, r0
 9b0:	21 1d       	adc	r18, r1
 9b2:	82 2f       	mov	r24, r18
 9b4:	76 2f       	mov	r23, r22
 9b6:	6a 2f       	mov	r22, r26
 9b8:	11 24       	eor	r1, r1
 9ba:	9f 57       	subi	r25, 0x7F	; 127
 9bc:	50 40       	sbci	r21, 0x00	; 0
 9be:	8a f0       	brmi	.+34     	; 0x9e2 <__mulsf3_pse+0x84>
 9c0:	e1 f0       	breq	.+56     	; 0x9fa <__mulsf3_pse+0x9c>
 9c2:	88 23       	and	r24, r24
 9c4:	4a f0       	brmi	.+18     	; 0x9d8 <__mulsf3_pse+0x7a>
 9c6:	ee 0f       	add	r30, r30
 9c8:	ff 1f       	adc	r31, r31
 9ca:	bb 1f       	adc	r27, r27
 9cc:	66 1f       	adc	r22, r22
 9ce:	77 1f       	adc	r23, r23
 9d0:	88 1f       	adc	r24, r24
 9d2:	91 50       	subi	r25, 0x01	; 1
 9d4:	50 40       	sbci	r21, 0x00	; 0
 9d6:	a9 f7       	brne	.-22     	; 0x9c2 <__mulsf3_pse+0x64>
 9d8:	9e 3f       	cpi	r25, 0xFE	; 254
 9da:	51 05       	cpc	r21, r1
 9dc:	70 f0       	brcs	.+28     	; 0x9fa <__mulsf3_pse+0x9c>
 9de:	14 c0       	rjmp	.+40     	; 0xa08 <__fp_inf>
 9e0:	aa cf       	rjmp	.-172    	; 0x936 <__fp_szero>
 9e2:	5f 3f       	cpi	r21, 0xFF	; 255
 9e4:	ec f3       	brlt	.-6      	; 0x9e0 <__mulsf3_pse+0x82>
 9e6:	98 3e       	cpi	r25, 0xE8	; 232
 9e8:	dc f3       	brlt	.-10     	; 0x9e0 <__mulsf3_pse+0x82>
 9ea:	86 95       	lsr	r24
 9ec:	77 95       	ror	r23
 9ee:	67 95       	ror	r22
 9f0:	b7 95       	ror	r27
 9f2:	f7 95       	ror	r31
 9f4:	e7 95       	ror	r30
 9f6:	9f 5f       	subi	r25, 0xFF	; 255
 9f8:	c1 f7       	brne	.-16     	; 0x9ea <__mulsf3_pse+0x8c>
 9fa:	fe 2b       	or	r31, r30
 9fc:	88 0f       	add	r24, r24
 9fe:	91 1d       	adc	r25, r1
 a00:	96 95       	lsr	r25
 a02:	87 95       	ror	r24
 a04:	97 f9       	bld	r25, 7
 a06:	08 95       	ret

00000a08 <__fp_inf>:
 a08:	97 f9       	bld	r25, 7
 a0a:	9f 67       	ori	r25, 0x7F	; 127
 a0c:	80 e8       	ldi	r24, 0x80	; 128
 a0e:	70 e0       	ldi	r23, 0x00	; 0
 a10:	60 e0       	ldi	r22, 0x00	; 0
 a12:	08 95       	ret

00000a14 <__fp_nan>:
 a14:	9f ef       	ldi	r25, 0xFF	; 255
 a16:	80 ec       	ldi	r24, 0xC0	; 192
 a18:	08 95       	ret

00000a1a <__fp_pscA>:
 a1a:	00 24       	eor	r0, r0
 a1c:	0a 94       	dec	r0
 a1e:	16 16       	cp	r1, r22
 a20:	17 06       	cpc	r1, r23
 a22:	18 06       	cpc	r1, r24
 a24:	09 06       	cpc	r0, r25
 a26:	08 95       	ret

00000a28 <__fp_pscB>:
 a28:	00 24       	eor	r0, r0
 a2a:	0a 94       	dec	r0
 a2c:	12 16       	cp	r1, r18
 a2e:	13 06       	cpc	r1, r19
 a30:	14 06       	cpc	r1, r20
 a32:	05 06       	cpc	r0, r21
 a34:	08 95       	ret

00000a36 <__fp_round>:
 a36:	09 2e       	mov	r0, r25
 a38:	03 94       	inc	r0
 a3a:	00 0c       	add	r0, r0
 a3c:	11 f4       	brne	.+4      	; 0xa42 <__fp_round+0xc>
 a3e:	88 23       	and	r24, r24
 a40:	52 f0       	brmi	.+20     	; 0xa56 <__fp_round+0x20>
 a42:	bb 0f       	add	r27, r27
 a44:	40 f4       	brcc	.+16     	; 0xa56 <__fp_round+0x20>
 a46:	bf 2b       	or	r27, r31
 a48:	11 f4       	brne	.+4      	; 0xa4e <__fp_round+0x18>
 a4a:	60 ff       	sbrs	r22, 0
 a4c:	04 c0       	rjmp	.+8      	; 0xa56 <__fp_round+0x20>
 a4e:	6f 5f       	subi	r22, 0xFF	; 255
 a50:	7f 4f       	sbci	r23, 0xFF	; 255
 a52:	8f 4f       	sbci	r24, 0xFF	; 255
 a54:	9f 4f       	sbci	r25, 0xFF	; 255
 a56:	08 95       	ret

00000a58 <__tablejump2__>:
 a58:	ee 0f       	add	r30, r30
 a5a:	ff 1f       	adc	r31, r31
 a5c:	00 24       	eor	r0, r0
 a5e:	00 1c       	adc	r0, r0
 a60:	0b be       	out	0x3b, r0	; 59
 a62:	07 90       	elpm	r0, Z+
 a64:	f6 91       	elpm	r31, Z
 a66:	e0 2d       	mov	r30, r0
 a68:	09 94       	ijmp

00000a6a <_exit>:
 a6a:	f8 94       	cli

00000a6c <__stop_program>:
 a6c:	ff cf       	rjmp	.-2      	; 0xa6c <__stop_program>
