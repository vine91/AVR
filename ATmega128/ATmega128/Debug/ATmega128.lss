
ATmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000007b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000073c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800100  00800100  000007b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018dc  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d06  00000000  00000000  000021e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000090d  00000000  00000000  00002eee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  000037fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a7  00000000  00000000  00003a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000095c  00000000  00000000  000041eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004b47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	46 c0       	rjmp	.+140    	; 0x8e <__ctors_end>
   2:	00 00       	nop
   4:	6b c0       	rjmp	.+214    	; 0xdc <__bad_interrupt>
   6:	00 00       	nop
   8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
   a:	00 00       	nop
   c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
   e:	00 00       	nop
  10:	65 c0       	rjmp	.+202    	; 0xdc <__bad_interrupt>
  12:	00 00       	nop
  14:	63 c0       	rjmp	.+198    	; 0xdc <__bad_interrupt>
  16:	00 00       	nop
  18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>
  1e:	00 00       	nop
  20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
  22:	00 00       	nop
  24:	fb c0       	rjmp	.+502    	; 0x21c <__vector_9>
  26:	00 00       	nop
  28:	59 c0       	rjmp	.+178    	; 0xdc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	57 c0       	rjmp	.+174    	; 0xdc <__bad_interrupt>
  2e:	00 00       	nop
  30:	55 c0       	rjmp	.+170    	; 0xdc <__bad_interrupt>
  32:	00 00       	nop
  34:	53 c0       	rjmp	.+166    	; 0xdc <__bad_interrupt>
  36:	00 00       	nop
  38:	51 c0       	rjmp	.+162    	; 0xdc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4f c0       	rjmp	.+158    	; 0xdc <__bad_interrupt>
  3e:	00 00       	nop
  40:	94 c0       	rjmp	.+296    	; 0x16a <__vector_16>
  42:	00 00       	nop
  44:	4b c0       	rjmp	.+150    	; 0xdc <__bad_interrupt>
  46:	00 00       	nop
  48:	49 c0       	rjmp	.+146    	; 0xdc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	47 c0       	rjmp	.+142    	; 0xdc <__bad_interrupt>
  4e:	00 00       	nop
  50:	45 c0       	rjmp	.+138    	; 0xdc <__bad_interrupt>
  52:	00 00       	nop
  54:	43 c0       	rjmp	.+134    	; 0xdc <__bad_interrupt>
  56:	00 00       	nop
  58:	41 c0       	rjmp	.+130    	; 0xdc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3f c0       	rjmp	.+126    	; 0xdc <__bad_interrupt>
  5e:	00 00       	nop
  60:	3d c0       	rjmp	.+122    	; 0xdc <__bad_interrupt>
  62:	00 00       	nop
  64:	3b c0       	rjmp	.+118    	; 0xdc <__bad_interrupt>
  66:	00 00       	nop
  68:	39 c0       	rjmp	.+114    	; 0xdc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	37 c0       	rjmp	.+110    	; 0xdc <__bad_interrupt>
  6e:	00 00       	nop
  70:	35 c0       	rjmp	.+106    	; 0xdc <__bad_interrupt>
  72:	00 00       	nop
  74:	33 c0       	rjmp	.+102    	; 0xdc <__bad_interrupt>
  76:	00 00       	nop
  78:	31 c0       	rjmp	.+98     	; 0xdc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2f c0       	rjmp	.+94     	; 0xdc <__bad_interrupt>
  7e:	00 00       	nop
  80:	2d c0       	rjmp	.+90     	; 0xdc <__bad_interrupt>
  82:	00 00       	nop
  84:	2b c0       	rjmp	.+86     	; 0xdc <__bad_interrupt>
  86:	00 00       	nop
  88:	29 c0       	rjmp	.+82     	; 0xdc <__bad_interrupt>
	...

0000008c <__ctors_start>:
  8c:	c5 01       	movw	r24, r10

0000008e <__ctors_end>:
  8e:	11 24       	eor	r1, r1
  90:	1f be       	out	0x3f, r1	; 63
  92:	cf ef       	ldi	r28, 0xFF	; 255
  94:	d0 e1       	ldi	r29, 0x10	; 16
  96:	de bf       	out	0x3e, r29	; 62
  98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
  9a:	11 e0       	ldi	r17, 0x01	; 1
  9c:	a0 e0       	ldi	r26, 0x00	; 0
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	ec e3       	ldi	r30, 0x3C	; 60
  a2:	f7 e0       	ldi	r31, 0x07	; 7
  a4:	00 e0       	ldi	r16, 0x00	; 0
  a6:	0b bf       	out	0x3b, r16	; 59
  a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x14>
  aa:	07 90       	elpm	r0, Z+
  ac:	0d 92       	st	X+, r0
  ae:	a0 30       	cpi	r26, 0x00	; 0
  b0:	b1 07       	cpc	r27, r17
  b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0x10>

000000b4 <__do_clear_bss>:
  b4:	21 e0       	ldi	r18, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a0 32       	cpi	r26, 0x20	; 32
  c0:	b2 07       	cpc	r27, r18
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>

000000c4 <__do_global_ctors>:
  c4:	10 e0       	ldi	r17, 0x00	; 0
  c6:	c7 e4       	ldi	r28, 0x47	; 71
  c8:	d0 e0       	ldi	r29, 0x00	; 0
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <__do_global_ctors+0xe>
  cc:	21 97       	sbiw	r28, 0x01	; 1
  ce:	fe 01       	movw	r30, r28
  d0:	2a d3       	rcall	.+1620   	; 0x726 <__tablejump2__>
  d2:	c6 34       	cpi	r28, 0x46	; 70
  d4:	d1 07       	cpc	r29, r17
  d6:	d1 f7       	brne	.-12     	; 0xcc <__do_global_ctors+0x8>
  d8:	22 d0       	rcall	.+68     	; 0x11e <main>
  da:	2e c3       	rjmp	.+1628   	; 0x738 <_exit>

000000dc <__bad_interrupt>:
  dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <_Z41__static_initialization_and_destruction_0ii>:
	else
	{
		oldData = oldData;
	}
	
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	e9 f4       	brne	.+58     	; 0x11c <_Z41__static_initialization_and_destruction_0ii+0x3e>
  e2:	6f 3f       	cpi	r22, 0xFF	; 255
  e4:	7f 4f       	sbci	r23, 0xFF	; 255
  e6:	d1 f4       	brne	.+52     	; 0x11c <_Z41__static_initialization_and_destruction_0ii+0x3e>
private:
	unsigned int m_MotorPort;
	unsigned int m_Speed;

public:
	Motor (int motorPort) { m_MotorPort = motorPort; }
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <left+0x1>
  f0:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <left>
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <right+0x1>
  fc:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <right>
	bool m_isReversal;
	NonOptimal m_NewValue;
	NonOptimal m_OldValue;

public:
	SW (int switchPort, bool isReversal) { m_SwitchPort = switchPort; m_isReversal = isReversal; }
 100:	ed e0       	ldi	r30, 0x0D	; 13
 102:	f1 e0       	ldi	r31, 0x01	; 1
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	91 83       	std	Z+1, r25	; 0x01
 10a:	80 83       	st	Z, r24
 10c:	82 83       	std	Z+2, r24	; 0x02
 10e:	e4 e0       	ldi	r30, 0x04	; 4
 110:	f1 e0       	ldi	r31, 0x01	; 1
 112:	24 e0       	ldi	r18, 0x04	; 4
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	31 83       	std	Z+1, r19	; 0x01
 118:	20 83       	st	Z, r18
 11a:	82 83       	std	Z+2, r24	; 0x02
 11c:	08 95       	ret

0000011e <main>:
-------------   MAIN START   ---------------
//========================================*/

int main(void)
{
	beginPort(C, OUT);
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	6c d1       	rcall	.+728    	; 0x3fe <_ZN3MCU7Setting9beginPortEib>
    beginPort(D, OUT);
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	83 e0       	ldi	r24, 0x03	; 3
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	68 d1       	rcall	.+720    	; 0x3fe <_ZN3MCU7Setting9beginPortEib>
	beginPort(B, IN);
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	64 d1       	rcall	.+712    	; 0x3fe <_ZN3MCU7Setting9beginPortEib>
	beginPort(E, IN);
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	84 e0       	ldi	r24, 0x04	; 4
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	60 d1       	rcall	.+704    	; 0x3fe <_ZN3MCU7Setting9beginPortEib>
	
	beginTimer(0, OVF);
 13e:	67 e0       	ldi	r22, 0x07	; 7
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	84 d1       	rcall	.+776    	; 0x450 <_ZN3MCU7Setting10beginTimerEii>
	beginTimer(2, COMP);
 148:	66 e0       	ldi	r22, 0x06	; 6
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	7f d1       	rcall	.+766    	; 0x450 <_ZN3MCU7Setting10beginTimerEii>
	
	left.setSpeed(3);
 152:	63 e0       	ldi	r22, 0x03	; 3
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	8b e1       	ldi	r24, 0x1B	; 27
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	3d d2       	rcall	.+1146   	; 0x5d6 <_ZN5Motor8setSpeedEi>
	right.setSpeed(3);
 15c:	63 e0       	ldi	r22, 0x03	; 3
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	86 e1       	ldi	r24, 0x16	; 22
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	38 d2       	rcall	.+1136   	; 0x5d6 <_ZN5Motor8setSpeedEi>
 166:	78 94       	sei
	
	sei();
 168:	ff cf       	rjmp	.-2      	; 0x168 <main+0x4a>

0000016a <__vector_16>:
 16a:	1f 92       	push	r1
--------------   MAIN END   ----------------
//========================================*/


ISR(TIMER0_OVF_vect)
{
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	0b b6       	in	r0, 0x3b	; 59
 176:	0f 92       	push	r0
 178:	2f 93       	push	r18
 17a:	3f 93       	push	r19
 17c:	4f 93       	push	r20
 17e:	5f 93       	push	r21
 180:	6f 93       	push	r22
 182:	7f 93       	push	r23
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
 188:	af 93       	push	r26
 18a:	bf 93       	push	r27
 18c:	ef 93       	push	r30
 18e:	ff 93       	push	r31
	
	sw.init();
 190:	8d e0       	ldi	r24, 0x0D	; 13
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	77 d2       	rcall	.+1262   	; 0x684 <_ZN2SW4initEv>
	
	if (sw.result != 0x00)
 196:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <sw+0x7>
 19a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <sw+0x8>
 19e:	89 2b       	or	r24, r25
 1a0:	a9 f0       	breq	.+42     	; 0x1cc <__vector_16+0x62>
	{
		switch (sw.result)
 1a2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <sw+0x7>
 1a6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <sw+0x8>
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	91 05       	cpc	r25, r1
 1ae:	19 f0       	breq	.+6      	; 0x1b6 <__vector_16+0x4c>
 1b0:	02 97       	sbiw	r24, 0x02	; 2
 1b2:	31 f0       	breq	.+12     	; 0x1c0 <__vector_16+0x56>
 1b4:	0b c0       	rjmp	.+22     	; 0x1cc <__vector_16+0x62>
		{
			case SW_0:
				startSwitch = OFF;
 1b6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <startSwitch+0x1>
 1ba:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <startSwitch>
				break;
 1be:	06 c0       	rjmp	.+12     	; 0x1cc <__vector_16+0x62>
			
			case SW_1:
				startSwitch = ON;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <startSwitch+0x1>
 1c8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <startSwitch>
			default:
				break;
		}
	}
	
	if (startSwitch == ON)
 1cc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <startSwitch>
 1d0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <startSwitch+0x1>
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	49 f4       	brne	.+18     	; 0x1ea <__vector_16+0x80>
	{
		left.start(CW);
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	8b e1       	ldi	r24, 0x1B	; 27
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	ff d1       	rcall	.+1022   	; 0x5de <_ZN5Motor5startEb>
		right.start(CCW);
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	86 e1       	ldi	r24, 0x16	; 22
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	fb d1       	rcall	.+1014   	; 0x5de <_ZN5Motor5startEb>
 1e8:	06 c0       	rjmp	.+12     	; 0x1f6 <__vector_16+0x8c>
	}
	
	else
	{
		left.stop();
 1ea:	8b e1       	ldi	r24, 0x1B	; 27
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	30 d2       	rcall	.+1120   	; 0x650 <_ZN5Motor4stopEv>
		right.stop();
 1f0:	86 e1       	ldi	r24, 0x16	; 22
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	2d d2       	rcall	.+1114   	; 0x650 <_ZN5Motor4stopEv>
 1f6:	ff 91       	pop	r31
	}
	
}
 1f8:	ef 91       	pop	r30
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	7f 91       	pop	r23
 204:	6f 91       	pop	r22
 206:	5f 91       	pop	r21
 208:	4f 91       	pop	r20
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0b be       	out	0x3b, r0	; 59
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <__vector_9>:
 21c:	1f 92       	push	r1


ISR(TIMER2_COMP_vect)
{
 21e:	0f 92       	push	r0
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	0f 92       	push	r0
 224:	11 24       	eor	r1, r1
 226:	0b b6       	in	r0, 0x3b	; 59
 228:	0f 92       	push	r0
 22a:	2f 93       	push	r18
 22c:	3f 93       	push	r19
 22e:	4f 93       	push	r20
 230:	5f 93       	push	r21
 232:	6f 93       	push	r22
 234:	7f 93       	push	r23
 236:	8f 93       	push	r24
 238:	9f 93       	push	r25
 23a:	af 93       	push	r26
 23c:	bf 93       	push	r27
 23e:	ef 93       	push	r30
 240:	ff 93       	push	r31
	
	if (startSwitch == ON)
 242:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <startSwitch>
 246:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <startSwitch+0x1>
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	09 f0       	breq	.+2      	; 0x250 <__vector_9+0x34>
 24e:	73 c0       	rjmp	.+230    	; 0x336 <__vector_9+0x11a>
	{
		
		sensor.init();
 250:	84 e0       	ldi	r24, 0x04	; 4
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	17 d2       	rcall	.+1070   	; 0x684 <_ZN2SW4initEv>
		
		switch (sensor.result)
 256:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <sensor+0x7>
 25a:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <sensor+0x8>
 25e:	84 30       	cpi	r24, 0x04	; 4
 260:	91 05       	cpc	r25, r1
 262:	39 f1       	breq	.+78     	; 0x2b2 <__vector_9+0x96>
 264:	30 f4       	brcc	.+12     	; 0x272 <__vector_9+0x56>
 266:	00 97       	sbiw	r24, 0x00	; 0
 268:	09 f4       	brne	.+2      	; 0x26c <__vector_9+0x50>
 26a:	44 c0       	rjmp	.+136    	; 0x2f4 <__vector_9+0xd8>
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	59 f0       	breq	.+22     	; 0x286 <__vector_9+0x6a>
 270:	62 c0       	rjmp	.+196    	; 0x336 <__vector_9+0x11a>
 272:	80 31       	cpi	r24, 0x10	; 16
 274:	91 05       	cpc	r25, r1
 276:	99 f1       	breq	.+102    	; 0x2de <__vector_9+0xc2>
 278:	84 31       	cpi	r24, 0x14	; 20
 27a:	91 05       	cpc	r25, r1
 27c:	29 f1       	breq	.+74     	; 0x2c8 <__vector_9+0xac>
 27e:	05 97       	sbiw	r24, 0x05	; 5
 280:	09 f0       	breq	.+2      	; 0x284 <__vector_9+0x68>
 282:	59 c0       	rjmp	.+178    	; 0x336 <__vector_9+0x11a>
 284:	0b c0       	rjmp	.+22     	; 0x29c <__vector_9+0x80>
		{
			case 0x01:
				left.setSpeed(1);
 286:	61 e0       	ldi	r22, 0x01	; 1
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	8b e1       	ldi	r24, 0x1B	; 27
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	a3 d1       	rcall	.+838    	; 0x5d6 <_ZN5Motor8setSpeedEi>
				right.setSpeed(2);
 290:	62 e0       	ldi	r22, 0x02	; 2
 292:	70 e0       	ldi	r23, 0x00	; 0
 294:	86 e1       	ldi	r24, 0x16	; 22
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	9e d1       	rcall	.+828    	; 0x5d6 <_ZN5Motor8setSpeedEi>
				break;
 29a:	4d c0       	rjmp	.+154    	; 0x336 <__vector_9+0x11a>
			
			case 0x05:
				left.setSpeed(2);
 29c:	62 e0       	ldi	r22, 0x02	; 2
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	8b e1       	ldi	r24, 0x1B	; 27
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	98 d1       	rcall	.+816    	; 0x5d6 <_ZN5Motor8setSpeedEi>
				right.setSpeed(3);
 2a6:	63 e0       	ldi	r22, 0x03	; 3
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	86 e1       	ldi	r24, 0x16	; 22
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	93 d1       	rcall	.+806    	; 0x5d6 <_ZN5Motor8setSpeedEi>
				break;
			
			case 0x04:
				left.setSpeed(3);
 2b0:	42 c0       	rjmp	.+132    	; 0x336 <__vector_9+0x11a>
 2b2:	63 e0       	ldi	r22, 0x03	; 3
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	8b e1       	ldi	r24, 0x1B	; 27
 2b8:	91 e0       	ldi	r25, 0x01	; 1
				right.setSpeed(3);
 2ba:	8d d1       	rcall	.+794    	; 0x5d6 <_ZN5Motor8setSpeedEi>
 2bc:	63 e0       	ldi	r22, 0x03	; 3
 2be:	70 e0       	ldi	r23, 0x00	; 0
 2c0:	86 e1       	ldi	r24, 0x16	; 22
 2c2:	91 e0       	ldi	r25, 0x01	; 1
				break;
 2c4:	88 d1       	rcall	.+784    	; 0x5d6 <_ZN5Motor8setSpeedEi>
			
			case 0x14:
				left.setSpeed(3);
 2c6:	37 c0       	rjmp	.+110    	; 0x336 <__vector_9+0x11a>
 2c8:	63 e0       	ldi	r22, 0x03	; 3
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	8b e1       	ldi	r24, 0x1B	; 27
 2ce:	91 e0       	ldi	r25, 0x01	; 1
				right.setSpeed(2);
 2d0:	82 d1       	rcall	.+772    	; 0x5d6 <_ZN5Motor8setSpeedEi>
 2d2:	62 e0       	ldi	r22, 0x02	; 2
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	86 e1       	ldi	r24, 0x16	; 22
 2d8:	91 e0       	ldi	r25, 0x01	; 1
				break;
 2da:	7d d1       	rcall	.+762    	; 0x5d6 <_ZN5Motor8setSpeedEi>
			
			case 0x10:
				left.setSpeed(2);
 2dc:	2c c0       	rjmp	.+88     	; 0x336 <__vector_9+0x11a>
 2de:	62 e0       	ldi	r22, 0x02	; 2
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	8b e1       	ldi	r24, 0x1B	; 27
 2e4:	91 e0       	ldi	r25, 0x01	; 1
				right.setSpeed(1);
 2e6:	77 d1       	rcall	.+750    	; 0x5d6 <_ZN5Motor8setSpeedEi>
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	70 e0       	ldi	r23, 0x00	; 0
 2ec:	86 e1       	ldi	r24, 0x16	; 22
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	72 d1       	rcall	.+740    	; 0x5d6 <_ZN5Motor8setSpeedEi>
				break;
			
			case 0x00:
				if (oldData == 0x01)
 2f2:	21 c0       	rjmp	.+66     	; 0x336 <__vector_9+0x11a>
 2f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
				{
					left.setSpeed(0);
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	59 f4       	brne	.+22     	; 0x316 <__vector_9+0xfa>
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	70 e0       	ldi	r23, 0x00	; 0
 304:	8b e1       	ldi	r24, 0x1B	; 27
 306:	91 e0       	ldi	r25, 0x01	; 1
					right.setSpeed(1);
 308:	66 d1       	rcall	.+716    	; 0x5d6 <_ZN5Motor8setSpeedEi>
 30a:	61 e0       	ldi	r22, 0x01	; 1
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	86 e1       	ldi	r24, 0x16	; 22
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	61 d1       	rcall	.+706    	; 0x5d6 <_ZN5Motor8setSpeedEi>
				}

				else if (oldData == 0x10)
 314:	10 c0       	rjmp	.+32     	; 0x336 <__vector_9+0x11a>
 316:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 31a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
				{
					left.setSpeed(1);
 31e:	40 97       	sbiw	r24, 0x10	; 16
 320:	51 f4       	brne	.+20     	; 0x336 <__vector_9+0x11a>
 322:	61 e0       	ldi	r22, 0x01	; 1
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	8b e1       	ldi	r24, 0x1B	; 27
 328:	91 e0       	ldi	r25, 0x01	; 1
					right.setSpeed(0);
 32a:	55 d1       	rcall	.+682    	; 0x5d6 <_ZN5Motor8setSpeedEi>
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	86 e1       	ldi	r24, 0x16	; 22
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	50 d1       	rcall	.+672    	; 0x5d6 <_ZN5Motor8setSpeedEi>
				break;
		}
		
	}
	
	if (sensor.result != 0x00)
 336:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <sensor+0x7>
 33a:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <sensor+0x8>
 33e:	89 2b       	or	r24, r25
 340:	49 f0       	breq	.+18     	; 0x354 <__vector_9+0x138>
	{
		oldData = sensor.result;
 342:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <sensor+0x7>
 346:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <sensor+0x8>
 34a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 34e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 352:	08 c0       	rjmp	.+16     	; 0x364 <__vector_9+0x148>
	}

	else
	{
		oldData = oldData;
 354:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 358:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 35c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 360:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	
 364:	ff 91       	pop	r31
 366:	ef 91       	pop	r30
 368:	bf 91       	pop	r27
 36a:	af 91       	pop	r26
 36c:	9f 91       	pop	r25
 36e:	8f 91       	pop	r24
 370:	7f 91       	pop	r23
 372:	6f 91       	pop	r22
 374:	5f 91       	pop	r21
 376:	4f 91       	pop	r20
 378:	3f 91       	pop	r19
 37a:	2f 91       	pop	r18
 37c:	0f 90       	pop	r0
 37e:	0b be       	out	0x3b, r0	; 59
 380:	0f 90       	pop	r0
 382:	0f be       	out	0x3f, r0	; 63
 384:	0f 90       	pop	r0
 386:	1f 90       	pop	r1
 388:	18 95       	reti

0000038a <_GLOBAL__sub_I_left>:
 38a:	6f ef       	ldi	r22, 0xFF	; 255
 38c:	7f ef       	ldi	r23, 0xFF	; 255
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	a5 ce       	rjmp	.-694    	; 0xde <_Z41__static_initialization_and_destruction_0ii>
 394:	08 95       	ret

00000396 <_ZN3MCU9insertBitEib>:
	else if (extendIndex >= 4)
	{
		EICRB = 0x00;
	}
	
}
 396:	66 23       	and	r22, r22
 398:	51 f0       	breq	.+20     	; 0x3ae <_ZN3MCU9insertBitEib+0x18>
 39a:	21 e0       	ldi	r18, 0x01	; 1
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	a9 01       	movw	r20, r18
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <_ZN3MCU9insertBitEib+0x10>
 3a2:	44 0f       	add	r20, r20
 3a4:	55 1f       	adc	r21, r21
 3a6:	8a 95       	dec	r24
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <_ZN3MCU9insertBitEib+0xc>
 3aa:	ca 01       	movw	r24, r20
 3ac:	08 95       	ret
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	08 95       	ret

000003b4 <_ZN3MCU10delay_usecEh>:
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	98 17       	cp	r25, r24
 3b8:	40 f4       	brcc	.+16     	; 0x3ca <_ZN3MCU10delay_usecEh+0x16>
 3ba:	0f 92       	push	r0
 3bc:	0f 90       	pop	r0
 3be:	0f 92       	push	r0
 3c0:	0f 90       	pop	r0
 3c2:	0f 92       	push	r0
 3c4:	0f 90       	pop	r0
 3c6:	9f 5f       	subi	r25, 0xFF	; 255
 3c8:	f6 cf       	rjmp	.-20     	; 0x3b6 <_ZN3MCU10delay_usecEh+0x2>
 3ca:	08 95       	ret

000003cc <_ZN3MCU10delay_msecEj>:
 3cc:	0f 93       	push	r16
 3ce:	1f 93       	push	r17
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	8c 01       	movw	r16, r24
 3d6:	c0 e0       	ldi	r28, 0x00	; 0
 3d8:	d0 e0       	ldi	r29, 0x00	; 0
 3da:	c0 17       	cp	r28, r16
 3dc:	d1 07       	cpc	r29, r17
 3de:	50 f4       	brcc	.+20     	; 0x3f4 <_ZN3MCU10delay_msecEj+0x28>
 3e0:	8a ef       	ldi	r24, 0xFA	; 250
 3e2:	e8 df       	rcall	.-48     	; 0x3b4 <_ZN3MCU10delay_usecEh>
 3e4:	8a ef       	ldi	r24, 0xFA	; 250
 3e6:	e6 df       	rcall	.-52     	; 0x3b4 <_ZN3MCU10delay_usecEh>
 3e8:	8a ef       	ldi	r24, 0xFA	; 250
 3ea:	e4 df       	rcall	.-56     	; 0x3b4 <_ZN3MCU10delay_usecEh>
 3ec:	8a ef       	ldi	r24, 0xFA	; 250
 3ee:	e2 df       	rcall	.-60     	; 0x3b4 <_ZN3MCU10delay_usecEh>
 3f0:	21 96       	adiw	r28, 0x01	; 1
 3f2:	f3 cf       	rjmp	.-26     	; 0x3da <_ZN3MCU10delay_msecEj+0xe>
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	1f 91       	pop	r17
 3fa:	0f 91       	pop	r16
 3fc:	08 95       	ret

000003fe <_ZN3MCU7Setting9beginPortEib>:
 3fe:	66 23       	and	r22, r22
 400:	11 f0       	breq	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 402:	2f ef       	ldi	r18, 0xFF	; 255
 404:	01 c0       	rjmp	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	20 e0       	ldi	r18, 0x00	; 0
 408:	82 30       	cpi	r24, 0x02	; 2
 40a:	91 05       	cpc	r25, r1
 40c:	99 f0       	breq	.+38     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 40e:	2c f4       	brge	.+10     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 410:	00 97       	sbiw	r24, 0x00	; 0
 412:	51 f0       	breq	.+20     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	59 f0       	breq	.+22     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 418:	08 95       	ret
 41a:	84 30       	cpi	r24, 0x04	; 4
 41c:	91 05       	cpc	r25, r1
 41e:	81 f0       	breq	.+32     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 420:	64 f0       	brlt	.+24     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 422:	05 97       	sbiw	r24, 0x05	; 5
 424:	81 f0       	breq	.+32     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 426:	08 95       	ret
 428:	2a bb       	out	0x1a, r18	; 26
 42a:	1b ba       	out	0x1b, r1	; 27
 42c:	08 95       	ret
 42e:	27 bb       	out	0x17, r18	; 23
 430:	18 ba       	out	0x18, r1	; 24
 432:	08 95       	ret
 434:	24 bb       	out	0x14, r18	; 20
 436:	15 ba       	out	0x15, r1	; 21
 438:	08 95       	ret
 43a:	21 bb       	out	0x11, r18	; 17
 43c:	12 ba       	out	0x12, r1	; 18
 43e:	08 95       	ret
 440:	22 b9       	out	0x02, r18	; 2
 442:	13 b8       	out	0x03, r1	; 3
 444:	08 95       	ret
 446:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 44a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 44e:	08 95       	ret

00000450 <_ZN3MCU7Setting10beginTimerEii>:
//----------------------------------------*/

void MCU::Setting::beginTimer (int timerIndex, int timerMode)
{
	
	switch (timerIndex)
 450:	81 30       	cpi	r24, 0x01	; 1
 452:	91 05       	cpc	r25, r1
 454:	09 f4       	brne	.+2      	; 0x458 <_ZN3MCU7Setting10beginTimerEii+0x8>
 456:	49 c0       	rjmp	.+146    	; 0x4ea <_ZN3MCU7Setting10beginTimerEii+0x9a>
 458:	1c f4       	brge	.+6      	; 0x460 <_ZN3MCU7Setting10beginTimerEii+0x10>
 45a:	89 2b       	or	r24, r25
 45c:	41 f0       	breq	.+16     	; 0x46e <_ZN3MCU7Setting10beginTimerEii+0x1e>
 45e:	08 95       	ret
 460:	82 30       	cpi	r24, 0x02	; 2
 462:	91 05       	cpc	r25, r1
 464:	19 f1       	breq	.+70     	; 0x4ac <_ZN3MCU7Setting10beginTimerEii+0x5c>
 466:	03 97       	sbiw	r24, 0x03	; 3
 468:	09 f4       	brne	.+2      	; 0x46c <_ZN3MCU7Setting10beginTimerEii+0x1c>
 46a:	63 c0       	rjmp	.+198    	; 0x532 <_ZN3MCU7Setting10beginTimerEii+0xe2>
 46c:	08 95       	ret
	{
		// TIMER INTERRUPT 0, 2 (8 BIT)
		case 0:
			if (timerMode == OVF)
 46e:	67 30       	cpi	r22, 0x07	; 7
 470:	71 05       	cpc	r23, r1
 472:	59 f4       	brne	.+22     	; 0x48a <_ZN3MCU7Setting10beginTimerEii+0x3a>
			{
				TIMSK += insertBit(0, HIGH);
 474:	61 e0       	ldi	r22, 0x01	; 1
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	8d df       	rcall	.-230    	; 0x396 <_ZN3MCU9insertBitEib>
 47c:	97 b7       	in	r25, 0x37	; 55
 47e:	89 0f       	add	r24, r25
 480:	87 bf       	out	0x37, r24	; 55
				
				TCCR0 = 0x07;		// 1024, Normal Mode
 482:	87 e0       	ldi	r24, 0x07	; 7
 484:	83 bf       	out	0x33, r24	; 51
				TCNT0 = 0x00;		// Start Counting 0x00
 486:	12 be       	out	0x32, r1	; 50
 488:	08 95       	ret
			}
			
			else if (timerMode == COMP)
 48a:	66 30       	cpi	r22, 0x06	; 6
 48c:	71 05       	cpc	r23, r1
 48e:	09 f0       	breq	.+2      	; 0x492 <_ZN3MCU7Setting10beginTimerEii+0x42>
 490:	81 c0       	rjmp	.+258    	; 0x594 <_ZN3MCU7Setting10beginTimerEii+0x144>
			{
				TIMSK += insertBit(1, HIGH);
 492:	61 e0       	ldi	r22, 0x01	; 1
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	7e df       	rcall	.-260    	; 0x396 <_ZN3MCU9insertBitEib>
 49a:	97 b7       	in	r25, 0x37	; 55
 49c:	89 0f       	add	r24, r25
 49e:	87 bf       	out	0x37, r24	; 55
				
				TCCR0 = 0x0F;		// 1024, CTC Mode
 4a0:	8f e0       	ldi	r24, 0x0F	; 15
 4a2:	83 bf       	out	0x33, r24	; 51
				TCNT0 = 0x00;		// Start Counting 0x00
 4a4:	12 be       	out	0x32, r1	; 50
				OCR0 = 0xFF;		// Compare with 0xFF
 4a6:	8f ef       	ldi	r24, 0xFF	; 255
 4a8:	81 bf       	out	0x31, r24	; 49
 4aa:	08 95       	ret
			}
			
			break;
		
		case 2:
			if (timerMode == OVF)
 4ac:	67 30       	cpi	r22, 0x07	; 7
 4ae:	71 05       	cpc	r23, r1
 4b0:	59 f4       	brne	.+22     	; 0x4c8 <_ZN3MCU7Setting10beginTimerEii+0x78>
			{
				TIMSK += insertBit(6, HIGH);
 4b2:	61 e0       	ldi	r22, 0x01	; 1
 4b4:	86 e0       	ldi	r24, 0x06	; 6
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	6e df       	rcall	.-292    	; 0x396 <_ZN3MCU9insertBitEib>
 4ba:	97 b7       	in	r25, 0x37	; 55
 4bc:	89 0f       	add	r24, r25
 4be:	87 bf       	out	0x37, r24	; 55
				
				TCCR2 = 0x05;		// 1024, Normal Mode
 4c0:	85 e0       	ldi	r24, 0x05	; 5
 4c2:	85 bd       	out	0x25, r24	; 37
				TCNT2 = 0x00;		// Start Counting 0x00
 4c4:	14 bc       	out	0x24, r1	; 36
 4c6:	08 95       	ret
			}
			
			else if (timerMode == COMP)
 4c8:	66 30       	cpi	r22, 0x06	; 6
 4ca:	71 05       	cpc	r23, r1
 4cc:	09 f0       	breq	.+2      	; 0x4d0 <_ZN3MCU7Setting10beginTimerEii+0x80>
 4ce:	62 c0       	rjmp	.+196    	; 0x594 <_ZN3MCU7Setting10beginTimerEii+0x144>
			{
				TIMSK += insertBit(7, HIGH);
 4d0:	61 e0       	ldi	r22, 0x01	; 1
 4d2:	87 e0       	ldi	r24, 0x07	; 7
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	5f df       	rcall	.-322    	; 0x396 <_ZN3MCU9insertBitEib>
 4d8:	97 b7       	in	r25, 0x37	; 55
 4da:	89 0f       	add	r24, r25
 4dc:	87 bf       	out	0x37, r24	; 55
				
				TCCR2 = 0x0D;		// 1024, CTC Mode
 4de:	8d e0       	ldi	r24, 0x0D	; 13
 4e0:	85 bd       	out	0x25, r24	; 37
				TCNT2 = 0x00;		// Start Counting 0x00
 4e2:	14 bc       	out	0x24, r1	; 36
				OCR2 = 0xA0;		// Compare with 0xA0
 4e4:	80 ea       	ldi	r24, 0xA0	; 160
 4e6:	83 bd       	out	0x23, r24	; 35
 4e8:	08 95       	ret
			
			break;
		
		// TIMER INTERRUPT 1, 3 (16 BIT)
		case 1:
			if (timerMode == OVF)
 4ea:	67 30       	cpi	r22, 0x07	; 7
 4ec:	71 05       	cpc	r23, r1
			{
				TIMSK += insertBit(2, HIGH);
 4ee:	69 f4       	brne	.+26     	; 0x50a <_ZN3MCU7Setting10beginTimerEii+0xba>
 4f0:	61 e0       	ldi	r22, 0x01	; 1
 4f2:	82 e0       	ldi	r24, 0x02	; 2
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	4f df       	rcall	.-354    	; 0x396 <_ZN3MCU9insertBitEib>
 4f8:	97 b7       	in	r25, 0x37	; 55
 4fa:	89 0f       	add	r24, r25
 4fc:	87 bf       	out	0x37, r24	; 55
				
				TCCR1A = 0x00;
 4fe:	1f bc       	out	0x2f, r1	; 47
				TCCR1B = 0x05;		// 1024, Normal Mode
 500:	85 e0       	ldi	r24, 0x05	; 5
 502:	8e bd       	out	0x2e, r24	; 46
				TCNT1H = 0x00;
 504:	1d bc       	out	0x2d, r1	; 45
				TCNT1L = 0x00;		// Start Counting 0x0000
 506:	1c bc       	out	0x2c, r1	; 44
 508:	08 95       	ret
			}
			
			else if (timerMode == COMP)
 50a:	66 30       	cpi	r22, 0x06	; 6
 50c:	71 05       	cpc	r23, r1
 50e:	09 f0       	breq	.+2      	; 0x512 <_ZN3MCU7Setting10beginTimerEii+0xc2>
			{
				TIMSK += insertBit(4, HIGH);
 510:	41 c0       	rjmp	.+130    	; 0x594 <_ZN3MCU7Setting10beginTimerEii+0x144>
 512:	61 e0       	ldi	r22, 0x01	; 1
 514:	84 e0       	ldi	r24, 0x04	; 4
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	3e df       	rcall	.-388    	; 0x396 <_ZN3MCU9insertBitEib>
 51a:	97 b7       	in	r25, 0x37	; 55
 51c:	89 0f       	add	r24, r25
 51e:	87 bf       	out	0x37, r24	; 55
				
				TCCR1A = 0x00;
 520:	1f bc       	out	0x2f, r1	; 47
				TCCR1B = 0x0D;		// 1024, CTC Mode
 522:	8d e0       	ldi	r24, 0x0D	; 13
 524:	8e bd       	out	0x2e, r24	; 46
				TCNT1H = 0x00;
 526:	1d bc       	out	0x2d, r1	; 45
				TCNT1L = 0x00;		// Start Counting 0x0000
 528:	1c bc       	out	0x2c, r1	; 44
				OCR1AH = 0xFF;
 52a:	8f ef       	ldi	r24, 0xFF	; 255
 52c:	8b bd       	out	0x2b, r24	; 43
				OCR1AL = 0xFF;		// Compare with 0xFFFF
 52e:	8a bd       	out	0x2a, r24	; 42
 530:	08 95       	ret
			}
			
			break;
		
		case 3:
			if (timerMode == OVF)
 532:	67 30       	cpi	r22, 0x07	; 7
 534:	71 05       	cpc	r23, r1
			{
				ETIMSK += insertBit(2, HIGH);
 536:	99 f4       	brne	.+38     	; 0x55e <_ZN3MCU7Setting10beginTimerEii+0x10e>
 538:	61 e0       	ldi	r22, 0x01	; 1
 53a:	82 e0       	ldi	r24, 0x02	; 2
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	2b df       	rcall	.-426    	; 0x396 <_ZN3MCU9insertBitEib>
 540:	ed e7       	ldi	r30, 0x7D	; 125
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	90 81       	ld	r25, Z
 546:	89 0f       	add	r24, r25
 548:	80 83       	st	Z, r24
				
				TCCR3A = 0x00;
 54a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
				TCCR3B = 0x05;		// 1024, Normal Mode
 54e:	85 e0       	ldi	r24, 0x05	; 5
 550:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				TCNT3H = 0x00;
 554:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
				TCNT3L = 0x00;		// Start Counting 0x0000
 558:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			}
			
			else if (timerMode == COMP)
 55c:	08 95       	ret
 55e:	66 30       	cpi	r22, 0x06	; 6
 560:	71 05       	cpc	r23, r1
			{
				ETIMSK += insertBit(4, HIGH);
 562:	c1 f4       	brne	.+48     	; 0x594 <_ZN3MCU7Setting10beginTimerEii+0x144>
 564:	61 e0       	ldi	r22, 0x01	; 1
 566:	84 e0       	ldi	r24, 0x04	; 4
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	15 df       	rcall	.-470    	; 0x396 <_ZN3MCU9insertBitEib>
 56c:	ed e7       	ldi	r30, 0x7D	; 125
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	90 81       	ld	r25, Z
 572:	89 0f       	add	r24, r25
 574:	80 83       	st	Z, r24
				
				TCCR3A = 0x00;
 576:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
				TCCR3B = 0x0D;		// 1024, CTC Mode
 57a:	8d e0       	ldi	r24, 0x0D	; 13
 57c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				TCNT3H = 0x00;
 580:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
				TCNT3L = 0x00;		// Start Counting 0x0000
 584:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				OCR3AH = 0x3D;
 588:	8d e3       	ldi	r24, 0x3D	; 61
 58a:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
				OCR3AL = 0x09;		// Compare with 0x3D09
 58e:	89 e0       	ldi	r24, 0x09	; 9
 590:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 594:	08 95       	ret

00000596 <_ZN5Motor10attachPortEi>:
//----------------------------------------*/

void Motor::attachPort (int portValue)
{
	
	switch (m_MotorPort)
 596:	fc 01       	movw	r30, r24
 598:	80 81       	ld	r24, Z
 59a:	91 81       	ldd	r25, Z+1	; 0x01
 59c:	82 30       	cpi	r24, 0x02	; 2
 59e:	91 05       	cpc	r25, r1
 5a0:	89 f0       	breq	.+34     	; 0x5c4 <_ZN5Motor10attachPortEi+0x2e>
 5a2:	28 f4       	brcc	.+10     	; 0x5ae <_ZN5Motor10attachPortEi+0x18>
 5a4:	00 97       	sbiw	r24, 0x00	; 0
 5a6:	51 f0       	breq	.+20     	; 0x5bc <_ZN5Motor10attachPortEi+0x26>
 5a8:	01 97       	sbiw	r24, 0x01	; 1
 5aa:	51 f0       	breq	.+20     	; 0x5c0 <_ZN5Motor10attachPortEi+0x2a>
 5ac:	08 95       	ret
 5ae:	84 30       	cpi	r24, 0x04	; 4
 5b0:	91 05       	cpc	r25, r1
 5b2:	61 f0       	breq	.+24     	; 0x5cc <_ZN5Motor10attachPortEi+0x36>
 5b4:	48 f0       	brcs	.+18     	; 0x5c8 <_ZN5Motor10attachPortEi+0x32>
 5b6:	05 97       	sbiw	r24, 0x05	; 5
 5b8:	59 f0       	breq	.+22     	; 0x5d0 <_ZN5Motor10attachPortEi+0x3a>
 5ba:	08 95       	ret
	{
		// PORTA
		case A:
			PORTA = portValue;
 5bc:	6b bb       	out	0x1b, r22	; 27
			break;
 5be:	08 95       	ret
		
		// PORTB
		case B:
			PORTB = portValue;
 5c0:	68 bb       	out	0x18, r22	; 24
			break;
 5c2:	08 95       	ret
		
		// PORTC
		case C:
			PORTC = portValue;
 5c4:	65 bb       	out	0x15, r22	; 21
			break;
 5c6:	08 95       	ret
		
		// PORTD
		case D:
			PORTD = portValue;
 5c8:	62 bb       	out	0x12, r22	; 18
			break;
 5ca:	08 95       	ret
		
		// PORTE
		case E:
			PORTE = portValue;
 5cc:	63 b9       	out	0x03, r22	; 3
			break;
 5ce:	08 95       	ret
		
		// PORTF
		case F:
			PORTF = portValue;
 5d0:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5d4:	08 95       	ret

000005d6 <_ZN5Motor8setSpeedEi>:
			  Set Motor Speed
//----------------------------------------*/

void Motor::setSpeed (int speedValue)
{
    m_Speed = speedValue;
 5d6:	fc 01       	movw	r30, r24
 5d8:	73 83       	std	Z+3, r23	; 0x03
 5da:	62 83       	std	Z+2, r22	; 0x02
 5dc:	08 95       	ret

000005de <_ZN5Motor5startEb>:
/*----------------------------------------//
			 	Start Motor
//----------------------------------------*/

void Motor::start (bool isClockWise)
{
 5de:	0f 93       	push	r16
 5e0:	1f 93       	push	r17
 5e2:	cf 93       	push	r28
 5e4:	df 93       	push	r29
 5e6:	ec 01       	movw	r28, r24
	
	if (isClockWise == true)
 5e8:	66 23       	and	r22, r22
 5ea:	b1 f0       	breq	.+44     	; 0x618 <_ZN5Motor5startEb+0x3a>
	{
		attachPort( insertBit(0, HIGH) | insertBit(1, LOW) );
 5ec:	61 e0       	ldi	r22, 0x01	; 1
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	d1 de       	rcall	.-606    	; 0x396 <_ZN3MCU9insertBitEib>
 5f4:	8c 01       	movw	r16, r24
 5f6:	60 e0       	ldi	r22, 0x00	; 0
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	cc de       	rcall	.-616    	; 0x396 <_ZN3MCU9insertBitEib>
 5fe:	b8 01       	movw	r22, r16
 600:	68 2b       	or	r22, r24
 602:	79 2b       	or	r23, r25
 604:	ce 01       	movw	r24, r28
 606:	c7 df       	rcall	.-114    	; 0x596 <_ZN5Motor10attachPortEi>
		delay_msec(m_Speed);
 608:	8a 81       	ldd	r24, Y+2	; 0x02
 60a:	9b 81       	ldd	r25, Y+3	; 0x03
 60c:	df de       	rcall	.-578    	; 0x3cc <_ZN3MCU10delay_msecEj>
		attachPort(0x00);
 60e:	60 e0       	ldi	r22, 0x00	; 0
 610:	70 e0       	ldi	r23, 0x00	; 0
 612:	ce 01       	movw	r24, r28
 614:	c0 df       	rcall	.-128    	; 0x596 <_ZN5Motor10attachPortEi>
 616:	15 c0       	rjmp	.+42     	; 0x642 <_ZN5Motor5startEb+0x64>
	}
	
	else
	{
		attachPort( insertBit(0, LOW) | insertBit(1, HIGH) );
 618:	60 e0       	ldi	r22, 0x00	; 0
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	bb de       	rcall	.-650    	; 0x396 <_ZN3MCU9insertBitEib>
 620:	8c 01       	movw	r16, r24
 622:	61 e0       	ldi	r22, 0x01	; 1
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	b6 de       	rcall	.-660    	; 0x396 <_ZN3MCU9insertBitEib>
 62a:	b8 01       	movw	r22, r16
 62c:	68 2b       	or	r22, r24
 62e:	79 2b       	or	r23, r25
 630:	ce 01       	movw	r24, r28
 632:	b1 df       	rcall	.-158    	; 0x596 <_ZN5Motor10attachPortEi>
		delay_msec(m_Speed);
 634:	8a 81       	ldd	r24, Y+2	; 0x02
 636:	9b 81       	ldd	r25, Y+3	; 0x03
 638:	c9 de       	rcall	.-622    	; 0x3cc <_ZN3MCU10delay_msecEj>
 63a:	60 e0       	ldi	r22, 0x00	; 0
		attachPort(0x00);
 63c:	70 e0       	ldi	r23, 0x00	; 0
 63e:	ce 01       	movw	r24, r28
 640:	aa df       	rcall	.-172    	; 0x596 <_ZN5Motor10attachPortEi>
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	8c 83       	std	Y+4, r24	; 0x04
	}
	
	isOn = true;
 646:	df 91       	pop	r29
 648:	cf 91       	pop	r28
	
}
 64a:	1f 91       	pop	r17
 64c:	0f 91       	pop	r16
 64e:	08 95       	ret

00000650 <_ZN5Motor4stopEv>:
 650:	0f 93       	push	r16
 652:	1f 93       	push	r17
/*----------------------------------------//
			 	 Stop Motor
//----------------------------------------*/

void Motor::stop (void)
{
 654:	cf 93       	push	r28
 656:	df 93       	push	r29
 658:	8c 01       	movw	r16, r24
    attachPort( insertBit(0, LOW) | insertBit(1, LOW) );
 65a:	60 e0       	ldi	r22, 0x00	; 0
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	9a de       	rcall	.-716    	; 0x396 <_ZN3MCU9insertBitEib>
 662:	ec 01       	movw	r28, r24
 664:	60 e0       	ldi	r22, 0x00	; 0
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	95 de       	rcall	.-726    	; 0x396 <_ZN3MCU9insertBitEib>
 66c:	be 01       	movw	r22, r28
 66e:	68 2b       	or	r22, r24
 670:	79 2b       	or	r23, r25
 672:	c8 01       	movw	r24, r16
 674:	90 df       	rcall	.-224    	; 0x596 <_ZN5Motor10attachPortEi>
    isOn = false;
 676:	f8 01       	movw	r30, r16
 678:	14 82       	std	Z+4, r1	; 0x04
 67a:	df 91       	pop	r29
 67c:	cf 91       	pop	r28
 67e:	1f 91       	pop	r17
 680:	0f 91       	pop	r16
 682:	08 95       	ret

00000684 <_ZN2SW4initEv>:
/*----------------------------------------//
			 Initialize Switch
//----------------------------------------*/

void SW::init (void)
{
 684:	fc 01       	movw	r30, r24
	
	switch (m_SwitchPort)
 686:	80 81       	ld	r24, Z
 688:	91 81       	ldd	r25, Z+1	; 0x01
 68a:	82 30       	cpi	r24, 0x02	; 2
 68c:	91 05       	cpc	r25, r1
 68e:	b9 f0       	breq	.+46     	; 0x6be <_ZN2SW4initEv+0x3a>
 690:	28 f4       	brcc	.+10     	; 0x69c <_ZN2SW4initEv+0x18>
 692:	00 97       	sbiw	r24, 0x00	; 0
 694:	51 f0       	breq	.+20     	; 0x6aa <_ZN2SW4initEv+0x26>
 696:	01 97       	sbiw	r24, 0x01	; 1
 698:	69 f0       	breq	.+26     	; 0x6b4 <_ZN2SW4initEv+0x30>
 69a:	24 c0       	rjmp	.+72     	; 0x6e4 <_ZN2SW4initEv+0x60>
 69c:	84 30       	cpi	r24, 0x04	; 4
 69e:	91 05       	cpc	r25, r1
 6a0:	c1 f0       	breq	.+48     	; 0x6d2 <_ZN2SW4initEv+0x4e>
 6a2:	90 f0       	brcs	.+36     	; 0x6c8 <_ZN2SW4initEv+0x44>
 6a4:	05 97       	sbiw	r24, 0x05	; 5
 6a6:	d1 f0       	breq	.+52     	; 0x6dc <_ZN2SW4initEv+0x58>
 6a8:	1d c0       	rjmp	.+58     	; 0x6e4 <_ZN2SW4initEv+0x60>
	{
		// PORTA
		case A:
			m_NewValue = PINA;
 6aa:	89 b3       	in	r24, 0x19	; 25
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	94 83       	std	Z+4, r25	; 0x04
 6b0:	83 83       	std	Z+3, r24	; 0x03
			break;
 6b2:	18 c0       	rjmp	.+48     	; 0x6e4 <_ZN2SW4initEv+0x60>
		
		// PORTB
		case B:
			m_NewValue = PINB;
 6b4:	86 b3       	in	r24, 0x16	; 22
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	94 83       	std	Z+4, r25	; 0x04
 6ba:	83 83       	std	Z+3, r24	; 0x03
			break;
 6bc:	13 c0       	rjmp	.+38     	; 0x6e4 <_ZN2SW4initEv+0x60>
		
		// PORTC
		case C:
			m_NewValue = PINC;
 6be:	83 b3       	in	r24, 0x13	; 19
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	94 83       	std	Z+4, r25	; 0x04
 6c4:	83 83       	std	Z+3, r24	; 0x03
			break;
 6c6:	0e c0       	rjmp	.+28     	; 0x6e4 <_ZN2SW4initEv+0x60>
		
		// PORTD
		case D:
			m_NewValue = PIND;
 6c8:	80 b3       	in	r24, 0x10	; 16
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	94 83       	std	Z+4, r25	; 0x04
 6ce:	83 83       	std	Z+3, r24	; 0x03
			break;
 6d0:	09 c0       	rjmp	.+18     	; 0x6e4 <_ZN2SW4initEv+0x60>
		
		// PORTE
		case E:
			m_NewValue = PINE;
 6d2:	81 b1       	in	r24, 0x01	; 1
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	94 83       	std	Z+4, r25	; 0x04
 6d8:	83 83       	std	Z+3, r24	; 0x03
			break;
 6da:	04 c0       	rjmp	.+8      	; 0x6e4 <_ZN2SW4initEv+0x60>
		
		// PORTF
		case F:
			m_NewValue = PINF;
 6dc:	80 b1       	in	r24, 0x00	; 0
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	94 83       	std	Z+4, r25	; 0x04
 6e2:	83 83       	std	Z+3, r24	; 0x03
		
		default:
			break;
	}
	
	if (m_isReversal == true)
 6e4:	82 81       	ldd	r24, Z+2	; 0x02
 6e6:	88 23       	and	r24, r24
 6e8:	79 f0       	breq	.+30     	; 0x708 <_ZN2SW4initEv+0x84>
	{
		result = m_OldValue & ~m_NewValue;
 6ea:	25 81       	ldd	r18, Z+5	; 0x05
 6ec:	36 81       	ldd	r19, Z+6	; 0x06
 6ee:	83 81       	ldd	r24, Z+3	; 0x03
 6f0:	94 81       	ldd	r25, Z+4	; 0x04
 6f2:	80 95       	com	r24
 6f4:	90 95       	com	r25
 6f6:	82 23       	and	r24, r18
 6f8:	93 23       	and	r25, r19
 6fa:	90 87       	std	Z+8, r25	; 0x08
 6fc:	87 83       	std	Z+7, r24	; 0x07
		m_OldValue = m_NewValue;
 6fe:	83 81       	ldd	r24, Z+3	; 0x03
 700:	94 81       	ldd	r25, Z+4	; 0x04
 702:	96 83       	std	Z+6, r25	; 0x06
 704:	85 83       	std	Z+5, r24	; 0x05
 706:	08 95       	ret
	}
	
	else
	{
		result = m_OldValue & m_NewValue;
 708:	25 81       	ldd	r18, Z+5	; 0x05
 70a:	36 81       	ldd	r19, Z+6	; 0x06
 70c:	83 81       	ldd	r24, Z+3	; 0x03
 70e:	94 81       	ldd	r25, Z+4	; 0x04
 710:	82 23       	and	r24, r18
 712:	93 23       	and	r25, r19
 714:	90 87       	std	Z+8, r25	; 0x08
 716:	87 83       	std	Z+7, r24	; 0x07
		m_OldValue = ~m_NewValue;
 718:	83 81       	ldd	r24, Z+3	; 0x03
 71a:	94 81       	ldd	r25, Z+4	; 0x04
 71c:	80 95       	com	r24
 71e:	90 95       	com	r25
 720:	96 83       	std	Z+6, r25	; 0x06
 722:	85 83       	std	Z+5, r24	; 0x05
 724:	08 95       	ret

00000726 <__tablejump2__>:
 726:	ee 0f       	add	r30, r30
 728:	ff 1f       	adc	r31, r31
 72a:	00 24       	eor	r0, r0
 72c:	00 1c       	adc	r0, r0
 72e:	0b be       	out	0x3b, r0	; 59
 730:	07 90       	elpm	r0, Z+
 732:	f6 91       	elpm	r31, Z
 734:	e0 2d       	mov	r30, r0
 736:	09 94       	ijmp

00000738 <_exit>:
 738:	f8 94       	cli

0000073a <__stop_program>:
 73a:	ff cf       	rjmp	.-2      	; 0x73a <__stop_program>
