
ATmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000071e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800100  00800100  0000071e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000071e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000750  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024b9  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b07  00000000  00000000  00002d15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb9  00000000  00000000  0000381c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d8  00000000  00000000  000043d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a75  00000000  00000000  000046b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000147e  00000000  00000000  00005125  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000065a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	46 c0       	rjmp	.+140    	; 0x8e <__ctors_end>
   2:	00 00       	nop
   4:	6b c0       	rjmp	.+214    	; 0xdc <__bad_interrupt>
   6:	00 00       	nop
   8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
   a:	00 00       	nop
   c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
   e:	00 00       	nop
  10:	65 c0       	rjmp	.+202    	; 0xdc <__bad_interrupt>
  12:	00 00       	nop
  14:	63 c0       	rjmp	.+198    	; 0xdc <__bad_interrupt>
  16:	00 00       	nop
  18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>
  1e:	00 00       	nop
  20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
  22:	00 00       	nop
  24:	5b c0       	rjmp	.+182    	; 0xdc <__bad_interrupt>
  26:	00 00       	nop
  28:	59 c0       	rjmp	.+178    	; 0xdc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	57 c0       	rjmp	.+174    	; 0xdc <__bad_interrupt>
  2e:	00 00       	nop
  30:	55 c0       	rjmp	.+170    	; 0xdc <__bad_interrupt>
  32:	00 00       	nop
  34:	53 c0       	rjmp	.+166    	; 0xdc <__bad_interrupt>
  36:	00 00       	nop
  38:	51 c0       	rjmp	.+162    	; 0xdc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4f c0       	rjmp	.+158    	; 0xdc <__bad_interrupt>
  3e:	00 00       	nop
  40:	9c c2       	rjmp	.+1336   	; 0x57a <__vector_16>
  42:	00 00       	nop
  44:	4b c0       	rjmp	.+150    	; 0xdc <__bad_interrupt>
  46:	00 00       	nop
  48:	49 c0       	rjmp	.+146    	; 0xdc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	47 c0       	rjmp	.+142    	; 0xdc <__bad_interrupt>
  4e:	00 00       	nop
  50:	45 c0       	rjmp	.+138    	; 0xdc <__bad_interrupt>
  52:	00 00       	nop
  54:	43 c0       	rjmp	.+134    	; 0xdc <__bad_interrupt>
  56:	00 00       	nop
  58:	41 c0       	rjmp	.+130    	; 0xdc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3f c0       	rjmp	.+126    	; 0xdc <__bad_interrupt>
  5e:	00 00       	nop
  60:	3d c0       	rjmp	.+122    	; 0xdc <__bad_interrupt>
  62:	00 00       	nop
  64:	3b c0       	rjmp	.+118    	; 0xdc <__bad_interrupt>
  66:	00 00       	nop
  68:	39 c0       	rjmp	.+114    	; 0xdc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	37 c0       	rjmp	.+110    	; 0xdc <__bad_interrupt>
  6e:	00 00       	nop
  70:	35 c0       	rjmp	.+106    	; 0xdc <__bad_interrupt>
  72:	00 00       	nop
  74:	33 c0       	rjmp	.+102    	; 0xdc <__bad_interrupt>
  76:	00 00       	nop
  78:	31 c0       	rjmp	.+98     	; 0xdc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2f c0       	rjmp	.+94     	; 0xdc <__bad_interrupt>
  7e:	00 00       	nop
  80:	2d c0       	rjmp	.+90     	; 0xdc <__bad_interrupt>
  82:	00 00       	nop
  84:	2b c0       	rjmp	.+86     	; 0xdc <__bad_interrupt>
  86:	00 00       	nop
  88:	29 c0       	rjmp	.+82     	; 0xdc <__bad_interrupt>
	...

0000008c <__ctors_start>:
  8c:	44 03       	mulsu	r20, r20

0000008e <__ctors_end>:
  8e:	11 24       	eor	r1, r1
  90:	1f be       	out	0x3f, r1	; 63
  92:	cf ef       	ldi	r28, 0xFF	; 255
  94:	d0 e1       	ldi	r29, 0x10	; 16
  96:	de bf       	out	0x3e, r29	; 62
  98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
  9a:	11 e0       	ldi	r17, 0x01	; 1
  9c:	a0 e0       	ldi	r26, 0x00	; 0
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	ea ea       	ldi	r30, 0xAA	; 170
  a2:	f6 e0       	ldi	r31, 0x06	; 6
  a4:	00 e0       	ldi	r16, 0x00	; 0
  a6:	0b bf       	out	0x3b, r16	; 59
  a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x14>
  aa:	07 90       	elpm	r0, Z+
  ac:	0d 92       	st	X+, r0
  ae:	a0 30       	cpi	r26, 0x00	; 0
  b0:	b1 07       	cpc	r27, r17
  b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0x10>

000000b4 <__do_clear_bss>:
  b4:	21 e0       	ldi	r18, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a4 31       	cpi	r26, 0x14	; 20
  c0:	b2 07       	cpc	r27, r18
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>

000000c4 <__do_global_ctors>:
  c4:	10 e0       	ldi	r17, 0x00	; 0
  c6:	c7 e4       	ldi	r28, 0x47	; 71
  c8:	d0 e0       	ldi	r29, 0x00	; 0
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <__do_global_ctors+0xe>
  cc:	21 97       	sbiw	r28, 0x01	; 1
  ce:	fe 01       	movw	r30, r28
  d0:	e1 d2       	rcall	.+1474   	; 0x694 <__tablejump2__>
  d2:	c6 34       	cpi	r28, 0x46	; 70
  d4:	d1 07       	cpc	r29, r17
  d6:	d1 f7       	brne	.-12     	; 0xcc <__do_global_ctors+0x8>
  d8:	30 d2       	rcall	.+1120   	; 0x53a <main>
  da:	e5 c2       	rjmp	.+1482   	; 0x6a6 <_exit>

000000dc <__bad_interrupt>:
  dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <_Z41__static_initialization_and_destruction_0ii>:
	
	exportInstruction(0x0C);				// Control Display	[ D = Display H		C = Cursor L	B = Blink L ]
	exportInstruction(0x06);				// Set Entry Mode	[ I/D = Right						S = Shift L	]
	exportInstruction(0x01);				// Clear Display
	
}
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	81 f4       	brne	.+32     	; 0x102 <_Z41__static_initialization_and_destruction_0ii+0x24>
  e2:	6f 3f       	cpi	r22, 0xFF	; 255
  e4:	7f 4f       	sbci	r23, 0xFF	; 255
  e6:	69 f4       	brne	.+26     	; 0x102 <_Z41__static_initialization_and_destruction_0ii+0x24>
  e8:	eb e0       	ldi	r30, 0x0B	; 11
  ea:	f1 e0       	ldi	r31, 0x01	; 1
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	91 83       	std	Z+1, r25	; 0x01
  f2:	80 83       	st	Z, r24
  f4:	82 83       	std	Z+2, r24	; 0x02
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <motor+0x1>
  fe:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <motor>
 102:	08 95       	ret

00000104 <_Z9insertBitib>:
 104:	66 23       	and	r22, r22
 106:	51 f0       	breq	.+20     	; 0x11c <_Z9insertBitib+0x18>
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	a9 01       	movw	r20, r18
 10e:	02 c0       	rjmp	.+4      	; 0x114 <_Z9insertBitib+0x10>
 110:	44 0f       	add	r20, r20
 112:	55 1f       	adc	r21, r21
 114:	8a 95       	dec	r24
 116:	e2 f7       	brpl	.-8      	; 0x110 <_Z9insertBitib+0xc>
 118:	ca 01       	movw	r24, r20
 11a:	08 95       	ret
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	08 95       	ret

00000122 <_ZN3MCU8Features10delayCycleEh>:
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	98 17       	cp	r25, r24
 126:	40 f4       	brcc	.+16     	; 0x138 <_ZN3MCU8Features10delayCycleEh+0x16>
 128:	0f 92       	push	r0
 12a:	0f 90       	pop	r0
 12c:	0f 92       	push	r0
 12e:	0f 90       	pop	r0
 130:	0f 92       	push	r0
 132:	0f 90       	pop	r0
 134:	9f 5f       	subi	r25, 0xFF	; 255
 136:	f6 cf       	rjmp	.-20     	; 0x124 <_ZN3MCU8Features10delayCycleEh+0x2>
 138:	08 95       	ret

0000013a <_ZN3MCU7Setting9beginPortEib>:
 13a:	66 23       	and	r22, r22
 13c:	11 f0       	breq	.+4      	; 0x142 <_ZN3MCU7Setting9beginPortEib+0x8>
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	01 c0       	rjmp	.+2      	; 0x144 <_ZN3MCU7Setting9beginPortEib+0xa>
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	91 05       	cpc	r25, r1
 148:	99 f0       	breq	.+38     	; 0x170 <_ZN3MCU7Setting9beginPortEib+0x36>
 14a:	2c f4       	brge	.+10     	; 0x156 <_ZN3MCU7Setting9beginPortEib+0x1c>
 14c:	00 97       	sbiw	r24, 0x00	; 0
 14e:	51 f0       	breq	.+20     	; 0x164 <_ZN3MCU7Setting9beginPortEib+0x2a>
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	59 f0       	breq	.+22     	; 0x16a <_ZN3MCU7Setting9beginPortEib+0x30>
 154:	08 95       	ret
 156:	84 30       	cpi	r24, 0x04	; 4
 158:	91 05       	cpc	r25, r1
 15a:	81 f0       	breq	.+32     	; 0x17c <_ZN3MCU7Setting9beginPortEib+0x42>
 15c:	64 f0       	brlt	.+24     	; 0x176 <_ZN3MCU7Setting9beginPortEib+0x3c>
 15e:	05 97       	sbiw	r24, 0x05	; 5
 160:	81 f0       	breq	.+32     	; 0x182 <_ZN3MCU7Setting9beginPortEib+0x48>
 162:	08 95       	ret
 164:	2a bb       	out	0x1a, r18	; 26
 166:	1b ba       	out	0x1b, r1	; 27
 168:	08 95       	ret
 16a:	27 bb       	out	0x17, r18	; 23
 16c:	18 ba       	out	0x18, r1	; 24
 16e:	08 95       	ret
 170:	24 bb       	out	0x14, r18	; 20
 172:	15 ba       	out	0x15, r1	; 21
 174:	08 95       	ret
 176:	21 bb       	out	0x11, r18	; 17
 178:	12 ba       	out	0x12, r1	; 18
 17a:	08 95       	ret
 17c:	22 b9       	out	0x02, r18	; 2
 17e:	13 b8       	out	0x03, r1	; 3
 180:	08 95       	ret
 182:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 186:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 18a:	08 95       	ret

0000018c <_ZN3MCU7Setting10beginTimerEii>:
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	91 05       	cpc	r25, r1
 190:	09 f4       	brne	.+2      	; 0x194 <_ZN3MCU7Setting10beginTimerEii+0x8>
 192:	49 c0       	rjmp	.+146    	; 0x226 <_ZN3MCU7Setting10beginTimerEii+0x9a>
 194:	1c f4       	brge	.+6      	; 0x19c <_ZN3MCU7Setting10beginTimerEii+0x10>
 196:	89 2b       	or	r24, r25
 198:	41 f0       	breq	.+16     	; 0x1aa <_ZN3MCU7Setting10beginTimerEii+0x1e>
 19a:	08 95       	ret
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	91 05       	cpc	r25, r1
 1a0:	19 f1       	breq	.+70     	; 0x1e8 <_ZN3MCU7Setting10beginTimerEii+0x5c>
 1a2:	03 97       	sbiw	r24, 0x03	; 3
 1a4:	09 f4       	brne	.+2      	; 0x1a8 <_ZN3MCU7Setting10beginTimerEii+0x1c>
 1a6:	64 c0       	rjmp	.+200    	; 0x270 <_ZN3MCU7Setting10beginTimerEii+0xe4>
 1a8:	08 95       	ret
 1aa:	67 30       	cpi	r22, 0x07	; 7
 1ac:	71 05       	cpc	r23, r1
 1ae:	59 f4       	brne	.+22     	; 0x1c6 <_ZN3MCU7Setting10beginTimerEii+0x3a>
 1b0:	61 e0       	ldi	r22, 0x01	; 1
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	a6 df       	rcall	.-180    	; 0x104 <_Z9insertBitib>
 1b8:	97 b7       	in	r25, 0x37	; 55
 1ba:	89 0f       	add	r24, r25
 1bc:	87 bf       	out	0x37, r24	; 55
 1be:	87 e0       	ldi	r24, 0x07	; 7
 1c0:	83 bf       	out	0x33, r24	; 51
 1c2:	12 be       	out	0x32, r1	; 50
 1c4:	08 95       	ret
 1c6:	66 30       	cpi	r22, 0x06	; 6
 1c8:	71 05       	cpc	r23, r1
 1ca:	09 f0       	breq	.+2      	; 0x1ce <_ZN3MCU7Setting10beginTimerEii+0x42>
 1cc:	82 c0       	rjmp	.+260    	; 0x2d2 <_ZN3MCU7Setting10beginTimerEii+0x146>
 1ce:	61 e0       	ldi	r22, 0x01	; 1
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	97 df       	rcall	.-210    	; 0x104 <_Z9insertBitib>
 1d6:	97 b7       	in	r25, 0x37	; 55
 1d8:	89 0f       	add	r24, r25
 1da:	87 bf       	out	0x37, r24	; 55
 1dc:	8f e0       	ldi	r24, 0x0F	; 15
 1de:	83 bf       	out	0x33, r24	; 51
 1e0:	12 be       	out	0x32, r1	; 50
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	81 bf       	out	0x31, r24	; 49
 1e6:	08 95       	ret
 1e8:	67 30       	cpi	r22, 0x07	; 7
 1ea:	71 05       	cpc	r23, r1
 1ec:	59 f4       	brne	.+22     	; 0x204 <_ZN3MCU7Setting10beginTimerEii+0x78>
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	86 e0       	ldi	r24, 0x06	; 6
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	87 df       	rcall	.-242    	; 0x104 <_Z9insertBitib>
 1f6:	97 b7       	in	r25, 0x37	; 55
 1f8:	89 0f       	add	r24, r25
 1fa:	87 bf       	out	0x37, r24	; 55
 1fc:	85 e0       	ldi	r24, 0x05	; 5
 1fe:	85 bd       	out	0x25, r24	; 37
 200:	14 bc       	out	0x24, r1	; 36
 202:	08 95       	ret
 204:	66 30       	cpi	r22, 0x06	; 6
 206:	71 05       	cpc	r23, r1
 208:	09 f0       	breq	.+2      	; 0x20c <_ZN3MCU7Setting10beginTimerEii+0x80>
 20a:	63 c0       	rjmp	.+198    	; 0x2d2 <_ZN3MCU7Setting10beginTimerEii+0x146>
 20c:	61 e0       	ldi	r22, 0x01	; 1
 20e:	87 e0       	ldi	r24, 0x07	; 7
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	78 df       	rcall	.-272    	; 0x104 <_Z9insertBitib>
 214:	97 b7       	in	r25, 0x37	; 55
 216:	89 0f       	add	r24, r25
 218:	87 bf       	out	0x37, r24	; 55
 21a:	8d e0       	ldi	r24, 0x0D	; 13
 21c:	85 bd       	out	0x25, r24	; 37
 21e:	14 bc       	out	0x24, r1	; 36
 220:	8f ef       	ldi	r24, 0xFF	; 255
 222:	83 bd       	out	0x23, r24	; 35
 224:	08 95       	ret
 226:	67 30       	cpi	r22, 0x07	; 7
 228:	71 05       	cpc	r23, r1
 22a:	69 f4       	brne	.+26     	; 0x246 <_ZN3MCU7Setting10beginTimerEii+0xba>
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	68 df       	rcall	.-304    	; 0x104 <_Z9insertBitib>
 234:	97 b7       	in	r25, 0x37	; 55
 236:	89 0f       	add	r24, r25
 238:	87 bf       	out	0x37, r24	; 55
 23a:	1f bc       	out	0x2f, r1	; 47
 23c:	85 e0       	ldi	r24, 0x05	; 5
 23e:	8e bd       	out	0x2e, r24	; 46
 240:	1d bc       	out	0x2d, r1	; 45
 242:	1c bc       	out	0x2c, r1	; 44
 244:	08 95       	ret
 246:	66 30       	cpi	r22, 0x06	; 6
 248:	71 05       	cpc	r23, r1
 24a:	09 f0       	breq	.+2      	; 0x24e <_ZN3MCU7Setting10beginTimerEii+0xc2>
 24c:	42 c0       	rjmp	.+132    	; 0x2d2 <_ZN3MCU7Setting10beginTimerEii+0x146>
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	84 e0       	ldi	r24, 0x04	; 4
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	57 df       	rcall	.-338    	; 0x104 <_Z9insertBitib>
 256:	97 b7       	in	r25, 0x37	; 55
 258:	89 0f       	add	r24, r25
 25a:	87 bf       	out	0x37, r24	; 55
 25c:	1f bc       	out	0x2f, r1	; 47
 25e:	8d e0       	ldi	r24, 0x0D	; 13
 260:	8e bd       	out	0x2e, r24	; 46
 262:	1d bc       	out	0x2d, r1	; 45
 264:	1c bc       	out	0x2c, r1	; 44
 266:	8d e3       	ldi	r24, 0x3D	; 61
 268:	8b bd       	out	0x2b, r24	; 43
 26a:	89 e0       	ldi	r24, 0x09	; 9
 26c:	8a bd       	out	0x2a, r24	; 42
 26e:	08 95       	ret
 270:	67 30       	cpi	r22, 0x07	; 7
 272:	71 05       	cpc	r23, r1
 274:	99 f4       	brne	.+38     	; 0x29c <_ZN3MCU7Setting10beginTimerEii+0x110>
 276:	61 e0       	ldi	r22, 0x01	; 1
 278:	82 e0       	ldi	r24, 0x02	; 2
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	43 df       	rcall	.-378    	; 0x104 <_Z9insertBitib>
 27e:	ed e7       	ldi	r30, 0x7D	; 125
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	90 81       	ld	r25, Z
 284:	89 0f       	add	r24, r25
 286:	80 83       	st	Z, r24
 288:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 28c:	85 e0       	ldi	r24, 0x05	; 5
 28e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 292:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 296:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 29a:	08 95       	ret
 29c:	66 30       	cpi	r22, 0x06	; 6
 29e:	71 05       	cpc	r23, r1
 2a0:	c1 f4       	brne	.+48     	; 0x2d2 <_ZN3MCU7Setting10beginTimerEii+0x146>
 2a2:	61 e0       	ldi	r22, 0x01	; 1
 2a4:	84 e0       	ldi	r24, 0x04	; 4
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	2d df       	rcall	.-422    	; 0x104 <_Z9insertBitib>
 2aa:	ed e7       	ldi	r30, 0x7D	; 125
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	90 81       	ld	r25, Z
 2b0:	89 0f       	add	r24, r25
 2b2:	80 83       	st	Z, r24
 2b4:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 2b8:	8d e0       	ldi	r24, 0x0D	; 13
 2ba:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 2be:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2c2:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2c6:	8d e3       	ldi	r24, 0x3D	; 61
 2c8:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 2cc:	89 e0       	ldi	r24, 0x09	; 9
 2ce:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 2d2:	08 95       	ret

000002d4 <_ZN2SW4initEv>:
 2d4:	fc 01       	movw	r30, r24
 2d6:	80 81       	ld	r24, Z
 2d8:	91 81       	ldd	r25, Z+1	; 0x01
 2da:	82 30       	cpi	r24, 0x02	; 2
 2dc:	91 05       	cpc	r25, r1
 2de:	b9 f0       	breq	.+46     	; 0x30e <_ZN2SW4initEv+0x3a>
 2e0:	28 f4       	brcc	.+10     	; 0x2ec <_ZN2SW4initEv+0x18>
 2e2:	00 97       	sbiw	r24, 0x00	; 0
 2e4:	51 f0       	breq	.+20     	; 0x2fa <_ZN2SW4initEv+0x26>
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	69 f0       	breq	.+26     	; 0x304 <_ZN2SW4initEv+0x30>
 2ea:	24 c0       	rjmp	.+72     	; 0x334 <_ZN2SW4initEv+0x60>
 2ec:	84 30       	cpi	r24, 0x04	; 4
 2ee:	91 05       	cpc	r25, r1
 2f0:	c1 f0       	breq	.+48     	; 0x322 <_ZN2SW4initEv+0x4e>
 2f2:	90 f0       	brcs	.+36     	; 0x318 <_ZN2SW4initEv+0x44>
 2f4:	05 97       	sbiw	r24, 0x05	; 5
 2f6:	d1 f0       	breq	.+52     	; 0x32c <_ZN2SW4initEv+0x58>
 2f8:	1d c0       	rjmp	.+58     	; 0x334 <_ZN2SW4initEv+0x60>
 2fa:	89 b3       	in	r24, 0x19	; 25
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	94 83       	std	Z+4, r25	; 0x04
 300:	83 83       	std	Z+3, r24	; 0x03
 302:	18 c0       	rjmp	.+48     	; 0x334 <_ZN2SW4initEv+0x60>
 304:	86 b3       	in	r24, 0x16	; 22
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	94 83       	std	Z+4, r25	; 0x04
 30a:	83 83       	std	Z+3, r24	; 0x03
 30c:	13 c0       	rjmp	.+38     	; 0x334 <_ZN2SW4initEv+0x60>
 30e:	83 b3       	in	r24, 0x13	; 19
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	94 83       	std	Z+4, r25	; 0x04
 314:	83 83       	std	Z+3, r24	; 0x03
 316:	0e c0       	rjmp	.+28     	; 0x334 <_ZN2SW4initEv+0x60>
 318:	80 b3       	in	r24, 0x10	; 16
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	94 83       	std	Z+4, r25	; 0x04
 31e:	83 83       	std	Z+3, r24	; 0x03
 320:	09 c0       	rjmp	.+18     	; 0x334 <_ZN2SW4initEv+0x60>
 322:	81 b1       	in	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	94 83       	std	Z+4, r25	; 0x04
 328:	83 83       	std	Z+3, r24	; 0x03
 32a:	04 c0       	rjmp	.+8      	; 0x334 <_ZN2SW4initEv+0x60>
 32c:	80 b1       	in	r24, 0x00	; 0
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	94 83       	std	Z+4, r25	; 0x04
 332:	83 83       	std	Z+3, r24	; 0x03
 334:	82 81       	ldd	r24, Z+2	; 0x02
 336:	88 23       	and	r24, r24
 338:	79 f0       	breq	.+30     	; 0x358 <_ZN2SW4initEv+0x84>
 33a:	25 81       	ldd	r18, Z+5	; 0x05
 33c:	36 81       	ldd	r19, Z+6	; 0x06
 33e:	83 81       	ldd	r24, Z+3	; 0x03
 340:	94 81       	ldd	r25, Z+4	; 0x04
 342:	80 95       	com	r24
 344:	90 95       	com	r25
 346:	82 23       	and	r24, r18
 348:	93 23       	and	r25, r19
 34a:	90 87       	std	Z+8, r25	; 0x08
 34c:	87 83       	std	Z+7, r24	; 0x07
 34e:	83 81       	ldd	r24, Z+3	; 0x03
 350:	94 81       	ldd	r25, Z+4	; 0x04
 352:	96 83       	std	Z+6, r25	; 0x06
 354:	85 83       	std	Z+5, r24	; 0x05
 356:	08 95       	ret
 358:	25 81       	ldd	r18, Z+5	; 0x05
 35a:	36 81       	ldd	r19, Z+6	; 0x06
 35c:	83 81       	ldd	r24, Z+3	; 0x03
 35e:	94 81       	ldd	r25, Z+4	; 0x04
 360:	82 23       	and	r24, r18
 362:	93 23       	and	r25, r19
 364:	90 87       	std	Z+8, r25	; 0x08
 366:	87 83       	std	Z+7, r24	; 0x07
 368:	83 81       	ldd	r24, Z+3	; 0x03
 36a:	94 81       	ldd	r25, Z+4	; 0x04
 36c:	80 95       	com	r24
 36e:	90 95       	com	r25
 370:	96 83       	std	Z+6, r25	; 0x06
 372:	85 83       	std	Z+5, r24	; 0x05
 374:	08 95       	ret

00000376 <_ZN5Motor10attachPortEi>:
//----------------------------------------*/

void Motor::attachPort (int portValue)
{
	
	switch (m_MotorPort)
 376:	fc 01       	movw	r30, r24
 378:	80 81       	ld	r24, Z
 37a:	91 81       	ldd	r25, Z+1	; 0x01
 37c:	82 30       	cpi	r24, 0x02	; 2
 37e:	91 05       	cpc	r25, r1
 380:	89 f0       	breq	.+34     	; 0x3a4 <_ZN5Motor10attachPortEi+0x2e>
 382:	2c f4       	brge	.+10     	; 0x38e <_ZN5Motor10attachPortEi+0x18>
 384:	00 97       	sbiw	r24, 0x00	; 0
 386:	51 f0       	breq	.+20     	; 0x39c <_ZN5Motor10attachPortEi+0x26>
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	51 f0       	breq	.+20     	; 0x3a0 <_ZN5Motor10attachPortEi+0x2a>
 38c:	08 95       	ret
 38e:	84 30       	cpi	r24, 0x04	; 4
 390:	91 05       	cpc	r25, r1
 392:	61 f0       	breq	.+24     	; 0x3ac <_ZN5Motor10attachPortEi+0x36>
 394:	4c f0       	brlt	.+18     	; 0x3a8 <_ZN5Motor10attachPortEi+0x32>
 396:	05 97       	sbiw	r24, 0x05	; 5
 398:	59 f0       	breq	.+22     	; 0x3b0 <_ZN5Motor10attachPortEi+0x3a>
 39a:	08 95       	ret
	{
		// PORTA
		case A:
			PORTA = portValue;
 39c:	6b bb       	out	0x1b, r22	; 27
			break;
 39e:	08 95       	ret
		
		// PORTB
		case B:
			PORTB = portValue;
 3a0:	68 bb       	out	0x18, r22	; 24
			break;
 3a2:	08 95       	ret
		
		// PORTC
		case C:
			PORTC = portValue;
 3a4:	65 bb       	out	0x15, r22	; 21
			break;
 3a6:	08 95       	ret
		
		// PORTD
		case D:
			PORTD = portValue;
 3a8:	62 bb       	out	0x12, r22	; 18
			break;
 3aa:	08 95       	ret
		
		// PORTE
		case E:
			PORTE = portValue;
 3ac:	63 b9       	out	0x03, r22	; 3
			break;
 3ae:	08 95       	ret
		
		// PORTF
		case F:
			PORTF = portValue;
 3b0:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3b4:	08 95       	ret

000003b6 <_ZN5Motor9startLeftEb>:
/*----------------------------------------//
			 Start Left Motor
//----------------------------------------*/

void Motor::startLeft (bool isClockWise)
{
 3b6:	0f 93       	push	r16
 3b8:	1f 93       	push	r17
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	ec 01       	movw	r28, r24
	
	if (isClockWise == true)
 3c0:	66 23       	and	r22, r22
 3c2:	51 f1       	breq	.+84     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	{
		m_PortValue += insertBit(0, HIGH) | insertBit(2, LOW);
 3c4:	61 e0       	ldi	r22, 0x01	; 1
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	9c de       	rcall	.-712    	; 0x104 <_Z9insertBitib>
 3cc:	8c 01       	movw	r16, r24
 3ce:	60 e0       	ldi	r22, 0x00	; 0
 3d0:	82 e0       	ldi	r24, 0x02	; 2
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	97 de       	rcall	.-722    	; 0x104 <_Z9insertBitib>
 3d6:	80 2b       	or	r24, r16
 3d8:	91 2b       	or	r25, r17
 3da:	2a 81       	ldd	r18, Y+2	; 0x02
 3dc:	3b 81       	ldd	r19, Y+3	; 0x03
 3de:	bc 01       	movw	r22, r24
 3e0:	62 0f       	add	r22, r18
 3e2:	73 1f       	adc	r23, r19
 3e4:	7b 83       	std	Y+3, r23	; 0x03
 3e6:	6a 83       	std	Y+2, r22	; 0x02
		attachPort(m_PortValue);
 3e8:	ce 01       	movw	r24, r28
 3ea:	c5 df       	rcall	.-118    	; 0x376 <_ZN5Motor10attachPortEi>
	void attachPort (int portValue);
	bool isOn;
	
	// SET SPEED
	void setLeftSpeed (int leftSpeedValue) { m_LeftSpeed = 160; m_LeftSpeed *= leftSpeedValue; }
	void getLeftSpeed (void) { MCU::Features::delayCycle(m_LeftSpeed); }
 3ec:	8c 81       	ldd	r24, Y+4	; 0x04
 3ee:	99 de       	rcall	.-718    	; 0x122 <_ZN3MCU8Features10delayCycleEh>
	void setRightSpeed (int rightSpeedValue) { m_RightSpeed = 160; m_RightSpeed *= rightSpeedValue; }
	void getRightSpeed (void) { MCU::Features::delayCycle(m_RightSpeed); }
	
	// LEFT MOTOR
	void stopLeft (void) { m_PortValue &= insertBit(0, LOW) | insertBit(2, LOW); }
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	86 de       	rcall	.-756    	; 0x104 <_Z9insertBitib>
 3f8:	8c 01       	movw	r16, r24
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	82 e0       	ldi	r24, 0x02	; 2
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	81 de       	rcall	.-766    	; 0x104 <_Z9insertBitib>
 402:	80 2b       	or	r24, r16
 404:	91 2b       	or	r25, r17
 406:	6a 81       	ldd	r22, Y+2	; 0x02
 408:	7b 81       	ldd	r23, Y+3	; 0x03
 40a:	68 23       	and	r22, r24
 40c:	79 23       	and	r23, r25
 40e:	7b 83       	std	Y+3, r23	; 0x03
 410:	6a 83       	std	Y+2, r22	; 0x02
		attachPort(m_PortValue);
		
		getLeftSpeed();
		
		stopLeft();
		attachPort(m_PortValue);
 412:	ce 01       	movw	r24, r28
 414:	b0 df       	rcall	.-160    	; 0x376 <_ZN5Motor10attachPortEi>
 416:	29 c0       	rjmp	.+82     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
	}
	
	else
	{
		m_PortValue += insertBit(0, LOW) | insertBit(2, HIGH);
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	72 de       	rcall	.-796    	; 0x104 <_Z9insertBitib>
 420:	8c 01       	movw	r16, r24
 422:	61 e0       	ldi	r22, 0x01	; 1
 424:	82 e0       	ldi	r24, 0x02	; 2
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	6d de       	rcall	.-806    	; 0x104 <_Z9insertBitib>
 42a:	80 2b       	or	r24, r16
 42c:	91 2b       	or	r25, r17
 42e:	2a 81       	ldd	r18, Y+2	; 0x02
 430:	3b 81       	ldd	r19, Y+3	; 0x03
 432:	bc 01       	movw	r22, r24
 434:	62 0f       	add	r22, r18
 436:	73 1f       	adc	r23, r19
 438:	7b 83       	std	Y+3, r23	; 0x03
		attachPort(m_PortValue);
 43a:	6a 83       	std	Y+2, r22	; 0x02
 43c:	ce 01       	movw	r24, r28
 43e:	9b df       	rcall	.-202    	; 0x376 <_ZN5Motor10attachPortEi>
	void attachPort (int portValue);
	bool isOn;
	
	// SET SPEED
	void setLeftSpeed (int leftSpeedValue) { m_LeftSpeed = 160; m_LeftSpeed *= leftSpeedValue; }
	void getLeftSpeed (void) { MCU::Features::delayCycle(m_LeftSpeed); }
 440:	8c 81       	ldd	r24, Y+4	; 0x04
 442:	6f de       	rcall	.-802    	; 0x122 <_ZN3MCU8Features10delayCycleEh>
	void setRightSpeed (int rightSpeedValue) { m_RightSpeed = 160; m_RightSpeed *= rightSpeedValue; }
	void getRightSpeed (void) { MCU::Features::delayCycle(m_RightSpeed); }
	
	// LEFT MOTOR
	void stopLeft (void) { m_PortValue &= insertBit(0, LOW) | insertBit(2, LOW); }
 444:	60 e0       	ldi	r22, 0x00	; 0
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	5c de       	rcall	.-840    	; 0x104 <_Z9insertBitib>
 44c:	8c 01       	movw	r16, r24
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	82 e0       	ldi	r24, 0x02	; 2
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	57 de       	rcall	.-850    	; 0x104 <_Z9insertBitib>
 456:	80 2b       	or	r24, r16
 458:	91 2b       	or	r25, r17
 45a:	6a 81       	ldd	r22, Y+2	; 0x02
 45c:	7b 81       	ldd	r23, Y+3	; 0x03
 45e:	68 23       	and	r22, r24
 460:	79 23       	and	r23, r25
 462:	7b 83       	std	Y+3, r23	; 0x03
 464:	6a 83       	std	Y+2, r22	; 0x02
 466:	ce 01       	movw	r24, r28
		attachPort(m_PortValue);
		
		getLeftSpeed();
		
		stopLeft();
		attachPort(m_PortValue);
 468:	86 df       	rcall	.-244    	; 0x376 <_ZN5Motor10attachPortEi>
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	88 87       	std	Y+8, r24	; 0x08
	}
	
	isOn = true;
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
	
}
 472:	1f 91       	pop	r17
 474:	0f 91       	pop	r16
 476:	08 95       	ret

00000478 <_ZN5Motor10startRightEb>:
 478:	0f 93       	push	r16
 47a:	1f 93       	push	r17
/*----------------------------------------//
			 Start Right Motor
//----------------------------------------*/

void Motor::startRight (bool isClockWise)
{
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	ec 01       	movw	r28, r24
	
	if (isClockWise == true)
 482:	66 23       	and	r22, r22
 484:	51 f1       	breq	.+84     	; 0x4da <_ZN5Motor10startRightEb+0x62>
	{
		m_PortValue += insertBit(1, HIGH) | insertBit(3, LOW);
 486:	61 e0       	ldi	r22, 0x01	; 1
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	3b de       	rcall	.-906    	; 0x104 <_Z9insertBitib>
 48e:	8c 01       	movw	r16, r24
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	83 e0       	ldi	r24, 0x03	; 3
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	36 de       	rcall	.-916    	; 0x104 <_Z9insertBitib>
 498:	80 2b       	or	r24, r16
 49a:	91 2b       	or	r25, r17
 49c:	2a 81       	ldd	r18, Y+2	; 0x02
 49e:	3b 81       	ldd	r19, Y+3	; 0x03
 4a0:	bc 01       	movw	r22, r24
 4a2:	62 0f       	add	r22, r18
 4a4:	73 1f       	adc	r23, r19
 4a6:	7b 83       	std	Y+3, r23	; 0x03
 4a8:	6a 83       	std	Y+2, r22	; 0x02
		attachPort(m_PortValue);
 4aa:	ce 01       	movw	r24, r28
 4ac:	64 df       	rcall	.-312    	; 0x376 <_ZN5Motor10attachPortEi>
	void attachPort (int portValue);
	bool isOn;
	
	// SET SPEED
	void setLeftSpeed (int leftSpeedValue) { m_LeftSpeed = 160; m_LeftSpeed *= leftSpeedValue; }
	void getLeftSpeed (void) { MCU::Features::delayCycle(m_LeftSpeed); }
 4ae:	8c 81       	ldd	r24, Y+4	; 0x04
 4b0:	38 de       	rcall	.-912    	; 0x122 <_ZN3MCU8Features10delayCycleEh>
	void stopLeft (void) { m_PortValue &= insertBit(0, LOW) | insertBit(2, LOW); }
	void breakLeft (void) { m_PortValue |= insertBit(0, HIGH) | insertBit(2, HIGH); }
	void startLeft (bool isClockWise);
	
	// RIGHT MOTOR
	void stopRight (void) { m_PortValue &= insertBit(1, LOW) | insertBit(3, LOW); }
 4b2:	60 e0       	ldi	r22, 0x00	; 0
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	25 de       	rcall	.-950    	; 0x104 <_Z9insertBitib>
 4ba:	8c 01       	movw	r16, r24
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	83 e0       	ldi	r24, 0x03	; 3
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	20 de       	rcall	.-960    	; 0x104 <_Z9insertBitib>
 4c4:	80 2b       	or	r24, r16
 4c6:	91 2b       	or	r25, r17
 4c8:	6a 81       	ldd	r22, Y+2	; 0x02
 4ca:	7b 81       	ldd	r23, Y+3	; 0x03
 4cc:	68 23       	and	r22, r24
 4ce:	79 23       	and	r23, r25
 4d0:	7b 83       	std	Y+3, r23	; 0x03
 4d2:	6a 83       	std	Y+2, r22	; 0x02
		attachPort(m_PortValue);
		
		getLeftSpeed();
		
		stopRight();
		attachPort(m_PortValue);
 4d4:	ce 01       	movw	r24, r28
 4d6:	4f df       	rcall	.-354    	; 0x376 <_ZN5Motor10attachPortEi>
 4d8:	29 c0       	rjmp	.+82     	; 0x52c <_ZN5Motor10startRightEb+0xb4>
	}
	
	else
	{
		m_PortValue += insertBit(1, LOW) | insertBit(3, HIGH);
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	11 de       	rcall	.-990    	; 0x104 <_Z9insertBitib>
 4e2:	8c 01       	movw	r16, r24
 4e4:	61 e0       	ldi	r22, 0x01	; 1
 4e6:	83 e0       	ldi	r24, 0x03	; 3
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0c de       	rcall	.-1000   	; 0x104 <_Z9insertBitib>
 4ec:	80 2b       	or	r24, r16
 4ee:	91 2b       	or	r25, r17
 4f0:	2a 81       	ldd	r18, Y+2	; 0x02
 4f2:	3b 81       	ldd	r19, Y+3	; 0x03
 4f4:	bc 01       	movw	r22, r24
 4f6:	62 0f       	add	r22, r18
 4f8:	73 1f       	adc	r23, r19
 4fa:	7b 83       	std	Y+3, r23	; 0x03
		attachPort(m_PortValue);
 4fc:	6a 83       	std	Y+2, r22	; 0x02
 4fe:	ce 01       	movw	r24, r28
 500:	3a df       	rcall	.-396    	; 0x376 <_ZN5Motor10attachPortEi>
	void attachPort (int portValue);
	bool isOn;
	
	// SET SPEED
	void setLeftSpeed (int leftSpeedValue) { m_LeftSpeed = 160; m_LeftSpeed *= leftSpeedValue; }
	void getLeftSpeed (void) { MCU::Features::delayCycle(m_LeftSpeed); }
 502:	8c 81       	ldd	r24, Y+4	; 0x04
 504:	0e de       	rcall	.-996    	; 0x122 <_ZN3MCU8Features10delayCycleEh>
	void stopLeft (void) { m_PortValue &= insertBit(0, LOW) | insertBit(2, LOW); }
	void breakLeft (void) { m_PortValue |= insertBit(0, HIGH) | insertBit(2, HIGH); }
	void startLeft (bool isClockWise);
	
	// RIGHT MOTOR
	void stopRight (void) { m_PortValue &= insertBit(1, LOW) | insertBit(3, LOW); }
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	fb dd       	rcall	.-1034   	; 0x104 <_Z9insertBitib>
 50e:	8c 01       	movw	r16, r24
 510:	60 e0       	ldi	r22, 0x00	; 0
 512:	83 e0       	ldi	r24, 0x03	; 3
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	f6 dd       	rcall	.-1044   	; 0x104 <_Z9insertBitib>
 518:	80 2b       	or	r24, r16
 51a:	91 2b       	or	r25, r17
 51c:	6a 81       	ldd	r22, Y+2	; 0x02
 51e:	7b 81       	ldd	r23, Y+3	; 0x03
 520:	68 23       	and	r22, r24
 522:	79 23       	and	r23, r25
 524:	7b 83       	std	Y+3, r23	; 0x03
 526:	6a 83       	std	Y+2, r22	; 0x02
 528:	ce 01       	movw	r24, r28
		attachPort(m_PortValue);
		
		getLeftSpeed();
		
		stopRight();
		attachPort(m_PortValue);
 52a:	25 df       	rcall	.-438    	; 0x376 <_ZN5Motor10attachPortEi>
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	88 87       	std	Y+8, r24	; 0x08
	}
	
	isOn = true;
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
	
}
 534:	1f 91       	pop	r17
 536:	0f 91       	pop	r16
 538:	08 95       	ret

0000053a <main>:
 53a:	60 e0       	ldi	r22, 0x00	; 0
 53c:	81 e0       	ldi	r24, 0x01	; 1
-------------   MAIN START   ---------------
//========================================*/

int main(void)
{
    beginPort(B, IN);
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	fc dd       	rcall	.-1032   	; 0x13a <_ZN3MCU7Setting9beginPortEib>
    beginPort(E, IN);
 542:	60 e0       	ldi	r22, 0x00	; 0
 544:	84 e0       	ldi	r24, 0x04	; 4
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	f8 dd       	rcall	.-1040   	; 0x13a <_ZN3MCU7Setting9beginPortEib>
    beginPort(D, OUT);
 54a:	61 e0       	ldi	r22, 0x01	; 1
 54c:	83 e0       	ldi	r24, 0x03	; 3
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	f4 dd       	rcall	.-1048   	; 0x13a <_ZN3MCU7Setting9beginPortEib>
	
	beginTimer(0, OVF);
 552:	67 e0       	ldi	r22, 0x07	; 7
 554:	70 e0       	ldi	r23, 0x00	; 0
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	18 de       	rcall	.-976    	; 0x18c <_ZN3MCU7Setting10beginTimerEii>
	beginTimer(1, COMP);
 55c:	66 e0       	ldi	r22, 0x06	; 6
 55e:	70 e0       	ldi	r23, 0x00	; 0
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	13 de       	rcall	.-986    	; 0x18c <_ZN3MCU7Setting10beginTimerEii>
	Motor (int motorPort) { m_MotorPort = motorPort; }
	void attachPort (int portValue);
	bool isOn;
	
	// SET SPEED
	void setLeftSpeed (int leftSpeedValue) { m_LeftSpeed = 160; m_LeftSpeed *= leftSpeedValue; }
 566:	e2 e0       	ldi	r30, 0x02	; 2
 568:	f1 e0       	ldi	r31, 0x01	; 1
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	99 e1       	ldi	r25, 0x19	; 25
 56e:	95 83       	std	Z+5, r25	; 0x05
 570:	84 83       	std	Z+4, r24	; 0x04
	void getLeftSpeed (void) { MCU::Features::delayCycle(m_LeftSpeed); }
	void setRightSpeed (int rightSpeedValue) { m_RightSpeed = 160; m_RightSpeed *= rightSpeedValue; }
 572:	97 83       	std	Z+7, r25	; 0x07
 574:	86 83       	std	Z+6, r24	; 0x06
	
	motor.setLeftSpeed(40);
	motor.setRightSpeed(40);
	
	sei();
 576:	78 94       	sei
 578:	ff cf       	rjmp	.-2      	; 0x578 <main+0x3e>

0000057a <__vector_16>:
--------------   MAIN END   ----------------
//========================================*/


ISR(TIMER0_OVF_vect)
{
 57a:	1f 92       	push	r1
 57c:	0f 92       	push	r0
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	0f 92       	push	r0
 582:	11 24       	eor	r1, r1
 584:	0b b6       	in	r0, 0x3b	; 59
 586:	0f 92       	push	r0
 588:	ef 92       	push	r14
 58a:	ff 92       	push	r15
 58c:	0f 93       	push	r16
 58e:	1f 93       	push	r17
 590:	2f 93       	push	r18
 592:	3f 93       	push	r19
 594:	4f 93       	push	r20
 596:	5f 93       	push	r21
 598:	6f 93       	push	r22
 59a:	7f 93       	push	r23
 59c:	8f 93       	push	r24
 59e:	9f 93       	push	r25
 5a0:	af 93       	push	r26
 5a2:	bf 93       	push	r27
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	ef 93       	push	r30
 5aa:	ff 93       	push	r31
	
	sw.init();
 5ac:	8b e0       	ldi	r24, 0x0B	; 11
 5ae:	91 e0       	ldi	r25, 0x01	; 1
 5b0:	91 de       	rcall	.-734    	; 0x2d4 <_ZN2SW4initEv>
	
	if (sw.result != SW_OFF)
 5b2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <sw+0x7>
 5b6:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <sw+0x8>
 5ba:	89 2b       	or	r24, r25
 5bc:	a9 f0       	breq	.+42     	; 0x5e8 <__vector_16+0x6e>
	{
		switch (sw.result)
 5be:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <sw+0x7>
 5c2:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <sw+0x8>
 5c6:	81 30       	cpi	r24, 0x01	; 1
 5c8:	91 05       	cpc	r25, r1
 5ca:	19 f0       	breq	.+6      	; 0x5d2 <__vector_16+0x58>
 5cc:	02 97       	sbiw	r24, 0x02	; 2
 5ce:	41 f0       	breq	.+16     	; 0x5e0 <__vector_16+0x66>
 5d0:	0b c0       	rjmp	.+22     	; 0x5e8 <__vector_16+0x6e>
		{
			case SW_0:
				startSwitch = ON;
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
 5de:	04 c0       	rjmp	.+8      	; 0x5e8 <__vector_16+0x6e>
			
			case SW_1:
				startSwitch = OFF;
 5e0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5e4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			default:
				break;
		}
	}
	
	if (startSwitch == ON)
 5e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5f0:	01 97       	sbiw	r24, 0x01	; 1
 5f2:	49 f4       	brne	.+18     	; 0x606 <__vector_16+0x8c>
	{
		motor.startLeft(CW);
 5f4:	61 e0       	ldi	r22, 0x01	; 1
 5f6:	82 e0       	ldi	r24, 0x02	; 2
 5f8:	91 e0       	ldi	r25, 0x01	; 1
 5fa:	dd de       	rcall	.-582    	; 0x3b6 <_ZN5Motor9startLeftEb>
		motor.startRight(CCW);
 5fc:	60 e0       	ldi	r22, 0x00	; 0
 5fe:	82 e0       	ldi	r24, 0x02	; 2
 600:	91 e0       	ldi	r25, 0x01	; 1
 602:	3a df       	rcall	.-396    	; 0x478 <_ZN5Motor10startRightEb>
 604:	28 c0       	rjmp	.+80     	; 0x656 <__vector_16+0xdc>
	void getRightSpeed (void) { MCU::Features::delayCycle(m_RightSpeed); }
	
	// LEFT MOTOR
	void stopLeft (void) { m_PortValue &= insertBit(0, LOW) | insertBit(2, LOW); }
 606:	60 e0       	ldi	r22, 0x00	; 0
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	7b dd       	rcall	.-1290   	; 0x104 <_Z9insertBitib>
 60e:	ec 01       	movw	r28, r24
 610:	60 e0       	ldi	r22, 0x00	; 0
 612:	82 e0       	ldi	r24, 0x02	; 2
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	76 dd       	rcall	.-1300   	; 0x104 <_Z9insertBitib>
 618:	02 e0       	ldi	r16, 0x02	; 2
 61a:	11 e0       	ldi	r17, 0x01	; 1
 61c:	8c 2b       	or	r24, r28
 61e:	9d 2b       	or	r25, r29
 620:	f8 01       	movw	r30, r16
 622:	22 81       	ldd	r18, Z+2	; 0x02
 624:	33 81       	ldd	r19, Z+3	; 0x03
 626:	ec 01       	movw	r28, r24
 628:	c2 23       	and	r28, r18
 62a:	d3 23       	and	r29, r19
	void breakLeft (void) { m_PortValue |= insertBit(0, HIGH) | insertBit(2, HIGH); }
	void startLeft (bool isClockWise);
	
	// RIGHT MOTOR
	void stopRight (void) { m_PortValue &= insertBit(1, LOW) | insertBit(3, LOW); }
 62c:	60 e0       	ldi	r22, 0x00	; 0
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	68 dd       	rcall	.-1328   	; 0x104 <_Z9insertBitib>
 634:	7c 01       	movw	r14, r24
 636:	60 e0       	ldi	r22, 0x00	; 0
 638:	83 e0       	ldi	r24, 0x03	; 3
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	63 dd       	rcall	.-1338   	; 0x104 <_Z9insertBitib>
 63e:	8e 29       	or	r24, r14
 640:	9f 29       	or	r25, r15
 642:	bc 01       	movw	r22, r24
 644:	6c 23       	and	r22, r28
 646:	7d 23       	and	r23, r29
 648:	f8 01       	movw	r30, r16
 64a:	73 83       	std	Z+3, r23	; 0x03
 64c:	62 83       	std	Z+2, r22	; 0x02
	void breakRight (void) { m_PortValue |= insertBit(1, HIGH) | insertBit(3, HIGH); }
	void startRight (bool isClockWise);
	
	void stop (void) { stopLeft(); stopRight(); attachPort(m_PortValue); isOn = false; }
 64e:	c8 01       	movw	r24, r16
 650:	92 de       	rcall	.-732    	; 0x376 <_ZN5Motor10attachPortEi>
 652:	f8 01       	movw	r30, r16
 654:	10 86       	std	Z+8, r1	; 0x08
 656:	ff 91       	pop	r31
	else
	{
		motor.stop();
	}
	
}
 658:	ef 91       	pop	r30
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	bf 91       	pop	r27
 660:	af 91       	pop	r26
 662:	9f 91       	pop	r25
 664:	8f 91       	pop	r24
 666:	7f 91       	pop	r23
 668:	6f 91       	pop	r22
 66a:	5f 91       	pop	r21
 66c:	4f 91       	pop	r20
 66e:	3f 91       	pop	r19
 670:	2f 91       	pop	r18
 672:	1f 91       	pop	r17
 674:	0f 91       	pop	r16
 676:	ff 90       	pop	r15
 678:	ef 90       	pop	r14
 67a:	0f 90       	pop	r0
 67c:	0b be       	out	0x3b, r0	; 59
 67e:	0f 90       	pop	r0
 680:	0f be       	out	0x3f, r0	; 63
 682:	0f 90       	pop	r0
 684:	1f 90       	pop	r1
 686:	18 95       	reti

00000688 <_GLOBAL__sub_I__Z9insertBitib>:
 688:	6f ef       	ldi	r22, 0xFF	; 255
 68a:	7f ef       	ldi	r23, 0xFF	; 255
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	26 cd       	rjmp	.-1460   	; 0xde <_Z41__static_initialization_and_destruction_0ii>
 692:	08 95       	ret

00000694 <__tablejump2__>:
 694:	ee 0f       	add	r30, r30
 696:	ff 1f       	adc	r31, r31
 698:	00 24       	eor	r0, r0
 69a:	00 1c       	adc	r0, r0
 69c:	0b be       	out	0x3b, r0	; 59
 69e:	07 90       	elpm	r0, Z+
 6a0:	f6 91       	elpm	r31, Z
 6a2:	e0 2d       	mov	r30, r0
 6a4:	09 94       	ijmp

000006a6 <_exit>:
 6a6:	f8 94       	cli

000006a8 <__stop_program>:
 6a8:	ff cf       	rjmp	.-2      	; 0x6a8 <__stop_program>
