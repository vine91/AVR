
ATmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000b50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000adc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800100  00800100  00000b50  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a70  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d6a  00000000  00000000  00002734  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ab7  00000000  00000000  0000349e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000270  00000000  00000000  00003f58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000081f  00000000  00000000  000041c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c64  00000000  00000000  000049e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000564b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	56 c0       	rjmp	.+172    	; 0xae <__ctors_end>
   2:	00 00       	nop
   4:	de c0       	rjmp	.+444    	; 0x1c2 <__vector_1>
   6:	00 00       	nop
   8:	ed c0       	rjmp	.+474    	; 0x1e4 <__vector_2>
   a:	00 00       	nop
   c:	77 c0       	rjmp	.+238    	; 0xfc <__bad_interrupt>
   e:	00 00       	nop
  10:	75 c0       	rjmp	.+234    	; 0xfc <__bad_interrupt>
  12:	00 00       	nop
  14:	73 c0       	rjmp	.+230    	; 0xfc <__bad_interrupt>
  16:	00 00       	nop
  18:	71 c0       	rjmp	.+226    	; 0xfc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6f c0       	rjmp	.+222    	; 0xfc <__bad_interrupt>
  1e:	00 00       	nop
  20:	6d c0       	rjmp	.+218    	; 0xfc <__bad_interrupt>
  22:	00 00       	nop
  24:	ed c0       	rjmp	.+474    	; 0x200 <__vector_9>
  26:	00 00       	nop
  28:	69 c0       	rjmp	.+210    	; 0xfc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	67 c0       	rjmp	.+206    	; 0xfc <__bad_interrupt>
  2e:	00 00       	nop
  30:	65 c0       	rjmp	.+202    	; 0xfc <__bad_interrupt>
  32:	00 00       	nop
  34:	63 c0       	rjmp	.+198    	; 0xfc <__bad_interrupt>
  36:	00 00       	nop
  38:	61 c0       	rjmp	.+194    	; 0xfc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5f c0       	rjmp	.+190    	; 0xfc <__bad_interrupt>
  3e:	00 00       	nop
  40:	5d c0       	rjmp	.+186    	; 0xfc <__bad_interrupt>
  42:	00 00       	nop
  44:	5b c0       	rjmp	.+182    	; 0xfc <__bad_interrupt>
  46:	00 00       	nop
  48:	59 c0       	rjmp	.+178    	; 0xfc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	57 c0       	rjmp	.+174    	; 0xfc <__bad_interrupt>
  4e:	00 00       	nop
  50:	55 c0       	rjmp	.+170    	; 0xfc <__bad_interrupt>
  52:	00 00       	nop
  54:	53 c0       	rjmp	.+166    	; 0xfc <__bad_interrupt>
  56:	00 00       	nop
  58:	51 c0       	rjmp	.+162    	; 0xfc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4f c0       	rjmp	.+158    	; 0xfc <__bad_interrupt>
  5e:	00 00       	nop
  60:	4d c0       	rjmp	.+154    	; 0xfc <__bad_interrupt>
  62:	00 00       	nop
  64:	4b c0       	rjmp	.+150    	; 0xfc <__bad_interrupt>
  66:	00 00       	nop
  68:	49 c0       	rjmp	.+146    	; 0xfc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	47 c0       	rjmp	.+142    	; 0xfc <__bad_interrupt>
  6e:	00 00       	nop
  70:	45 c0       	rjmp	.+138    	; 0xfc <__bad_interrupt>
  72:	00 00       	nop
  74:	43 c0       	rjmp	.+134    	; 0xfc <__bad_interrupt>
  76:	00 00       	nop
  78:	41 c0       	rjmp	.+130    	; 0xfc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3f c0       	rjmp	.+126    	; 0xfc <__bad_interrupt>
  7e:	00 00       	nop
  80:	3d c0       	rjmp	.+122    	; 0xfc <__bad_interrupt>
  82:	00 00       	nop
  84:	3b c0       	rjmp	.+118    	; 0xfc <__bad_interrupt>
  86:	00 00       	nop
  88:	39 c0       	rjmp	.+114    	; 0xfc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c6 02       	muls	r28, r22
  8e:	e4 02       	muls	r30, r20
  90:	f3 02       	muls	r31, r19
  92:	02 03       	mulsu	r16, r18
  94:	d5 02       	muls	r29, r21
  96:	11 03       	mulsu	r17, r17
  98:	22 03       	mulsu	r18, r18
  9a:	33 03       	mulsu	r19, r19
  9c:	7b 03       	fmul	r23, r19
  9e:	7d 03       	fmul	r23, r21
  a0:	82 03       	fmuls	r16, r18
  a2:	87 03       	fmuls	r16, r23
  a4:	8e 03       	fmulsu	r16, r22
  a6:	90 03       	fmuls	r17, r16
  a8:	97 03       	fmuls	r17, r23
  aa:	9e 03       	fmulsu	r17, r22

000000ac <__ctors_start>:
  ac:	b7 01       	movw	r22, r14

000000ae <__ctors_end>:
  ae:	11 24       	eor	r1, r1
  b0:	1f be       	out	0x3f, r1	; 63
  b2:	cf ef       	ldi	r28, 0xFF	; 255
  b4:	d0 e1       	ldi	r29, 0x10	; 16
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	cd bf       	out	0x3d, r28	; 61

000000ba <__do_copy_data>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	ec ed       	ldi	r30, 0xDC	; 220
  c2:	fa e0       	ldi	r31, 0x0A	; 10
  c4:	00 e0       	ldi	r16, 0x00	; 0
  c6:	0b bf       	out	0x3b, r16	; 59
  c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x14>
  ca:	07 90       	elpm	r0, Z+
  cc:	0d 92       	st	X+, r0
  ce:	a0 30       	cpi	r26, 0x00	; 0
  d0:	b1 07       	cpc	r27, r17
  d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0x10>

000000d4 <__do_clear_bss>:
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
  dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
  de:	a7 31       	cpi	r26, 0x17	; 23
  e0:	b2 07       	cpc	r27, r18
  e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>

000000e4 <__do_global_ctors>:
  e4:	10 e0       	ldi	r17, 0x00	; 0
  e6:	c7 e5       	ldi	r28, 0x57	; 87
  e8:	d0 e0       	ldi	r29, 0x00	; 0
  ea:	03 c0       	rjmp	.+6      	; 0xf2 <__do_global_ctors+0xe>
  ec:	21 97       	sbiw	r28, 0x01	; 1
  ee:	fe 01       	movw	r30, r28
  f0:	ea d4       	rcall	.+2516   	; 0xac6 <__tablejump2__>
  f2:	c6 35       	cpi	r28, 0x56	; 86
  f4:	d1 07       	cpc	r29, r17
  f6:	d1 f7       	brne	.-12     	; 0xec <__do_global_ctors+0x8>
  f8:	1c d0       	rcall	.+56     	; 0x132 <main>
  fa:	ee c4       	rjmp	.+2524   	; 0xad8 <_exit>

000000fc <__bad_interrupt>:
  fc:	81 cf       	rjmp	.-254    	; 0x0 <__vectors>

000000fe <_Z41__static_initialization_and_destruction_0ii>:
	else
	{
		sensor.oldData = sensor.result;
	}
	
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	b9 f4       	brne	.+46     	; 0x130 <_Z41__static_initialization_and_destruction_0ii+0x32>
 102:	6f 3f       	cpi	r22, 0xFF	; 255
 104:	7f 4f       	sbci	r23, 0xFF	; 255
 106:	a1 f4       	brne	.+40     	; 0x130 <_Z41__static_initialization_and_destruction_0ii+0x32>
private:
	unsigned int m_SwitchPort;
	unsigned int m_SwitchMode;

public:
	SW (int switchPort, int switchMode) { m_SwitchPort = switchPort; m_SwitchMode = switchMode; }
 108:	eb e0       	ldi	r30, 0x0B	; 11
 10a:	f1 e0       	ldi	r31, 0x01	; 1
 10c:	84 e0       	ldi	r24, 0x04	; 4
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	91 83       	std	Z+1, r25	; 0x01
 112:	80 83       	st	Z, r24
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	93 83       	std	Z+3, r25	; 0x03
 11a:	82 83       	std	Z+2, r24	; 0x02
	unsigned int m_MotorPin;
	unsigned int m_Speed;
	bool m_isOn;

public:
	Motor (int motorPin) { m_MotorPin = motorPin; }
 11c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <right+0x1>
 120:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <right>
 124:	83 e0       	ldi	r24, 0x03	; 3
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <left+0x1>
 12c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <left>
 130:	08 95       	ret

00000132 <main>:
-------------   MAIN START   ---------------
//========================================*/

int main(void)
{
	beginPort(B, OUT);
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	2f d1       	rcall	.+606    	; 0x398 <_ZN3MCU7Setting9beginPortEib>
	beginPort(D, IN);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	2b d1       	rcall	.+598    	; 0x398 <_ZN3MCU7Setting9beginPortEib>
	beginPort(E, IN);
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	84 e0       	ldi	r24, 0x04	; 4
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	27 d1       	rcall	.+590    	; 0x398 <_ZN3MCU7Setting9beginPortEib>
	
	beginExtend(0, DOWN);
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	4b d1       	rcall	.+662    	; 0x3ea <_ZN3MCU7Setting11beginExtendEii>
	beginExtend(1, DOWN);
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	46 d1       	rcall	.+652    	; 0x3ea <_ZN3MCU7Setting11beginExtendEii>
	beginTimer(2, COMP);
 15e:	63 e0       	ldi	r22, 0x03	; 3
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	61 d1       	rcall	.+706    	; 0x42a <_ZN3MCU7Setting10beginTimerEii>
	
	beginPWM(OC0, CORRECT);
 168:	68 e0       	ldi	r22, 0x08	; 8
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	00 d2       	rcall	.+1024   	; 0x572 <_ZN3MCU7Setting8beginPWMEii>
	beginPWM(OC1C, CORRECT);
 172:	68 e0       	ldi	r22, 0x08	; 8
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	90 e0       	ldi	r25, 0x00	; 0
	
	left.stop();
 17a:	fb d1       	rcall	.+1014   	; 0x572 <_ZN3MCU7Setting8beginPWMEii>
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	91 e0       	ldi	r25, 0x01	; 1
	right.stop();
 180:	17 d3       	rcall	.+1582   	; 0x7b0 <_ZN5Motor4stopEv>
 182:	86 e0       	ldi	r24, 0x06	; 6
 184:	91 e0       	ldi	r25, 0x01	; 1
	
	left.setSpeed(25);
 186:	14 d3       	rcall	.+1576   	; 0x7b0 <_ZN5Motor4stopEv>
 188:	69 e1       	ldi	r22, 0x19	; 25
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	dc d2       	rcall	.+1464   	; 0x74a <_ZN5Motor8setSpeedEi>
	right.setSpeed(25);
 192:	69 e1       	ldi	r22, 0x19	; 25
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	86 e0       	ldi	r24, 0x06	; 6
 198:	91 e0       	ldi	r25, 0x01	; 1
	
	sei();
 19a:	d7 d2       	rcall	.+1454   	; 0x74a <_ZN5Motor8setSpeedEi>
	
    while (true) 
    {
		
		if (startSwitch == ON)
 19c:	78 94       	sei
 19e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		{
			left.start();
 1a2:	88 23       	and	r24, r24
 1a4:	39 f0       	breq	.+14     	; 0x1b4 <main+0x82>
 1a6:	81 e0       	ldi	r24, 0x01	; 1
			right.start();
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	f7 d2       	rcall	.+1518   	; 0x79a <_ZN5Motor5startEv>
 1ac:	86 e0       	ldi	r24, 0x06	; 6
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	f4 d2       	rcall	.+1512   	; 0x79a <_ZN5Motor5startEv>
		}
		
		else
		{
			left.stop();
 1b2:	f5 cf       	rjmp	.-22     	; 0x19e <main+0x6c>
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	fb d2       	rcall	.+1526   	; 0x7b0 <_ZN5Motor4stopEv>
			right.stop();
 1ba:	86 e0       	ldi	r24, 0x06	; 6
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	f8 d2       	rcall	.+1520   	; 0x7b0 <_ZN5Motor4stopEv>
 1c0:	ee cf       	rjmp	.-36     	; 0x19e <main+0x6c>

000001c2 <__vector_1>:
 1c2:	1f 92       	push	r1
--------------   MAIN END   ----------------
//========================================*/


ISR(INT0_vect)
{
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	8f 93       	push	r24
	cli();
 1ce:	f8 94       	cli
	startSwitch = ON;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	sei();
 1d6:	78 94       	sei
}
 1d8:	8f 91       	pop	r24
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <__vector_2>:


ISR(INT1_vect)
{
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
	cli();
 1ee:	f8 94       	cli
	startSwitch = OFF;
 1f0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	sei();
 1f4:	78 94       	sei
}
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <__vector_9>:


ISR(TIMER2_COMP_vect)
{
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	0b b6       	in	r0, 0x3b	; 59
 20c:	0f 92       	push	r0
 20e:	2f 93       	push	r18
 210:	3f 93       	push	r19
 212:	4f 93       	push	r20
 214:	5f 93       	push	r21
 216:	6f 93       	push	r22
 218:	7f 93       	push	r23
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
 21e:	af 93       	push	r26
 220:	bf 93       	push	r27
 222:	ef 93       	push	r30
 224:	ff 93       	push	r31
	
	if (startSwitch == ON)
 226:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 22a:	88 23       	and	r24, r24
 22c:	09 f4       	brne	.+2      	; 0x230 <__vector_9+0x30>
 22e:	78 c0       	rjmp	.+240    	; 0x320 <__vector_9+0x120>
	{
		
		sensor.setMax(0x15);
 230:	65 e1       	ldi	r22, 0x15	; 21
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	8b e0       	ldi	r24, 0x0B	; 11
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	c5 d2       	rcall	.+1418   	; 0x7c4 <_ZN2SW6setMaxEi>
		sensor.init();
 23a:	8b e0       	ldi	r24, 0x0B	; 11
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	c6 d2       	rcall	.+1420   	; 0x7cc <_ZN2SW4initEv>
		
		switch (sensor.result)
 240:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <sensor+0x8>
 244:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <sensor+0x9>
 248:	84 30       	cpi	r24, 0x04	; 4
 24a:	91 05       	cpc	r25, r1
 24c:	39 f1       	breq	.+78     	; 0x29c <__vector_9+0x9c>
 24e:	30 f4       	brcc	.+12     	; 0x25c <__vector_9+0x5c>
 250:	00 97       	sbiw	r24, 0x00	; 0
 252:	09 f4       	brne	.+2      	; 0x256 <__vector_9+0x56>
 254:	44 c0       	rjmp	.+136    	; 0x2de <__vector_9+0xde>
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	59 f0       	breq	.+22     	; 0x270 <__vector_9+0x70>
 25a:	62 c0       	rjmp	.+196    	; 0x320 <__vector_9+0x120>
 25c:	80 31       	cpi	r24, 0x10	; 16
 25e:	91 05       	cpc	r25, r1
 260:	99 f1       	breq	.+102    	; 0x2c8 <__vector_9+0xc8>
 262:	84 31       	cpi	r24, 0x14	; 20
 264:	91 05       	cpc	r25, r1
 266:	29 f1       	breq	.+74     	; 0x2b2 <__vector_9+0xb2>
 268:	05 97       	sbiw	r24, 0x05	; 5
 26a:	09 f0       	breq	.+2      	; 0x26e <__vector_9+0x6e>
 26c:	59 c0       	rjmp	.+178    	; 0x320 <__vector_9+0x120>
 26e:	0b c0       	rjmp	.+22     	; 0x286 <__vector_9+0x86>
		{
			case 0x01:
				left.setSpeed(18);
 270:	62 e1       	ldi	r22, 0x12	; 18
 272:	70 e0       	ldi	r23, 0x00	; 0
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	68 d2       	rcall	.+1232   	; 0x74a <_ZN5Motor8setSpeedEi>
				right.setSpeed(22);
 27a:	66 e1       	ldi	r22, 0x16	; 22
 27c:	70 e0       	ldi	r23, 0x00	; 0
 27e:	86 e0       	ldi	r24, 0x06	; 6
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	63 d2       	rcall	.+1222   	; 0x74a <_ZN5Motor8setSpeedEi>
				break;
 284:	4d c0       	rjmp	.+154    	; 0x320 <__vector_9+0x120>
			
			case 0x05:
				left.setSpeed(22);
 286:	66 e1       	ldi	r22, 0x16	; 22
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	5d d2       	rcall	.+1210   	; 0x74a <_ZN5Motor8setSpeedEi>
				right.setSpeed(25);
 290:	69 e1       	ldi	r22, 0x19	; 25
 292:	70 e0       	ldi	r23, 0x00	; 0
 294:	86 e0       	ldi	r24, 0x06	; 6
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	58 d2       	rcall	.+1200   	; 0x74a <_ZN5Motor8setSpeedEi>
				break;
 29a:	42 c0       	rjmp	.+132    	; 0x320 <__vector_9+0x120>
			
			case 0x04:
				left.setSpeed(25);
 29c:	69 e1       	ldi	r22, 0x19	; 25
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	52 d2       	rcall	.+1188   	; 0x74a <_ZN5Motor8setSpeedEi>
				right.setSpeed(25);
 2a6:	69 e1       	ldi	r22, 0x19	; 25
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	86 e0       	ldi	r24, 0x06	; 6
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	4d d2       	rcall	.+1178   	; 0x74a <_ZN5Motor8setSpeedEi>
				break;
 2b0:	37 c0       	rjmp	.+110    	; 0x320 <__vector_9+0x120>
			
			case 0x14:
				left.setSpeed(25);
 2b2:	69 e1       	ldi	r22, 0x19	; 25
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	47 d2       	rcall	.+1166   	; 0x74a <_ZN5Motor8setSpeedEi>
				right.setSpeed(22);
 2bc:	66 e1       	ldi	r22, 0x16	; 22
 2be:	70 e0       	ldi	r23, 0x00	; 0
 2c0:	86 e0       	ldi	r24, 0x06	; 6
 2c2:	91 e0       	ldi	r25, 0x01	; 1
 2c4:	42 d2       	rcall	.+1156   	; 0x74a <_ZN5Motor8setSpeedEi>
				break;
			
			case 0x10:
				left.setSpeed(22);
 2c6:	2c c0       	rjmp	.+88     	; 0x320 <__vector_9+0x120>
 2c8:	66 e1       	ldi	r22, 0x16	; 22
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	3c d2       	rcall	.+1144   	; 0x74a <_ZN5Motor8setSpeedEi>
				right.setSpeed(18);
 2d2:	62 e1       	ldi	r22, 0x12	; 18
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	86 e0       	ldi	r24, 0x06	; 6
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	37 d2       	rcall	.+1134   	; 0x74a <_ZN5Motor8setSpeedEi>
				break;
 2dc:	21 c0       	rjmp	.+66     	; 0x320 <__vector_9+0x120>
			
			case 0x00:
				if (sensor.oldData == 0x01)
 2de:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <sensor+0x6>
 2e2:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <sensor+0x7>
 2e6:	01 97       	sbiw	r24, 0x01	; 1
				{
					left.setSpeed(0);
 2e8:	59 f4       	brne	.+22     	; 0x300 <__vector_9+0x100>
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	2b d2       	rcall	.+1110   	; 0x74a <_ZN5Motor8setSpeedEi>
					right.setSpeed(18);
 2f4:	62 e1       	ldi	r22, 0x12	; 18
 2f6:	70 e0       	ldi	r23, 0x00	; 0
 2f8:	86 e0       	ldi	r24, 0x06	; 6
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	26 d2       	rcall	.+1100   	; 0x74a <_ZN5Motor8setSpeedEi>
 2fe:	10 c0       	rjmp	.+32     	; 0x320 <__vector_9+0x120>
				}
				
				else if (sensor.oldData == 0x10)
 300:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <sensor+0x6>
 304:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <sensor+0x7>
 308:	40 97       	sbiw	r24, 0x10	; 16
				{
					left.setSpeed(18);
 30a:	51 f4       	brne	.+20     	; 0x320 <__vector_9+0x120>
 30c:	62 e1       	ldi	r22, 0x12	; 18
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	1a d2       	rcall	.+1076   	; 0x74a <_ZN5Motor8setSpeedEi>
					right.setSpeed(0);
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	86 e0       	ldi	r24, 0x06	; 6
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	15 d2       	rcall	.+1066   	; 0x74a <_ZN5Motor8setSpeedEi>
 320:	eb e0       	ldi	r30, 0x0B	; 11
				break;
		}
		
	}
	
	if (sensor.result == sensor.maxData)
 322:	f1 e0       	ldi	r31, 0x01	; 1
 324:	20 85       	ldd	r18, Z+8	; 0x08
 326:	31 85       	ldd	r19, Z+9	; 0x09
 328:	82 85       	ldd	r24, Z+10	; 0x0a
 32a:	93 85       	ldd	r25, Z+11	; 0x0b
 32c:	28 17       	cp	r18, r24
 32e:	39 07       	cpc	r19, r25
 330:	29 f4       	brne	.+10     	; 0x33c <__vector_9+0x13c>
 332:	86 81       	ldd	r24, Z+6	; 0x06
	{
		sensor.oldData = sensor.oldData;
 334:	97 81       	ldd	r25, Z+7	; 0x07
 336:	97 83       	std	Z+7, r25	; 0x07
 338:	86 83       	std	Z+6, r24	; 0x06
 33a:	06 c0       	rjmp	.+12     	; 0x348 <__vector_9+0x148>
 33c:	eb e0       	ldi	r30, 0x0B	; 11
	}
	
	else
	{
		sensor.oldData = sensor.result;
 33e:	f1 e0       	ldi	r31, 0x01	; 1
 340:	80 85       	ldd	r24, Z+8	; 0x08
 342:	91 85       	ldd	r25, Z+9	; 0x09
 344:	97 83       	std	Z+7, r25	; 0x07
 346:	86 83       	std	Z+6, r24	; 0x06
 348:	ff 91       	pop	r31
	}
	
 34a:	ef 91       	pop	r30
 34c:	bf 91       	pop	r27
 34e:	af 91       	pop	r26
 350:	9f 91       	pop	r25
 352:	8f 91       	pop	r24
 354:	7f 91       	pop	r23
 356:	6f 91       	pop	r22
 358:	5f 91       	pop	r21
 35a:	4f 91       	pop	r20
 35c:	3f 91       	pop	r19
 35e:	2f 91       	pop	r18
 360:	0f 90       	pop	r0
 362:	0b be       	out	0x3b, r0	; 59
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <_GLOBAL__sub_I_sensor>:
 36e:	6f ef       	ldi	r22, 0xFF	; 255
 370:	7f ef       	ldi	r23, 0xFF	; 255
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	c3 ce       	rjmp	.-634    	; 0xfe <_Z41__static_initialization_and_destruction_0ii>
 378:	08 95       	ret

0000037a <_ZN3MCU9insertBitEib>:
	{
		ASKIIValue = decimal + 0x30;
	}
	
	return ASKIIValue;
}
 37a:	66 23       	and	r22, r22
 37c:	51 f0       	breq	.+20     	; 0x392 <_ZN3MCU9insertBitEib+0x18>
 37e:	21 e0       	ldi	r18, 0x01	; 1
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	a9 01       	movw	r20, r18
 384:	02 c0       	rjmp	.+4      	; 0x38a <_ZN3MCU9insertBitEib+0x10>
 386:	44 0f       	add	r20, r20
 388:	55 1f       	adc	r21, r21
 38a:	8a 95       	dec	r24
 38c:	e2 f7       	brpl	.-8      	; 0x386 <_ZN3MCU9insertBitEib+0xc>
 38e:	ca 01       	movw	r24, r20
 390:	08 95       	ret
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	08 95       	ret

00000398 <_ZN3MCU7Setting9beginPortEib>:
	
	int ddrValue;
	int portValue;
	
	// INPUT or OUTPUT
	if (isOutput == true)
 398:	66 23       	and	r22, r22
 39a:	11 f0       	breq	.+4      	; 0x3a0 <_ZN3MCU7Setting9beginPortEib+0x8>
	{
		ddrValue = 0xFF;
 39c:	2f ef       	ldi	r18, 0xFF	; 255
 39e:	01 c0       	rjmp	.+2      	; 0x3a2 <_ZN3MCU7Setting9beginPortEib+0xa>
		portValue = 0x00;
	}
	
	else
	{
		ddrValue = 0x00;
 3a0:	20 e0       	ldi	r18, 0x00	; 0
	}
	
	switch (port)
 3a2:	82 30       	cpi	r24, 0x02	; 2
 3a4:	91 05       	cpc	r25, r1
 3a6:	99 f0       	breq	.+38     	; 0x3ce <_ZN3MCU7Setting9beginPortEib+0x36>
 3a8:	2c f4       	brge	.+10     	; 0x3b4 <_ZN3MCU7Setting9beginPortEib+0x1c>
 3aa:	00 97       	sbiw	r24, 0x00	; 0
 3ac:	51 f0       	breq	.+20     	; 0x3c2 <_ZN3MCU7Setting9beginPortEib+0x2a>
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	59 f0       	breq	.+22     	; 0x3c8 <_ZN3MCU7Setting9beginPortEib+0x30>
 3b2:	08 95       	ret
 3b4:	84 30       	cpi	r24, 0x04	; 4
 3b6:	91 05       	cpc	r25, r1
 3b8:	81 f0       	breq	.+32     	; 0x3da <_ZN3MCU7Setting9beginPortEib+0x42>
 3ba:	64 f0       	brlt	.+24     	; 0x3d4 <_ZN3MCU7Setting9beginPortEib+0x3c>
 3bc:	05 97       	sbiw	r24, 0x05	; 5
 3be:	81 f0       	breq	.+32     	; 0x3e0 <_ZN3MCU7Setting9beginPortEib+0x48>
 3c0:	08 95       	ret
	{
		// PORTA
		case A:
			DDRA = ddrValue;
 3c2:	2a bb       	out	0x1a, r18	; 26
			PORTA = portValue;
 3c4:	1b ba       	out	0x1b, r1	; 27
			break;
 3c6:	08 95       	ret
		
		// PORTB
		case B:
			DDRB = ddrValue;
 3c8:	27 bb       	out	0x17, r18	; 23
			PORTB = portValue;
 3ca:	18 ba       	out	0x18, r1	; 24
			break;
 3cc:	08 95       	ret
		
		// PORTC
		case C:
			DDRC = ddrValue;
 3ce:	24 bb       	out	0x14, r18	; 20
			PORTC = portValue;
 3d0:	15 ba       	out	0x15, r1	; 21
			break;
 3d2:	08 95       	ret
		
		// PORTD
		case D:
			DDRD = ddrValue;
 3d4:	21 bb       	out	0x11, r18	; 17
			PORTD = portValue;
 3d6:	12 ba       	out	0x12, r1	; 18
			break;
 3d8:	08 95       	ret
		
		// PORTE
		case E:
			DDRE = ddrValue;
 3da:	22 b9       	out	0x02, r18	; 2
			PORTE = portValue;
 3dc:	13 b8       	out	0x03, r1	; 3
			break;
 3de:	08 95       	ret
		
		// PORTF
		case F:
			DDRF = ddrValue;
 3e0:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
			PORTF = portValue;
 3e4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3e8:	08 95       	ret

000003ea <_ZN3MCU7Setting11beginExtendEii>:
/*----------------------------------------//
		  Begin Extended Interrupt
//----------------------------------------*/

void MCU::Setting::beginExtend(int extendIndex, int extendMode)
{
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	eb 01       	movw	r28, r22
	
	EIMSK += insertBit(extendIndex, HIGH);
 3f0:	61 e0       	ldi	r22, 0x01	; 1
 3f2:	c3 df       	rcall	.-122    	; 0x37a <_ZN3MCU9insertBitEib>
 3f4:	99 b7       	in	r25, 0x39	; 57
 3f6:	89 0f       	add	r24, r25
 3f8:	89 bf       	out	0x39, r24	; 57
	
	switch (extendMode)
 3fa:	c1 30       	cpi	r28, 0x01	; 1
 3fc:	d1 05       	cpc	r29, r1
 3fe:	49 f0       	breq	.+18     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 400:	c2 30       	cpi	r28, 0x02	; 2
 402:	d1 05       	cpc	r29, r1
 404:	59 f0       	breq	.+22     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 406:	cd 2b       	or	r28, r29
 408:	69 f4       	brne	.+26     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	{
		case MAINTAIN:
			EICRA = 0x00;
 40a:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
			EICRB = 0x00;
 40e:	1a be       	out	0x3a, r1	; 58
			break;
 410:	09 c0       	rjmp	.+18     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		
		case DOWN:
			EICRA = 0xAA;
 412:	8a ea       	ldi	r24, 0xAA	; 170
 414:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
			EICRB = 0xAA;
 418:	8a bf       	out	0x3a, r24	; 58
			break;
 41a:	04 c0       	rjmp	.+8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		
		case UP:
			EICRA = 0xFF;
 41c:	8f ef       	ldi	r24, 0xFF	; 255
 41e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
			EICRB = 0xFF;
 422:	8a bf       	out	0x3a, r24	; 58
		
		default:
			break;
	}
	
}
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	08 95       	ret

0000042a <_ZN3MCU7Setting10beginTimerEii>:
//----------------------------------------*/

void MCU::Setting::beginTimer (int timerIndex, int timerMode)
{
	
	switch (timerIndex)
 42a:	81 30       	cpi	r24, 0x01	; 1
 42c:	91 05       	cpc	r25, r1
 42e:	09 f4       	brne	.+2      	; 0x432 <_ZN3MCU7Setting10beginTimerEii+0x8>
 430:	49 c0       	rjmp	.+146    	; 0x4c4 <_ZN3MCU7Setting10beginTimerEii+0x9a>
 432:	1c f4       	brge	.+6      	; 0x43a <_ZN3MCU7Setting10beginTimerEii+0x10>
 434:	89 2b       	or	r24, r25
 436:	41 f0       	breq	.+16     	; 0x448 <_ZN3MCU7Setting10beginTimerEii+0x1e>
 438:	08 95       	ret
 43a:	82 30       	cpi	r24, 0x02	; 2
 43c:	91 05       	cpc	r25, r1
 43e:	19 f1       	breq	.+70     	; 0x486 <_ZN3MCU7Setting10beginTimerEii+0x5c>
 440:	03 97       	sbiw	r24, 0x03	; 3
 442:	09 f4       	brne	.+2      	; 0x446 <_ZN3MCU7Setting10beginTimerEii+0x1c>
 444:	64 c0       	rjmp	.+200    	; 0x50e <_ZN3MCU7Setting10beginTimerEii+0xe4>
 446:	08 95       	ret
	{
		// TIMER INTERRUPT 0, 2 (8 BIT)
		case 0:
			if (timerMode == OVF)
 448:	64 30       	cpi	r22, 0x04	; 4
 44a:	71 05       	cpc	r23, r1
 44c:	59 f4       	brne	.+22     	; 0x464 <_ZN3MCU7Setting10beginTimerEii+0x3a>
			{
				TIMSK += insertBit(0, HIGH);
 44e:	61 e0       	ldi	r22, 0x01	; 1
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	92 df       	rcall	.-220    	; 0x37a <_ZN3MCU9insertBitEib>
 456:	97 b7       	in	r25, 0x37	; 55
 458:	89 0f       	add	r24, r25
 45a:	87 bf       	out	0x37, r24	; 55
				
				TCCR0 = 0x07;		// 1024, Normal Mode
 45c:	87 e0       	ldi	r24, 0x07	; 7
 45e:	83 bf       	out	0x33, r24	; 51
				TCNT0 = 0x00;		// Start Counting 0x00
 460:	12 be       	out	0x32, r1	; 50
 462:	08 95       	ret
			}
			
			else if (timerMode == COMP)
 464:	63 30       	cpi	r22, 0x03	; 3
 466:	71 05       	cpc	r23, r1
 468:	09 f0       	breq	.+2      	; 0x46c <_ZN3MCU7Setting10beginTimerEii+0x42>
 46a:	82 c0       	rjmp	.+260    	; 0x570 <_ZN3MCU7Setting10beginTimerEii+0x146>
			{
				TIMSK += insertBit(1, HIGH);
 46c:	61 e0       	ldi	r22, 0x01	; 1
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	83 df       	rcall	.-250    	; 0x37a <_ZN3MCU9insertBitEib>
 474:	97 b7       	in	r25, 0x37	; 55
 476:	89 0f       	add	r24, r25
 478:	87 bf       	out	0x37, r24	; 55
				
				TCCR0 = 0x0F;		// 1024, CTC Mode
 47a:	8f e0       	ldi	r24, 0x0F	; 15
 47c:	83 bf       	out	0x33, r24	; 51
				TCNT0 = 0x00;		// Start Counting 0x00
 47e:	12 be       	out	0x32, r1	; 50
				OCR0 = _OCR0;
 480:	8f ef       	ldi	r24, 0xFF	; 255
 482:	81 bf       	out	0x31, r24	; 49
 484:	08 95       	ret
			}
			
			break;
		
		case 2:
			if (timerMode == OVF)
 486:	64 30       	cpi	r22, 0x04	; 4
 488:	71 05       	cpc	r23, r1
 48a:	59 f4       	brne	.+22     	; 0x4a2 <_ZN3MCU7Setting10beginTimerEii+0x78>
			{
				TIMSK += insertBit(6, HIGH);
 48c:	61 e0       	ldi	r22, 0x01	; 1
 48e:	86 e0       	ldi	r24, 0x06	; 6
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	73 df       	rcall	.-282    	; 0x37a <_ZN3MCU9insertBitEib>
 494:	97 b7       	in	r25, 0x37	; 55
 496:	89 0f       	add	r24, r25
 498:	87 bf       	out	0x37, r24	; 55
				
				TCCR2 = 0x05;		// 1024, Normal Mode
 49a:	85 e0       	ldi	r24, 0x05	; 5
 49c:	85 bd       	out	0x25, r24	; 37
				TCNT2 = 0x00;		// Start Counting 0x00
 49e:	14 bc       	out	0x24, r1	; 36
 4a0:	08 95       	ret
			}
			
			else if (timerMode == COMP)
 4a2:	63 30       	cpi	r22, 0x03	; 3
 4a4:	71 05       	cpc	r23, r1
 4a6:	09 f0       	breq	.+2      	; 0x4aa <_ZN3MCU7Setting10beginTimerEii+0x80>
 4a8:	63 c0       	rjmp	.+198    	; 0x570 <_ZN3MCU7Setting10beginTimerEii+0x146>
			{
				TIMSK += insertBit(7, HIGH);
 4aa:	61 e0       	ldi	r22, 0x01	; 1
 4ac:	87 e0       	ldi	r24, 0x07	; 7
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	64 df       	rcall	.-312    	; 0x37a <_ZN3MCU9insertBitEib>
 4b2:	97 b7       	in	r25, 0x37	; 55
 4b4:	89 0f       	add	r24, r25
 4b6:	87 bf       	out	0x37, r24	; 55
				
				TCCR2 = 0x0D;		// 1024, CTC Mode
 4b8:	8d e0       	ldi	r24, 0x0D	; 13
 4ba:	85 bd       	out	0x25, r24	; 37
				TCNT2 = 0x00;		// Start Counting 0x00
 4bc:	14 bc       	out	0x24, r1	; 36
				OCR2 = _OCR2;
 4be:	80 ea       	ldi	r24, 0xA0	; 160
 4c0:	83 bd       	out	0x23, r24	; 35
 4c2:	08 95       	ret
			
			break;
		
		// TIMER INTERRUPT 1, 3 (16 BIT)
		case 1:
			if (timerMode == OVF)
 4c4:	64 30       	cpi	r22, 0x04	; 4
 4c6:	71 05       	cpc	r23, r1
			{
				TIMSK += insertBit(2, HIGH);
 4c8:	69 f4       	brne	.+26     	; 0x4e4 <_ZN3MCU7Setting10beginTimerEii+0xba>
 4ca:	61 e0       	ldi	r22, 0x01	; 1
 4cc:	82 e0       	ldi	r24, 0x02	; 2
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	54 df       	rcall	.-344    	; 0x37a <_ZN3MCU9insertBitEib>
 4d2:	97 b7       	in	r25, 0x37	; 55
 4d4:	89 0f       	add	r24, r25
 4d6:	87 bf       	out	0x37, r24	; 55
				
				TCCR1A = 0x00;
 4d8:	1f bc       	out	0x2f, r1	; 47
				TCCR1B = 0x05;		// 1024, Normal Mode
 4da:	85 e0       	ldi	r24, 0x05	; 5
 4dc:	8e bd       	out	0x2e, r24	; 46
				TCNT1H = 0x00;
 4de:	1d bc       	out	0x2d, r1	; 45
				TCNT1L = 0x00;		// Start Counting 0x0000
 4e0:	1c bc       	out	0x2c, r1	; 44
 4e2:	08 95       	ret
			}
			
			else if (timerMode == COMP)
 4e4:	63 30       	cpi	r22, 0x03	; 3
 4e6:	71 05       	cpc	r23, r1
 4e8:	09 f0       	breq	.+2      	; 0x4ec <_ZN3MCU7Setting10beginTimerEii+0xc2>
			{
				TIMSK += insertBit(4, HIGH);
 4ea:	42 c0       	rjmp	.+132    	; 0x570 <_ZN3MCU7Setting10beginTimerEii+0x146>
 4ec:	61 e0       	ldi	r22, 0x01	; 1
 4ee:	84 e0       	ldi	r24, 0x04	; 4
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	43 df       	rcall	.-378    	; 0x37a <_ZN3MCU9insertBitEib>
 4f4:	97 b7       	in	r25, 0x37	; 55
 4f6:	89 0f       	add	r24, r25
 4f8:	87 bf       	out	0x37, r24	; 55
				
				TCCR1A = 0x00;
 4fa:	1f bc       	out	0x2f, r1	; 47
				TCCR1B = 0x0D;		// 1024, CTC Mode
 4fc:	8d e0       	ldi	r24, 0x0D	; 13
 4fe:	8e bd       	out	0x2e, r24	; 46
				TCNT1H = 0x00;
 500:	1d bc       	out	0x2d, r1	; 45
				TCNT1L = 0x00;		// Start Counting 0x0000
 502:	1c bc       	out	0x2c, r1	; 44
				OCR1AH = _OCR1AH;
 504:	8d e3       	ldi	r24, 0x3D	; 61
 506:	8b bd       	out	0x2b, r24	; 43
				OCR1AL = _OCR1AL;
 508:	89 e0       	ldi	r24, 0x09	; 9
 50a:	8a bd       	out	0x2a, r24	; 42
 50c:	08 95       	ret
			}
			
			break;
		
		case 3:
			if (timerMode == OVF)
 50e:	64 30       	cpi	r22, 0x04	; 4
 510:	71 05       	cpc	r23, r1
			{
				ETIMSK += insertBit(2, HIGH);
 512:	99 f4       	brne	.+38     	; 0x53a <_ZN3MCU7Setting10beginTimerEii+0x110>
 514:	61 e0       	ldi	r22, 0x01	; 1
 516:	82 e0       	ldi	r24, 0x02	; 2
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	2f df       	rcall	.-418    	; 0x37a <_ZN3MCU9insertBitEib>
 51c:	ed e7       	ldi	r30, 0x7D	; 125
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	90 81       	ld	r25, Z
 522:	89 0f       	add	r24, r25
 524:	80 83       	st	Z, r24
				
				TCCR3A = 0x00;
 526:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
				TCCR3B = 0x05;		// 1024, Normal Mode
 52a:	85 e0       	ldi	r24, 0x05	; 5
 52c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				TCNT3H = 0x00;
 530:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
				TCNT3L = 0x00;		// Start Counting 0x0000
 534:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			}
			
			else if (timerMode == COMP)
 538:	08 95       	ret
 53a:	63 30       	cpi	r22, 0x03	; 3
 53c:	71 05       	cpc	r23, r1
			{
				ETIMSK += insertBit(4, HIGH);
 53e:	c1 f4       	brne	.+48     	; 0x570 <_ZN3MCU7Setting10beginTimerEii+0x146>
 540:	61 e0       	ldi	r22, 0x01	; 1
 542:	84 e0       	ldi	r24, 0x04	; 4
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	19 df       	rcall	.-462    	; 0x37a <_ZN3MCU9insertBitEib>
 548:	ed e7       	ldi	r30, 0x7D	; 125
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	90 81       	ld	r25, Z
 54e:	89 0f       	add	r24, r25
 550:	80 83       	st	Z, r24
				
				TCCR3A = 0x00;
 552:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
				TCCR3B = 0x0D;		// 1024, CTC Mode
 556:	8d e0       	ldi	r24, 0x0D	; 13
 558:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				TCNT3H = 0x00;
 55c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
				TCNT3L = 0x00;		// Start Counting 0x0000
 560:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				OCR3AH = _OCR3AH;
 564:	8d e3       	ldi	r24, 0x3D	; 61
 566:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
				OCR3AL = _OCR3AL;
 56a:	89 e0       	ldi	r24, 0x09	; 9
 56c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 570:	08 95       	ret

00000572 <_ZN3MCU7Setting8beginPWMEii>:
/*----------------------------------------//
			  Begin Timer PWM
//----------------------------------------*/

void MCU::Setting::beginPWM(int PWMIndex, int PWMMode)
{
 572:	0f 93       	push	r16
 574:	1f 93       	push	r17
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	eb 01       	movw	r28, r22
	
	int correctValue = 0x04;		// 256, Phase Correct PWM (8Bit)
	int fastValue = 0x0C;			// 256, Fast PWM Mode (8Bit)
	
	switch (PWMIndex)
 57c:	88 30       	cpi	r24, 0x08	; 8
 57e:	91 05       	cpc	r25, r1
 580:	08 f0       	brcs	.+2      	; 0x584 <_ZN3MCU7Setting8beginPWMEii+0x12>
 582:	81 c0       	rjmp	.+258    	; 0x686 <_ZN3MCU7Setting8beginPWMEii+0x114>
 584:	fc 01       	movw	r30, r24
 586:	ea 5b       	subi	r30, 0xBA	; 186
 588:	ff 4f       	sbci	r31, 0xFF	; 255
 58a:	9d c2       	rjmp	.+1338   	; 0xac6 <__tablejump2__>
	{
		// TIMER PWM 0, 2 (8 BIT)
		case OC0:
			if (PWMMode == CORRECT)
 58c:	68 30       	cpi	r22, 0x08	; 8
 58e:	71 05       	cpc	r23, r1
 590:	21 f4       	brne	.+8      	; 0x59a <_ZN3MCU7Setting8beginPWMEii+0x28>
			{
				TCCR0 = 0x66;		// 256, Phase Correct PWM
 592:	86 e6       	ldi	r24, 0x66	; 102
 594:	83 bf       	out	0x33, r24	; 51
				TCNT0 = 0x00;		// Start Counting 0x00
 596:	12 be       	out	0x32, r1	; 50
 598:	76 c0       	rjmp	.+236    	; 0x686 <_ZN3MCU7Setting8beginPWMEii+0x114>
			}
			
			else if (PWMMode == FAST)
 59a:	69 30       	cpi	r22, 0x09	; 9
 59c:	71 05       	cpc	r23, r1
 59e:	09 f0       	breq	.+2      	; 0x5a2 <_ZN3MCU7Setting8beginPWMEii+0x30>
 5a0:	72 c0       	rjmp	.+228    	; 0x686 <_ZN3MCU7Setting8beginPWMEii+0x114>
			{
				TCCR0 = 0x6E;		// 256, Fast PWM Mode
 5a2:	8e e6       	ldi	r24, 0x6E	; 110
 5a4:	83 bf       	out	0x33, r24	; 51
				TCNT0 = 0x00;		// Start Counting 0x00
 5a6:	12 be       	out	0x32, r1	; 50
 5a8:	6e c0       	rjmp	.+220    	; 0x686 <_ZN3MCU7Setting8beginPWMEii+0x114>
			}
			
			break;
		
		case OC2:
			if (PWMMode == CORRECT)
 5aa:	68 30       	cpi	r22, 0x08	; 8
 5ac:	71 05       	cpc	r23, r1
 5ae:	21 f4       	brne	.+8      	; 0x5b8 <_ZN3MCU7Setting8beginPWMEii+0x46>
			{
				TCCR2 = 0x64;		// 256, Phase Correct PWM
 5b0:	84 e6       	ldi	r24, 0x64	; 100
 5b2:	85 bd       	out	0x25, r24	; 37
				TCNT2 = 0x00;		// Start Counting 0x00
 5b4:	14 bc       	out	0x24, r1	; 36
 5b6:	67 c0       	rjmp	.+206    	; 0x686 <_ZN3MCU7Setting8beginPWMEii+0x114>
			}
			
			else if (PWMMode == FAST)
 5b8:	69 30       	cpi	r22, 0x09	; 9
 5ba:	71 05       	cpc	r23, r1
 5bc:	09 f0       	breq	.+2      	; 0x5c0 <_ZN3MCU7Setting8beginPWMEii+0x4e>
 5be:	63 c0       	rjmp	.+198    	; 0x686 <_ZN3MCU7Setting8beginPWMEii+0x114>
			{
				TCCR2 = 0x6C;		// 256, Fast PWM Mode
 5c0:	8c e6       	ldi	r24, 0x6C	; 108
 5c2:	85 bd       	out	0x25, r24	; 37
				TCNT2 = 0x00;		// Start Counting 0x00
 5c4:	14 bc       	out	0x24, r1	; 36
 5c6:	5f c0       	rjmp	.+190    	; 0x686 <_ZN3MCU7Setting8beginPWMEii+0x114>
			
			break;
		
		// TIMER PWM 1, 3 (8, 9, 10 BIT)
		case OC1A:
			TCCR1A |= insertBit(0, HIGH) | insertBit(7, HIGH);
 5c8:	61 e0       	ldi	r22, 0x01	; 1
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	d5 de       	rcall	.-598    	; 0x37a <_ZN3MCU9insertBitEib>
 5d0:	8c 01       	movw	r16, r24
 5d2:	61 e0       	ldi	r22, 0x01	; 1
 5d4:	87 e0       	ldi	r24, 0x07	; 7
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	d0 de       	rcall	.-608    	; 0x37a <_ZN3MCU9insertBitEib>
 5da:	2f b5       	in	r18, 0x2f	; 47
 5dc:	80 2b       	or	r24, r16
 5de:	91 2b       	or	r25, r17
 5e0:	82 2b       	or	r24, r18
 5e2:	8f bd       	out	0x2f, r24	; 47
			break;
 5e4:	50 c0       	rjmp	.+160    	; 0x686 <_ZN3MCU7Setting8beginPWMEii+0x114>
		
		case OC1B:
			TCCR1A |= insertBit(0, HIGH) | insertBit(5, HIGH);
 5e6:	61 e0       	ldi	r22, 0x01	; 1
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	c6 de       	rcall	.-628    	; 0x37a <_ZN3MCU9insertBitEib>
 5ee:	8c 01       	movw	r16, r24
 5f0:	61 e0       	ldi	r22, 0x01	; 1
 5f2:	85 e0       	ldi	r24, 0x05	; 5
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	c1 de       	rcall	.-638    	; 0x37a <_ZN3MCU9insertBitEib>
 5f8:	2f b5       	in	r18, 0x2f	; 47
 5fa:	80 2b       	or	r24, r16
 5fc:	91 2b       	or	r25, r17
 5fe:	82 2b       	or	r24, r18
 600:	8f bd       	out	0x2f, r24	; 47
			break;
 602:	41 c0       	rjmp	.+130    	; 0x686 <_ZN3MCU7Setting8beginPWMEii+0x114>
		
		case OC1C:
			TCCR1A |= insertBit(0, HIGH) | insertBit(3, HIGH);
 604:	61 e0       	ldi	r22, 0x01	; 1
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	b7 de       	rcall	.-658    	; 0x37a <_ZN3MCU9insertBitEib>
 60c:	8c 01       	movw	r16, r24
 60e:	61 e0       	ldi	r22, 0x01	; 1
 610:	83 e0       	ldi	r24, 0x03	; 3
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	b2 de       	rcall	.-668    	; 0x37a <_ZN3MCU9insertBitEib>
 616:	2f b5       	in	r18, 0x2f	; 47
 618:	80 2b       	or	r24, r16
 61a:	91 2b       	or	r25, r17
 61c:	82 2b       	or	r24, r18
 61e:	8f bd       	out	0x2f, r24	; 47
			break;
 620:	32 c0       	rjmp	.+100    	; 0x686 <_ZN3MCU7Setting8beginPWMEii+0x114>
		
		case OC3A:
			TCCR3A |= insertBit(0, HIGH) | insertBit(7, HIGH);
 622:	61 e0       	ldi	r22, 0x01	; 1
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	a8 de       	rcall	.-688    	; 0x37a <_ZN3MCU9insertBitEib>
 62a:	8c 01       	movw	r16, r24
 62c:	61 e0       	ldi	r22, 0x01	; 1
 62e:	87 e0       	ldi	r24, 0x07	; 7
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	a3 de       	rcall	.-698    	; 0x37a <_ZN3MCU9insertBitEib>
 634:	eb e8       	ldi	r30, 0x8B	; 139
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	20 81       	ld	r18, Z
 63a:	80 2b       	or	r24, r16
 63c:	91 2b       	or	r25, r17
 63e:	82 2b       	or	r24, r18
 640:	80 83       	st	Z, r24
			break;
		
		case OC3B:
			TCCR3A |= insertBit(0, HIGH) | insertBit(5, HIGH);
 642:	21 c0       	rjmp	.+66     	; 0x686 <_ZN3MCU7Setting8beginPWMEii+0x114>
 644:	61 e0       	ldi	r22, 0x01	; 1
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	97 de       	rcall	.-722    	; 0x37a <_ZN3MCU9insertBitEib>
 64c:	8c 01       	movw	r16, r24
 64e:	61 e0       	ldi	r22, 0x01	; 1
 650:	85 e0       	ldi	r24, 0x05	; 5
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	92 de       	rcall	.-732    	; 0x37a <_ZN3MCU9insertBitEib>
 656:	eb e8       	ldi	r30, 0x8B	; 139
 658:	f0 e0       	ldi	r31, 0x00	; 0
 65a:	20 81       	ld	r18, Z
 65c:	80 2b       	or	r24, r16
 65e:	91 2b       	or	r25, r17
 660:	82 2b       	or	r24, r18
			break;
 662:	80 83       	st	Z, r24
		
		case OC3C:
			TCCR3A |= insertBit(0, HIGH) | insertBit(3, HIGH);
 664:	10 c0       	rjmp	.+32     	; 0x686 <_ZN3MCU7Setting8beginPWMEii+0x114>
 666:	61 e0       	ldi	r22, 0x01	; 1
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	86 de       	rcall	.-756    	; 0x37a <_ZN3MCU9insertBitEib>
 66e:	8c 01       	movw	r16, r24
 670:	61 e0       	ldi	r22, 0x01	; 1
 672:	83 e0       	ldi	r24, 0x03	; 3
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	81 de       	rcall	.-766    	; 0x37a <_ZN3MCU9insertBitEib>
 678:	eb e8       	ldi	r30, 0x8B	; 139
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	20 81       	ld	r18, Z
 67e:	80 2b       	or	r24, r16
 680:	91 2b       	or	r25, r17
 682:	82 2b       	or	r24, r18
 684:	80 83       	st	Z, r24
 686:	8e b5       	in	r24, 0x2e	; 46
		
		default:
			break;
	}
	
	if (TCCR1B == 0x00)
 688:	81 11       	cpse	r24, r1
 68a:	0f c0       	rjmp	.+30     	; 0x6aa <_ZN3MCU7Setting8beginPWMEii+0x138>
 68c:	c8 30       	cpi	r28, 0x08	; 8
	{
		if (PWMMode == CORRECT)
 68e:	d1 05       	cpc	r29, r1
 690:	29 f4       	brne	.+10     	; 0x69c <_ZN3MCU7Setting8beginPWMEii+0x12a>
 692:	84 e0       	ldi	r24, 0x04	; 4
		{
			TCCR1B = correctValue;
 694:	8e bd       	out	0x2e, r24	; 46
 696:	1d bc       	out	0x2d, r1	; 45
			TCNT1H = 0x00;
 698:	1c bc       	out	0x2c, r1	; 44
			TCNT1L = 0x00;
 69a:	1f c0       	rjmp	.+62     	; 0x6da <_ZN3MCU7Setting8beginPWMEii+0x168>
 69c:	29 97       	sbiw	r28, 0x09	; 9
		}
		
		else if (PWMMode == FAST)
 69e:	e9 f4       	brne	.+58     	; 0x6da <_ZN3MCU7Setting8beginPWMEii+0x168>
 6a0:	8c e0       	ldi	r24, 0x0C	; 12
		{
			TCCR1B = fastValue;
 6a2:	8e bd       	out	0x2e, r24	; 46
 6a4:	1d bc       	out	0x2d, r1	; 45
			TCNT1H = 0x00;
 6a6:	1c bc       	out	0x2c, r1	; 44
			TCNT1L = 0x00;
 6a8:	18 c0       	rjmp	.+48     	; 0x6da <_ZN3MCU7Setting8beginPWMEii+0x168>
 6aa:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		}
	}
	
	else if (TCCR3B == 0x00)
 6ae:	81 11       	cpse	r24, r1
 6b0:	14 c0       	rjmp	.+40     	; 0x6da <_ZN3MCU7Setting8beginPWMEii+0x168>
 6b2:	c8 30       	cpi	r28, 0x08	; 8
	{
		if (PWMMode == CORRECT)
 6b4:	d1 05       	cpc	r29, r1
 6b6:	41 f4       	brne	.+16     	; 0x6c8 <_ZN3MCU7Setting8beginPWMEii+0x156>
 6b8:	84 e0       	ldi	r24, 0x04	; 4
		{
			TCCR3B = correctValue;
 6ba:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 6be:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
			TCNT3H = 0x00;
 6c2:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			TCNT3L = 0x00;
 6c6:	09 c0       	rjmp	.+18     	; 0x6da <_ZN3MCU7Setting8beginPWMEii+0x168>
 6c8:	29 97       	sbiw	r28, 0x09	; 9
		}
		
		else if (PWMMode == FAST)
 6ca:	39 f4       	brne	.+14     	; 0x6da <_ZN3MCU7Setting8beginPWMEii+0x168>
 6cc:	8c e0       	ldi	r24, 0x0C	; 12
		{
			TCCR3B = fastValue;
 6ce:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 6d2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
			TCNT3H = 0x00;
 6d6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			TCNT3L = 0x00;
 6da:	df 91       	pop	r29
		}
	}
	
 6dc:	cf 91       	pop	r28
 6de:	1f 91       	pop	r17
 6e0:	0f 91       	pop	r16
 6e2:	08 95       	ret

000006e4 <_ZN5Motor9attachPinEi>:
//----------------------------------------*/

void Motor::attachPin(int pinValue)
{
	
	switch (m_MotorPin)
 6e4:	dc 01       	movw	r26, r24
 6e6:	ed 91       	ld	r30, X+
 6e8:	fc 91       	ld	r31, X
 6ea:	e8 30       	cpi	r30, 0x08	; 8
 6ec:	f1 05       	cpc	r31, r1
 6ee:	60 f5       	brcc	.+88     	; 0x748 <_ZN5Motor9attachPinEi+0x64>
 6f0:	e2 5b       	subi	r30, 0xB2	; 178
 6f2:	ff 4f       	sbci	r31, 0xFF	; 255
 6f4:	e8 c1       	rjmp	.+976    	; 0xac6 <__tablejump2__>
	{
		// OC0
		case OC0:
			OCR0 = pinValue;
 6f6:	61 bf       	out	0x31, r22	; 49
			break;
 6f8:	08 95       	ret
		
		// OC1A
		case OC1A:
			OCR1A = pinValue;
 6fa:	86 2f       	mov	r24, r22
 6fc:	97 2f       	mov	r25, r23
 6fe:	9b bd       	out	0x2b, r25	; 43
 700:	8a bd       	out	0x2a, r24	; 42
			break;
 702:	08 95       	ret
		
		// OC1B
		case OC1B:
			OCR1B = pinValue;
 704:	86 2f       	mov	r24, r22
 706:	97 2f       	mov	r25, r23
 708:	99 bd       	out	0x29, r25	; 41
 70a:	88 bd       	out	0x28, r24	; 40
			break;
 70c:	08 95       	ret
		
		// OC1C
		case OC1C:
			OCR1C = pinValue;
 70e:	86 2f       	mov	r24, r22
 710:	97 2f       	mov	r25, r23
 712:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 716:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
			break;
 71a:	08 95       	ret
		
		// OC2
		case OC2:
			OCR2 = pinValue;
 71c:	63 bd       	out	0x23, r22	; 35
			break;
 71e:	08 95       	ret
		
		// OC3A
		case OC3A:
			OCR3A = pinValue;
 720:	86 2f       	mov	r24, r22
 722:	97 2f       	mov	r25, r23
 724:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 728:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
			break;
 72c:	08 95       	ret
		
		// OC3B
		case OC3B:
			OCR3B = pinValue;
 72e:	86 2f       	mov	r24, r22
 730:	97 2f       	mov	r25, r23
 732:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 736:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
			break;
 73a:	08 95       	ret
		
		// OC3C
		case OC3C:
			OCR3C = pinValue;
 73c:	86 2f       	mov	r24, r22
 73e:	97 2f       	mov	r25, r23
 740:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
 744:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
 748:	08 95       	ret

0000074a <_ZN5Motor8setSpeedEi>:
/*----------------------------------------//
			  Set Motor Speed
//----------------------------------------*/

void Motor::setSpeed (int speedValue)
{
 74a:	ef 92       	push	r14
 74c:	ff 92       	push	r15
 74e:	0f 93       	push	r16
 750:	1f 93       	push	r17
 752:	cf 93       	push	r28
 754:	df 93       	push	r29
 756:	7c 01       	movw	r14, r24
 758:	8b 01       	movw	r16, r22
	
	for (int i=0; i<=100; i++)
 75a:	c0 e0       	ldi	r28, 0x00	; 0
 75c:	d0 e0       	ldi	r29, 0x00	; 0
 75e:	c5 36       	cpi	r28, 0x65	; 101
 760:	d1 05       	cpc	r29, r1
 762:	a4 f4       	brge	.+40     	; 0x78c <_ZN5Motor8setSpeedEi+0x42>
	{
		if (speedValue == i)
 764:	c0 17       	cp	r28, r16
 766:	d1 07       	cpc	r29, r17
 768:	79 f4       	brne	.+30     	; 0x788 <_ZN5Motor8setSpeedEi+0x3e>
		{
			m_Speed = i * 2.55;
 76a:	be 01       	movw	r22, r28
 76c:	0d 2e       	mov	r0, r29
 76e:	00 0c       	add	r0, r0
 770:	88 0b       	sbc	r24, r24
 772:	99 0b       	sbc	r25, r25
 774:	b9 d0       	rcall	.+370    	; 0x8e8 <__floatsisf>
 776:	23 e3       	ldi	r18, 0x33	; 51
 778:	33 e3       	ldi	r19, 0x33	; 51
 77a:	43 e2       	ldi	r20, 0x23	; 35
 77c:	50 e4       	ldi	r21, 0x40	; 64
 77e:	18 d1       	rcall	.+560    	; 0x9b0 <__mulsf3>
 780:	85 d0       	rcall	.+266    	; 0x88c <__fixunssfsi>
 782:	f7 01       	movw	r30, r14
 784:	73 83       	std	Z+3, r23	; 0x03
 786:	62 83       	std	Z+2, r22	; 0x02
//----------------------------------------*/

void Motor::setSpeed (int speedValue)
{
	
	for (int i=0; i<=100; i++)
 788:	21 96       	adiw	r28, 0x01	; 1
 78a:	e9 cf       	rjmp	.-46     	; 0x75e <_ZN5Motor8setSpeedEi+0x14>
		{
			m_Speed = i * 2.55;
		}
	}
	
}
 78c:	df 91       	pop	r29
 78e:	cf 91       	pop	r28
 790:	1f 91       	pop	r17
 792:	0f 91       	pop	r16
 794:	ff 90       	pop	r15
 796:	ef 90       	pop	r14
 798:	08 95       	ret

0000079a <_ZN5Motor5startEv>:
/*----------------------------------------//
			 	Start Motor
//----------------------------------------*/

void Motor::start (void)
{
 79a:	cf 93       	push	r28
 79c:	df 93       	push	r29
 79e:	ec 01       	movw	r28, r24
	attachPin(m_Speed);
 7a0:	6a 81       	ldd	r22, Y+2	; 0x02
 7a2:	7b 81       	ldd	r23, Y+3	; 0x03
 7a4:	9f df       	rcall	.-194    	; 0x6e4 <_ZN5Motor9attachPinEi>
	m_isOn = true;
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	8c 83       	std	Y+4, r24	; 0x04
}
 7aa:	df 91       	pop	r29
 7ac:	cf 91       	pop	r28
 7ae:	08 95       	ret

000007b0 <_ZN5Motor4stopEv>:
/*----------------------------------------//
			 	 Stop Motor
//----------------------------------------*/

void Motor::stop (void)
{
 7b0:	cf 93       	push	r28
 7b2:	df 93       	push	r29
 7b4:	ec 01       	movw	r28, r24
    attachPin(0);
 7b6:	60 e0       	ldi	r22, 0x00	; 0
 7b8:	70 e0       	ldi	r23, 0x00	; 0
 7ba:	94 df       	rcall	.-216    	; 0x6e4 <_ZN5Motor9attachPinEi>
    m_isOn = false;
 7bc:	1c 82       	std	Y+4, r1	; 0x04
 7be:	df 91       	pop	r29
 7c0:	cf 91       	pop	r28
 7c2:	08 95       	ret

000007c4 <_ZN2SW6setMaxEi>:
			 Set Sensor Value
//----------------------------------------*/

void SW::setMax(int maxValue)
{
	maxData = maxValue;
 7c4:	fc 01       	movw	r30, r24
 7c6:	73 87       	std	Z+11, r23	; 0x0b
 7c8:	62 87       	std	Z+10, r22	; 0x0a
 7ca:	08 95       	ret

000007cc <_ZN2SW4initEv>:
/*----------------------------------------//
			 Initialize Switch
//----------------------------------------*/

void SW::init (void)
{
 7cc:	fc 01       	movw	r30, r24
	
	switch (m_SwitchPort)
 7ce:	80 81       	ld	r24, Z
 7d0:	91 81       	ldd	r25, Z+1	; 0x01
 7d2:	82 30       	cpi	r24, 0x02	; 2
 7d4:	91 05       	cpc	r25, r1
 7d6:	b9 f0       	breq	.+46     	; 0x806 <_ZN2SW4initEv+0x3a>
 7d8:	28 f4       	brcc	.+10     	; 0x7e4 <_ZN2SW4initEv+0x18>
 7da:	00 97       	sbiw	r24, 0x00	; 0
 7dc:	51 f0       	breq	.+20     	; 0x7f2 <_ZN2SW4initEv+0x26>
 7de:	01 97       	sbiw	r24, 0x01	; 1
 7e0:	69 f0       	breq	.+26     	; 0x7fc <_ZN2SW4initEv+0x30>
 7e2:	24 c0       	rjmp	.+72     	; 0x82c <_ZN2SW4initEv+0x60>
 7e4:	84 30       	cpi	r24, 0x04	; 4
 7e6:	91 05       	cpc	r25, r1
 7e8:	c1 f0       	breq	.+48     	; 0x81a <_ZN2SW4initEv+0x4e>
 7ea:	90 f0       	brcs	.+36     	; 0x810 <_ZN2SW4initEv+0x44>
 7ec:	05 97       	sbiw	r24, 0x05	; 5
 7ee:	d1 f0       	breq	.+52     	; 0x824 <_ZN2SW4initEv+0x58>
 7f0:	1d c0       	rjmp	.+58     	; 0x82c <_ZN2SW4initEv+0x60>
	{
		// PORTA
		case A:
			newData = PINA;
 7f2:	89 b3       	in	r24, 0x19	; 25
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	95 83       	std	Z+5, r25	; 0x05
 7f8:	84 83       	std	Z+4, r24	; 0x04
			break;
 7fa:	18 c0       	rjmp	.+48     	; 0x82c <_ZN2SW4initEv+0x60>
		
		// PORTB
		case B:
			newData = PINB;
 7fc:	86 b3       	in	r24, 0x16	; 22
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	95 83       	std	Z+5, r25	; 0x05
 802:	84 83       	std	Z+4, r24	; 0x04
			break;
 804:	13 c0       	rjmp	.+38     	; 0x82c <_ZN2SW4initEv+0x60>
		
		// PORTC
		case C:
			newData = PINC;
 806:	83 b3       	in	r24, 0x13	; 19
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	95 83       	std	Z+5, r25	; 0x05
 80c:	84 83       	std	Z+4, r24	; 0x04
			break;
 80e:	0e c0       	rjmp	.+28     	; 0x82c <_ZN2SW4initEv+0x60>
		
		// PORTD
		case D:
			newData = PIND;
 810:	80 b3       	in	r24, 0x10	; 16
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	95 83       	std	Z+5, r25	; 0x05
 816:	84 83       	std	Z+4, r24	; 0x04
			break;
 818:	09 c0       	rjmp	.+18     	; 0x82c <_ZN2SW4initEv+0x60>
		
		// PORTE
		case E:
			newData = PINE;
 81a:	81 b1       	in	r24, 0x01	; 1
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	95 83       	std	Z+5, r25	; 0x05
 820:	84 83       	std	Z+4, r24	; 0x04
			break;
 822:	04 c0       	rjmp	.+8      	; 0x82c <_ZN2SW4initEv+0x60>
		
		// PORTF
		case F:
			newData = PINF;
 824:	80 b1       	in	r24, 0x00	; 0
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	95 83       	std	Z+5, r25	; 0x05
 82a:	84 83       	std	Z+4, r24	; 0x04
		
		default:
			break;
	}
	
	switch (m_SwitchMode)
 82c:	82 81       	ldd	r24, Z+2	; 0x02
 82e:	93 81       	ldd	r25, Z+3	; 0x03
 830:	81 30       	cpi	r24, 0x01	; 1
 832:	91 05       	cpc	r25, r1
 834:	99 f0       	breq	.+38     	; 0x85c <_ZN2SW4initEv+0x90>
 836:	18 f0       	brcs	.+6      	; 0x83e <_ZN2SW4initEv+0x72>
 838:	02 97       	sbiw	r24, 0x02	; 2
 83a:	f9 f0       	breq	.+62     	; 0x87a <_ZN2SW4initEv+0xae>
 83c:	08 95       	ret
	{
		// REVERSAL
		case REVERSAL:
			result = oldData & ~newData;
 83e:	26 81       	ldd	r18, Z+6	; 0x06
 840:	37 81       	ldd	r19, Z+7	; 0x07
 842:	84 81       	ldd	r24, Z+4	; 0x04
 844:	95 81       	ldd	r25, Z+5	; 0x05
 846:	80 95       	com	r24
 848:	90 95       	com	r25
 84a:	82 23       	and	r24, r18
 84c:	93 23       	and	r25, r19
 84e:	91 87       	std	Z+9, r25	; 0x09
 850:	80 87       	std	Z+8, r24	; 0x08
			oldData = newData;
 852:	84 81       	ldd	r24, Z+4	; 0x04
 854:	95 81       	ldd	r25, Z+5	; 0x05
 856:	97 83       	std	Z+7, r25	; 0x07
 858:	86 83       	std	Z+6, r24	; 0x06
			break;
 85a:	08 95       	ret
		
		// NONREVERSAL
		case NONREVERSAL:
			result = oldData & newData;
 85c:	26 81       	ldd	r18, Z+6	; 0x06
 85e:	37 81       	ldd	r19, Z+7	; 0x07
 860:	84 81       	ldd	r24, Z+4	; 0x04
 862:	95 81       	ldd	r25, Z+5	; 0x05
 864:	82 23       	and	r24, r18
 866:	93 23       	and	r25, r19
 868:	91 87       	std	Z+9, r25	; 0x09
 86a:	80 87       	std	Z+8, r24	; 0x08
			oldData = ~newData;
 86c:	84 81       	ldd	r24, Z+4	; 0x04
 86e:	95 81       	ldd	r25, Z+5	; 0x05
 870:	80 95       	com	r24
 872:	90 95       	com	r25
 874:	97 83       	std	Z+7, r25	; 0x07
 876:	86 83       	std	Z+6, r24	; 0x06
			break;
 878:	08 95       	ret
		
		// SENSER
		case SENSOR:
			result = newData & maxData;
 87a:	24 81       	ldd	r18, Z+4	; 0x04
 87c:	35 81       	ldd	r19, Z+5	; 0x05
 87e:	82 85       	ldd	r24, Z+10	; 0x0a
 880:	93 85       	ldd	r25, Z+11	; 0x0b
 882:	82 23       	and	r24, r18
 884:	93 23       	and	r25, r19
 886:	91 87       	std	Z+9, r25	; 0x09
 888:	80 87       	std	Z+8, r24	; 0x08
 88a:	08 95       	ret

0000088c <__fixunssfsi>:
 88c:	70 d0       	rcall	.+224    	; 0x96e <__fp_splitA>
 88e:	88 f0       	brcs	.+34     	; 0x8b2 <__fixunssfsi+0x26>
 890:	9f 57       	subi	r25, 0x7F	; 127
 892:	90 f0       	brcs	.+36     	; 0x8b8 <__fixunssfsi+0x2c>
 894:	b9 2f       	mov	r27, r25
 896:	99 27       	eor	r25, r25
 898:	b7 51       	subi	r27, 0x17	; 23
 89a:	a0 f0       	brcs	.+40     	; 0x8c4 <__fixunssfsi+0x38>
 89c:	d1 f0       	breq	.+52     	; 0x8d2 <__fixunssfsi+0x46>
 89e:	66 0f       	add	r22, r22
 8a0:	77 1f       	adc	r23, r23
 8a2:	88 1f       	adc	r24, r24
 8a4:	99 1f       	adc	r25, r25
 8a6:	1a f0       	brmi	.+6      	; 0x8ae <__fixunssfsi+0x22>
 8a8:	ba 95       	dec	r27
 8aa:	c9 f7       	brne	.-14     	; 0x89e <__fixunssfsi+0x12>
 8ac:	12 c0       	rjmp	.+36     	; 0x8d2 <__fixunssfsi+0x46>
 8ae:	b1 30       	cpi	r27, 0x01	; 1
 8b0:	81 f0       	breq	.+32     	; 0x8d2 <__fixunssfsi+0x46>
 8b2:	77 d0       	rcall	.+238    	; 0x9a2 <__fp_zero>
 8b4:	b1 e0       	ldi	r27, 0x01	; 1
 8b6:	08 95       	ret
 8b8:	74 c0       	rjmp	.+232    	; 0x9a2 <__fp_zero>
 8ba:	67 2f       	mov	r22, r23
 8bc:	78 2f       	mov	r23, r24
 8be:	88 27       	eor	r24, r24
 8c0:	b8 5f       	subi	r27, 0xF8	; 248
 8c2:	39 f0       	breq	.+14     	; 0x8d2 <__fixunssfsi+0x46>
 8c4:	b9 3f       	cpi	r27, 0xF9	; 249
 8c6:	cc f3       	brlt	.-14     	; 0x8ba <__fixunssfsi+0x2e>
 8c8:	86 95       	lsr	r24
 8ca:	77 95       	ror	r23
 8cc:	67 95       	ror	r22
 8ce:	b3 95       	inc	r27
 8d0:	d9 f7       	brne	.-10     	; 0x8c8 <__fixunssfsi+0x3c>
 8d2:	3e f4       	brtc	.+14     	; 0x8e2 <__fixunssfsi+0x56>
 8d4:	90 95       	com	r25
 8d6:	80 95       	com	r24
 8d8:	70 95       	com	r23
 8da:	61 95       	neg	r22
 8dc:	7f 4f       	sbci	r23, 0xFF	; 255
 8de:	8f 4f       	sbci	r24, 0xFF	; 255
 8e0:	9f 4f       	sbci	r25, 0xFF	; 255
 8e2:	08 95       	ret

000008e4 <__floatunsisf>:
 8e4:	e8 94       	clt
 8e6:	09 c0       	rjmp	.+18     	; 0x8fa <__floatsisf+0x12>

000008e8 <__floatsisf>:
 8e8:	97 fb       	bst	r25, 7
 8ea:	3e f4       	brtc	.+14     	; 0x8fa <__floatsisf+0x12>
 8ec:	90 95       	com	r25
 8ee:	80 95       	com	r24
 8f0:	70 95       	com	r23
 8f2:	61 95       	neg	r22
 8f4:	7f 4f       	sbci	r23, 0xFF	; 255
 8f6:	8f 4f       	sbci	r24, 0xFF	; 255
 8f8:	9f 4f       	sbci	r25, 0xFF	; 255
 8fa:	99 23       	and	r25, r25
 8fc:	a9 f0       	breq	.+42     	; 0x928 <__floatsisf+0x40>
 8fe:	f9 2f       	mov	r31, r25
 900:	96 e9       	ldi	r25, 0x96	; 150
 902:	bb 27       	eor	r27, r27
 904:	93 95       	inc	r25
 906:	f6 95       	lsr	r31
 908:	87 95       	ror	r24
 90a:	77 95       	ror	r23
 90c:	67 95       	ror	r22
 90e:	b7 95       	ror	r27
 910:	f1 11       	cpse	r31, r1
 912:	f8 cf       	rjmp	.-16     	; 0x904 <__floatsisf+0x1c>
 914:	fa f4       	brpl	.+62     	; 0x954 <__floatsisf+0x6c>
 916:	bb 0f       	add	r27, r27
 918:	11 f4       	brne	.+4      	; 0x91e <__floatsisf+0x36>
 91a:	60 ff       	sbrs	r22, 0
 91c:	1b c0       	rjmp	.+54     	; 0x954 <__floatsisf+0x6c>
 91e:	6f 5f       	subi	r22, 0xFF	; 255
 920:	7f 4f       	sbci	r23, 0xFF	; 255
 922:	8f 4f       	sbci	r24, 0xFF	; 255
 924:	9f 4f       	sbci	r25, 0xFF	; 255
 926:	16 c0       	rjmp	.+44     	; 0x954 <__floatsisf+0x6c>
 928:	88 23       	and	r24, r24
 92a:	11 f0       	breq	.+4      	; 0x930 <__floatsisf+0x48>
 92c:	96 e9       	ldi	r25, 0x96	; 150
 92e:	11 c0       	rjmp	.+34     	; 0x952 <__floatsisf+0x6a>
 930:	77 23       	and	r23, r23
 932:	21 f0       	breq	.+8      	; 0x93c <__floatsisf+0x54>
 934:	9e e8       	ldi	r25, 0x8E	; 142
 936:	87 2f       	mov	r24, r23
 938:	76 2f       	mov	r23, r22
 93a:	05 c0       	rjmp	.+10     	; 0x946 <__floatsisf+0x5e>
 93c:	66 23       	and	r22, r22
 93e:	71 f0       	breq	.+28     	; 0x95c <__floatsisf+0x74>
 940:	96 e8       	ldi	r25, 0x86	; 134
 942:	86 2f       	mov	r24, r22
 944:	70 e0       	ldi	r23, 0x00	; 0
 946:	60 e0       	ldi	r22, 0x00	; 0
 948:	2a f0       	brmi	.+10     	; 0x954 <__floatsisf+0x6c>
 94a:	9a 95       	dec	r25
 94c:	66 0f       	add	r22, r22
 94e:	77 1f       	adc	r23, r23
 950:	88 1f       	adc	r24, r24
 952:	da f7       	brpl	.-10     	; 0x94a <__floatsisf+0x62>
 954:	88 0f       	add	r24, r24
 956:	96 95       	lsr	r25
 958:	87 95       	ror	r24
 95a:	97 f9       	bld	r25, 7
 95c:	08 95       	ret

0000095e <__fp_split3>:
 95e:	57 fd       	sbrc	r21, 7
 960:	90 58       	subi	r25, 0x80	; 128
 962:	44 0f       	add	r20, r20
 964:	55 1f       	adc	r21, r21
 966:	59 f0       	breq	.+22     	; 0x97e <__fp_splitA+0x10>
 968:	5f 3f       	cpi	r21, 0xFF	; 255
 96a:	71 f0       	breq	.+28     	; 0x988 <__fp_splitA+0x1a>
 96c:	47 95       	ror	r20

0000096e <__fp_splitA>:
 96e:	88 0f       	add	r24, r24
 970:	97 fb       	bst	r25, 7
 972:	99 1f       	adc	r25, r25
 974:	61 f0       	breq	.+24     	; 0x98e <__fp_splitA+0x20>
 976:	9f 3f       	cpi	r25, 0xFF	; 255
 978:	79 f0       	breq	.+30     	; 0x998 <__fp_splitA+0x2a>
 97a:	87 95       	ror	r24
 97c:	08 95       	ret
 97e:	12 16       	cp	r1, r18
 980:	13 06       	cpc	r1, r19
 982:	14 06       	cpc	r1, r20
 984:	55 1f       	adc	r21, r21
 986:	f2 cf       	rjmp	.-28     	; 0x96c <__fp_split3+0xe>
 988:	46 95       	lsr	r20
 98a:	f1 df       	rcall	.-30     	; 0x96e <__fp_splitA>
 98c:	08 c0       	rjmp	.+16     	; 0x99e <__fp_splitA+0x30>
 98e:	16 16       	cp	r1, r22
 990:	17 06       	cpc	r1, r23
 992:	18 06       	cpc	r1, r24
 994:	99 1f       	adc	r25, r25
 996:	f1 cf       	rjmp	.-30     	; 0x97a <__fp_splitA+0xc>
 998:	86 95       	lsr	r24
 99a:	71 05       	cpc	r23, r1
 99c:	61 05       	cpc	r22, r1
 99e:	08 94       	sec
 9a0:	08 95       	ret

000009a2 <__fp_zero>:
 9a2:	e8 94       	clt

000009a4 <__fp_szero>:
 9a4:	bb 27       	eor	r27, r27
 9a6:	66 27       	eor	r22, r22
 9a8:	77 27       	eor	r23, r23
 9aa:	cb 01       	movw	r24, r22
 9ac:	97 f9       	bld	r25, 7
 9ae:	08 95       	ret

000009b0 <__mulsf3>:
 9b0:	0b d0       	rcall	.+22     	; 0x9c8 <__mulsf3x>
 9b2:	78 c0       	rjmp	.+240    	; 0xaa4 <__fp_round>
 9b4:	69 d0       	rcall	.+210    	; 0xa88 <__fp_pscA>
 9b6:	28 f0       	brcs	.+10     	; 0x9c2 <__mulsf3+0x12>
 9b8:	6e d0       	rcall	.+220    	; 0xa96 <__fp_pscB>
 9ba:	18 f0       	brcs	.+6      	; 0x9c2 <__mulsf3+0x12>
 9bc:	95 23       	and	r25, r21
 9be:	09 f0       	breq	.+2      	; 0x9c2 <__mulsf3+0x12>
 9c0:	5a c0       	rjmp	.+180    	; 0xa76 <__fp_inf>
 9c2:	5f c0       	rjmp	.+190    	; 0xa82 <__fp_nan>
 9c4:	11 24       	eor	r1, r1
 9c6:	ee cf       	rjmp	.-36     	; 0x9a4 <__fp_szero>

000009c8 <__mulsf3x>:
 9c8:	ca df       	rcall	.-108    	; 0x95e <__fp_split3>
 9ca:	a0 f3       	brcs	.-24     	; 0x9b4 <__mulsf3+0x4>

000009cc <__mulsf3_pse>:
 9cc:	95 9f       	mul	r25, r21
 9ce:	d1 f3       	breq	.-12     	; 0x9c4 <__mulsf3+0x14>
 9d0:	95 0f       	add	r25, r21
 9d2:	50 e0       	ldi	r21, 0x00	; 0
 9d4:	55 1f       	adc	r21, r21
 9d6:	62 9f       	mul	r22, r18
 9d8:	f0 01       	movw	r30, r0
 9da:	72 9f       	mul	r23, r18
 9dc:	bb 27       	eor	r27, r27
 9de:	f0 0d       	add	r31, r0
 9e0:	b1 1d       	adc	r27, r1
 9e2:	63 9f       	mul	r22, r19
 9e4:	aa 27       	eor	r26, r26
 9e6:	f0 0d       	add	r31, r0
 9e8:	b1 1d       	adc	r27, r1
 9ea:	aa 1f       	adc	r26, r26
 9ec:	64 9f       	mul	r22, r20
 9ee:	66 27       	eor	r22, r22
 9f0:	b0 0d       	add	r27, r0
 9f2:	a1 1d       	adc	r26, r1
 9f4:	66 1f       	adc	r22, r22
 9f6:	82 9f       	mul	r24, r18
 9f8:	22 27       	eor	r18, r18
 9fa:	b0 0d       	add	r27, r0
 9fc:	a1 1d       	adc	r26, r1
 9fe:	62 1f       	adc	r22, r18
 a00:	73 9f       	mul	r23, r19
 a02:	b0 0d       	add	r27, r0
 a04:	a1 1d       	adc	r26, r1
 a06:	62 1f       	adc	r22, r18
 a08:	83 9f       	mul	r24, r19
 a0a:	a0 0d       	add	r26, r0
 a0c:	61 1d       	adc	r22, r1
 a0e:	22 1f       	adc	r18, r18
 a10:	74 9f       	mul	r23, r20
 a12:	33 27       	eor	r19, r19
 a14:	a0 0d       	add	r26, r0
 a16:	61 1d       	adc	r22, r1
 a18:	23 1f       	adc	r18, r19
 a1a:	84 9f       	mul	r24, r20
 a1c:	60 0d       	add	r22, r0
 a1e:	21 1d       	adc	r18, r1
 a20:	82 2f       	mov	r24, r18
 a22:	76 2f       	mov	r23, r22
 a24:	6a 2f       	mov	r22, r26
 a26:	11 24       	eor	r1, r1
 a28:	9f 57       	subi	r25, 0x7F	; 127
 a2a:	50 40       	sbci	r21, 0x00	; 0
 a2c:	8a f0       	brmi	.+34     	; 0xa50 <__mulsf3_pse+0x84>
 a2e:	e1 f0       	breq	.+56     	; 0xa68 <__mulsf3_pse+0x9c>
 a30:	88 23       	and	r24, r24
 a32:	4a f0       	brmi	.+18     	; 0xa46 <__mulsf3_pse+0x7a>
 a34:	ee 0f       	add	r30, r30
 a36:	ff 1f       	adc	r31, r31
 a38:	bb 1f       	adc	r27, r27
 a3a:	66 1f       	adc	r22, r22
 a3c:	77 1f       	adc	r23, r23
 a3e:	88 1f       	adc	r24, r24
 a40:	91 50       	subi	r25, 0x01	; 1
 a42:	50 40       	sbci	r21, 0x00	; 0
 a44:	a9 f7       	brne	.-22     	; 0xa30 <__mulsf3_pse+0x64>
 a46:	9e 3f       	cpi	r25, 0xFE	; 254
 a48:	51 05       	cpc	r21, r1
 a4a:	70 f0       	brcs	.+28     	; 0xa68 <__mulsf3_pse+0x9c>
 a4c:	14 c0       	rjmp	.+40     	; 0xa76 <__fp_inf>
 a4e:	aa cf       	rjmp	.-172    	; 0x9a4 <__fp_szero>
 a50:	5f 3f       	cpi	r21, 0xFF	; 255
 a52:	ec f3       	brlt	.-6      	; 0xa4e <__mulsf3_pse+0x82>
 a54:	98 3e       	cpi	r25, 0xE8	; 232
 a56:	dc f3       	brlt	.-10     	; 0xa4e <__mulsf3_pse+0x82>
 a58:	86 95       	lsr	r24
 a5a:	77 95       	ror	r23
 a5c:	67 95       	ror	r22
 a5e:	b7 95       	ror	r27
 a60:	f7 95       	ror	r31
 a62:	e7 95       	ror	r30
 a64:	9f 5f       	subi	r25, 0xFF	; 255
 a66:	c1 f7       	brne	.-16     	; 0xa58 <__mulsf3_pse+0x8c>
 a68:	fe 2b       	or	r31, r30
 a6a:	88 0f       	add	r24, r24
 a6c:	91 1d       	adc	r25, r1
 a6e:	96 95       	lsr	r25
 a70:	87 95       	ror	r24
 a72:	97 f9       	bld	r25, 7
 a74:	08 95       	ret

00000a76 <__fp_inf>:
 a76:	97 f9       	bld	r25, 7
 a78:	9f 67       	ori	r25, 0x7F	; 127
 a7a:	80 e8       	ldi	r24, 0x80	; 128
 a7c:	70 e0       	ldi	r23, 0x00	; 0
 a7e:	60 e0       	ldi	r22, 0x00	; 0
 a80:	08 95       	ret

00000a82 <__fp_nan>:
 a82:	9f ef       	ldi	r25, 0xFF	; 255
 a84:	80 ec       	ldi	r24, 0xC0	; 192
 a86:	08 95       	ret

00000a88 <__fp_pscA>:
 a88:	00 24       	eor	r0, r0
 a8a:	0a 94       	dec	r0
 a8c:	16 16       	cp	r1, r22
 a8e:	17 06       	cpc	r1, r23
 a90:	18 06       	cpc	r1, r24
 a92:	09 06       	cpc	r0, r25
 a94:	08 95       	ret

00000a96 <__fp_pscB>:
 a96:	00 24       	eor	r0, r0
 a98:	0a 94       	dec	r0
 a9a:	12 16       	cp	r1, r18
 a9c:	13 06       	cpc	r1, r19
 a9e:	14 06       	cpc	r1, r20
 aa0:	05 06       	cpc	r0, r21
 aa2:	08 95       	ret

00000aa4 <__fp_round>:
 aa4:	09 2e       	mov	r0, r25
 aa6:	03 94       	inc	r0
 aa8:	00 0c       	add	r0, r0
 aaa:	11 f4       	brne	.+4      	; 0xab0 <__fp_round+0xc>
 aac:	88 23       	and	r24, r24
 aae:	52 f0       	brmi	.+20     	; 0xac4 <__fp_round+0x20>
 ab0:	bb 0f       	add	r27, r27
 ab2:	40 f4       	brcc	.+16     	; 0xac4 <__fp_round+0x20>
 ab4:	bf 2b       	or	r27, r31
 ab6:	11 f4       	brne	.+4      	; 0xabc <__fp_round+0x18>
 ab8:	60 ff       	sbrs	r22, 0
 aba:	04 c0       	rjmp	.+8      	; 0xac4 <__fp_round+0x20>
 abc:	6f 5f       	subi	r22, 0xFF	; 255
 abe:	7f 4f       	sbci	r23, 0xFF	; 255
 ac0:	8f 4f       	sbci	r24, 0xFF	; 255
 ac2:	9f 4f       	sbci	r25, 0xFF	; 255
 ac4:	08 95       	ret

00000ac6 <__tablejump2__>:
 ac6:	ee 0f       	add	r30, r30
 ac8:	ff 1f       	adc	r31, r31
 aca:	00 24       	eor	r0, r0
 acc:	00 1c       	adc	r0, r0
 ace:	0b be       	out	0x3b, r0	; 59
 ad0:	07 90       	elpm	r0, Z+
 ad2:	f6 91       	elpm	r31, Z
 ad4:	e0 2d       	mov	r30, r0
 ad6:	09 94       	ijmp

00000ad8 <_exit>:
 ad8:	f8 94       	cli

00000ada <__stop_program>:
 ada:	ff cf       	rjmp	.-2      	; 0xada <__stop_program>
