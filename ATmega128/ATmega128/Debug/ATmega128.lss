
ATmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000298  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  0000030c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000033c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002135  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab9  00000000  00000000  0000256d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bf4  00000000  00000000  00003026  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  00003c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a34  00000000  00000000  00003e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001470  00000000  00000000  000048a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00005d14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e9       	ldi	r30, 0x98	; 152
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	38 d0       	rcall	.+112    	; 0x134 <main>
  c4:	e7 c0       	rjmp	.+462    	; 0x294 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <_ZN3MCU7Setting9beginPortEib>:
		//attachPort(m_PortValue);
	}
	
	isOn = true;
	
}
  c8:	66 23       	and	r22, r22
  ca:	11 f0       	breq	.+4      	; 0xd0 <_ZN3MCU7Setting9beginPortEib+0x8>
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <_ZN3MCU7Setting9beginPortEib+0xa>
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	82 30       	cpi	r24, 0x02	; 2
  d4:	91 05       	cpc	r25, r1
  d6:	99 f0       	breq	.+38     	; 0xfe <_ZN3MCU7Setting9beginPortEib+0x36>
  d8:	2c f4       	brge	.+10     	; 0xe4 <_ZN3MCU7Setting9beginPortEib+0x1c>
  da:	00 97       	sbiw	r24, 0x00	; 0
  dc:	51 f0       	breq	.+20     	; 0xf2 <_ZN3MCU7Setting9beginPortEib+0x2a>
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	59 f0       	breq	.+22     	; 0xf8 <_ZN3MCU7Setting9beginPortEib+0x30>
  e2:	08 95       	ret
  e4:	84 30       	cpi	r24, 0x04	; 4
  e6:	91 05       	cpc	r25, r1
  e8:	81 f0       	breq	.+32     	; 0x10a <_ZN3MCU7Setting9beginPortEib+0x42>
  ea:	64 f0       	brlt	.+24     	; 0x104 <_ZN3MCU7Setting9beginPortEib+0x3c>
  ec:	05 97       	sbiw	r24, 0x05	; 5
  ee:	81 f0       	breq	.+32     	; 0x110 <_ZN3MCU7Setting9beginPortEib+0x48>
  f0:	08 95       	ret
  f2:	2a bb       	out	0x1a, r18	; 26
  f4:	1b ba       	out	0x1b, r1	; 27
  f6:	08 95       	ret
  f8:	27 bb       	out	0x17, r18	; 23
  fa:	18 ba       	out	0x18, r1	; 24
  fc:	08 95       	ret
  fe:	24 bb       	out	0x14, r18	; 20
 100:	15 ba       	out	0x15, r1	; 21
 102:	08 95       	ret
 104:	21 bb       	out	0x11, r18	; 17
 106:	12 ba       	out	0x12, r1	; 18
 108:	08 95       	ret
 10a:	22 b9       	out	0x02, r18	; 2
 10c:	13 b8       	out	0x03, r1	; 3
 10e:	08 95       	ret
 110:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 114:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 118:	08 95       	ret

0000011a <_Z9sensorOffv>:
//========================================*/


void sensorOff (void)
{
	left = OFF;
 11a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <left>
	leftMiddle = OFF;
 11e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <leftMiddle>
	middle = OFF;
 122:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <middle>
	rightMiddle = OFF;
 126:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <rightMiddle>
	right = OFF;
 12a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <right>
	all = OFF;
 12e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <all>
 132:	08 95       	ret

00000134 <main>:
-------------   MAIN START   ---------------
//========================================*/

int main(void)
{
    beginPort(D, OUT);
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	c6 df       	rcall	.-116    	; 0xc8 <_ZN3MCU7Setting9beginPortEib>
	beginPort(E, IN);
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	84 e0       	ldi	r24, 0x04	; 4
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 df       	rcall	.-124    	; 0xc8 <_ZN3MCU7Setting9beginPortEib>
	//sei();
	
    while (true) 
    {
		
		newdata = PINE;
 144:	81 b1       	in	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <newdata+0x1>
 14c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <newdata>
		detection = olddata & (~ newdata);
 150:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <newdata>
 154:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <newdata+0x1>
 158:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <olddata>
 15c:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <olddata+0x1>
 160:	80 95       	com	r24
 162:	90 95       	com	r25
 164:	82 23       	and	r24, r18
 166:	93 23       	and	r25, r19
 168:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		if (detection != 0x00)
 170:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 174:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 178:	89 2b       	or	r24, r25
 17a:	a1 f1       	breq	.+104    	; 0x1e4 <main+0xb0>
		{
			switch (detection)
 17c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 180:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 184:	85 30       	cpi	r24, 0x05	; 5
 186:	91 05       	cpc	r25, r1
 188:	a9 f0       	breq	.+42     	; 0x1b4 <main+0x80>
 18a:	30 f4       	brcc	.+12     	; 0x198 <main+0x64>
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	91 05       	cpc	r25, r1
 190:	61 f0       	breq	.+24     	; 0x1aa <main+0x76>
 192:	04 97       	sbiw	r24, 0x04	; 4
 194:	a1 f0       	breq	.+40     	; 0x1be <main+0x8a>
 196:	26 c0       	rjmp	.+76     	; 0x1e4 <main+0xb0>
 198:	84 31       	cpi	r24, 0x14	; 20
 19a:	91 05       	cpc	r25, r1
 19c:	a9 f0       	breq	.+42     	; 0x1c8 <main+0x94>
 19e:	85 31       	cpi	r24, 0x15	; 21
 1a0:	91 05       	cpc	r25, r1
 1a2:	e1 f0       	breq	.+56     	; 0x1dc <main+0xa8>
 1a4:	40 97       	sbiw	r24, 0x10	; 16
 1a6:	f1 f4       	brne	.+60     	; 0x1e4 <main+0xb0>
			{
				case 0x01:
					sensorOff();
 1a8:	14 c0       	rjmp	.+40     	; 0x1d2 <main+0x9e>
 1aa:	b7 df       	rcall	.-146    	; 0x11a <_Z9sensorOffv>
					left = ON;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <left>
					break;
					
				case 0x05:
					sensorOff();
 1b2:	18 c0       	rjmp	.+48     	; 0x1e4 <main+0xb0>
 1b4:	b2 df       	rcall	.-156    	; 0x11a <_Z9sensorOffv>
					leftMiddle = ON;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <leftMiddle>
					break;
					
				case 0x04:
					sensorOff();
 1bc:	13 c0       	rjmp	.+38     	; 0x1e4 <main+0xb0>
					middle = ON;
 1be:	ad df       	rcall	.-166    	; 0x11a <_Z9sensorOffv>
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <middle>
					break;
					
				case 0x14:
					sensorOff();
 1c6:	0e c0       	rjmp	.+28     	; 0x1e4 <main+0xb0>
					rightMiddle = ON;
 1c8:	a8 df       	rcall	.-176    	; 0x11a <_Z9sensorOffv>
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rightMiddle>
					break;
					
				case 0x10:
					sensorOff();
 1d0:	09 c0       	rjmp	.+18     	; 0x1e4 <main+0xb0>
					right = ON;
 1d2:	a3 df       	rcall	.-186    	; 0x11a <_Z9sensorOffv>
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <right>
					break;
					
				case 0x15:
					sensorOff();
 1da:	04 c0       	rjmp	.+8      	; 0x1e4 <main+0xb0>
 1dc:	9e df       	rcall	.-196    	; 0x11a <_Z9sensorOffv>
					all = ON;
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <all>
				default:
					break;
			}
		}
		
		olddata = newdata;
 1e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <newdata>
 1e8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <newdata+0x1>
 1ec:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <olddata+0x1>
 1f0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <olddata>
		
		if (left == ON)
 1f4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <left>
 1f8:	88 23       	and	r24, r24
 1fa:	41 f0       	breq	.+16     	; 0x20c <main+0xd8>
		{
			PORTD = 0x08;
 1fc:	88 e0       	ldi	r24, 0x08	; 8
 1fe:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 200:	85 e2       	ldi	r24, 0x25	; 37
 202:	8a 95       	dec	r24
 204:	f1 f7       	brne	.-4      	; 0x202 <main+0xce>
 206:	00 00       	nop
			_delay_us(7);
			PORTD = 0x00;
 208:	12 ba       	out	0x12, r1	; 18
 20a:	9c cf       	rjmp	.-200    	; 0x144 <main+0x10>
		}
		
		else if (leftMiddle == ON)
 20c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <leftMiddle>
 210:	88 23       	and	r24, r24
 212:	41 f0       	breq	.+16     	; 0x224 <main+0xf0>
		{
			PORTD = 0x08;
 214:	88 e0       	ldi	r24, 0x08	; 8
 216:	82 bb       	out	0x12, r24	; 18
 218:	85 e2       	ldi	r24, 0x25	; 37
 21a:	8a 95       	dec	r24
 21c:	f1 f7       	brne	.-4      	; 0x21a <main+0xe6>
 21e:	00 00       	nop
			_delay_us(7);
			PORTD = 0x00;
 220:	12 ba       	out	0x12, r1	; 18
 222:	90 cf       	rjmp	.-224    	; 0x144 <main+0x10>
		}
		
		else if (middle == ON)
 224:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <middle>
 228:	88 23       	and	r24, r24
 22a:	41 f0       	breq	.+16     	; 0x23c <main+0x108>
		{
			PORTD = 0x09;
 22c:	89 e0       	ldi	r24, 0x09	; 9
 22e:	82 bb       	out	0x12, r24	; 18
 230:	8a e2       	ldi	r24, 0x2A	; 42
 232:	8a 95       	dec	r24
 234:	f1 f7       	brne	.-4      	; 0x232 <main+0xfe>
 236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x104>
			_delay_us(8);
			PORTD = 0x00;
 238:	12 ba       	out	0x12, r1	; 18
 23a:	84 cf       	rjmp	.-248    	; 0x144 <main+0x10>
		}
		
		else if (rightMiddle == ON)
 23c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rightMiddle>
 240:	88 23       	and	r24, r24
 242:	41 f0       	breq	.+16     	; 0x254 <main+0x120>
		{
			PORTD = 0x01;
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	82 bb       	out	0x12, r24	; 18
 248:	85 e2       	ldi	r24, 0x25	; 37
 24a:	8a 95       	dec	r24
 24c:	f1 f7       	brne	.-4      	; 0x24a <main+0x116>
 24e:	00 00       	nop
			_delay_us(7);
			PORTD = 0x00;
 250:	12 ba       	out	0x12, r1	; 18
 252:	78 cf       	rjmp	.-272    	; 0x144 <main+0x10>
		}
		
		else if (right == ON)
 254:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <right>
 258:	88 23       	and	r24, r24
 25a:	41 f0       	breq	.+16     	; 0x26c <main+0x138>
		{
			PORTD = 0x01;
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	82 bb       	out	0x12, r24	; 18
 260:	85 e2       	ldi	r24, 0x25	; 37
 262:	8a 95       	dec	r24
 264:	f1 f7       	brne	.-4      	; 0x262 <main+0x12e>
 266:	00 00       	nop
			_delay_us(7);
			PORTD = 0x00;
 268:	12 ba       	out	0x12, r1	; 18
 26a:	6c cf       	rjmp	.-296    	; 0x144 <main+0x10>
		}
		
		else if (all == ON)
 26c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <all>
 270:	88 23       	and	r24, r24
 272:	41 f0       	breq	.+16     	; 0x284 <main+0x150>
		{
			PORTD = 0x08;
 274:	88 e0       	ldi	r24, 0x08	; 8
 276:	82 bb       	out	0x12, r24	; 18
 278:	85 e2       	ldi	r24, 0x25	; 37
 27a:	8a 95       	dec	r24
 27c:	f1 f7       	brne	.-4      	; 0x27a <main+0x146>
 27e:	00 00       	nop
			_delay_us(7);
			PORTD = 0x00;
 280:	12 ba       	out	0x12, r1	; 18
 282:	60 cf       	rjmp	.-320    	; 0x144 <main+0x10>
		}
		
		else
		{
			PORTD = 0x01;
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	82 bb       	out	0x12, r24	; 18
 288:	85 e2       	ldi	r24, 0x25	; 37
 28a:	8a 95       	dec	r24
 28c:	f1 f7       	brne	.-4      	; 0x28a <main+0x156>
 28e:	00 00       	nop
			_delay_us(7);
			PORTD = 0x00;
 290:	12 ba       	out	0x12, r1	; 18
 292:	58 cf       	rjmp	.-336    	; 0x144 <main+0x10>

00000294 <_exit>:
 294:	f8 94       	cli

00000296 <__stop_program>:
 296:	ff cf       	rjmp	.-2      	; 0x296 <__stop_program>
