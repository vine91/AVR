
ATmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  00800100  00800100  00000534  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000564  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001722  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c7a  00000000  00000000  00001d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000096d  00000000  00000000  00002a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00003374  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000810  00000000  00000000  000034e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008cf  00000000  00000000  00003cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000045c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	46 c0       	rjmp	.+140    	; 0x8e <__ctors_end>
   2:	00 00       	nop
   4:	6b c0       	rjmp	.+214    	; 0xdc <__bad_interrupt>
   6:	00 00       	nop
   8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
   a:	00 00       	nop
   c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
   e:	00 00       	nop
  10:	65 c0       	rjmp	.+202    	; 0xdc <__bad_interrupt>
  12:	00 00       	nop
  14:	63 c0       	rjmp	.+198    	; 0xdc <__bad_interrupt>
  16:	00 00       	nop
  18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>
  1e:	00 00       	nop
  20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
  22:	00 00       	nop
  24:	5b c0       	rjmp	.+182    	; 0xdc <__bad_interrupt>
  26:	00 00       	nop
  28:	59 c0       	rjmp	.+178    	; 0xdc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	57 c0       	rjmp	.+174    	; 0xdc <__bad_interrupt>
  2e:	00 00       	nop
  30:	55 c0       	rjmp	.+170    	; 0xdc <__bad_interrupt>
  32:	00 00       	nop
  34:	53 c0       	rjmp	.+166    	; 0xdc <__bad_interrupt>
  36:	00 00       	nop
  38:	51 c0       	rjmp	.+162    	; 0xdc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4f c0       	rjmp	.+158    	; 0xdc <__bad_interrupt>
  3e:	00 00       	nop
  40:	4d c0       	rjmp	.+154    	; 0xdc <__bad_interrupt>
  42:	00 00       	nop
  44:	4b c0       	rjmp	.+150    	; 0xdc <__bad_interrupt>
  46:	00 00       	nop
  48:	49 c0       	rjmp	.+146    	; 0xdc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	47 c0       	rjmp	.+142    	; 0xdc <__bad_interrupt>
  4e:	00 00       	nop
  50:	45 c0       	rjmp	.+138    	; 0xdc <__bad_interrupt>
  52:	00 00       	nop
  54:	43 c0       	rjmp	.+134    	; 0xdc <__bad_interrupt>
  56:	00 00       	nop
  58:	41 c0       	rjmp	.+130    	; 0xdc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3f c0       	rjmp	.+126    	; 0xdc <__bad_interrupt>
  5e:	00 00       	nop
  60:	3d c0       	rjmp	.+122    	; 0xdc <__bad_interrupt>
  62:	00 00       	nop
  64:	3b c0       	rjmp	.+118    	; 0xdc <__bad_interrupt>
  66:	00 00       	nop
  68:	39 c0       	rjmp	.+114    	; 0xdc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	37 c0       	rjmp	.+110    	; 0xdc <__bad_interrupt>
  6e:	00 00       	nop
  70:	35 c0       	rjmp	.+106    	; 0xdc <__bad_interrupt>
  72:	00 00       	nop
  74:	33 c0       	rjmp	.+102    	; 0xdc <__bad_interrupt>
  76:	00 00       	nop
  78:	31 c0       	rjmp	.+98     	; 0xdc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2f c0       	rjmp	.+94     	; 0xdc <__bad_interrupt>
  7e:	00 00       	nop
  80:	2d c0       	rjmp	.+90     	; 0xdc <__bad_interrupt>
  82:	00 00       	nop
  84:	2b c0       	rjmp	.+86     	; 0xdc <__bad_interrupt>
  86:	00 00       	nop
  88:	29 c0       	rjmp	.+82     	; 0xdc <__bad_interrupt>
	...

0000008c <__ctors_start>:
  8c:	70 01       	movw	r14, r0

0000008e <__ctors_end>:
  8e:	11 24       	eor	r1, r1
  90:	1f be       	out	0x3f, r1	; 63
  92:	cf ef       	ldi	r28, 0xFF	; 255
  94:	d0 e1       	ldi	r29, 0x10	; 16
  96:	de bf       	out	0x3e, r29	; 62
  98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
  9a:	11 e0       	ldi	r17, 0x01	; 1
  9c:	a0 e0       	ldi	r26, 0x00	; 0
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	e0 ec       	ldi	r30, 0xC0	; 192
  a2:	f4 e0       	ldi	r31, 0x04	; 4
  a4:	00 e0       	ldi	r16, 0x00	; 0
  a6:	0b bf       	out	0x3b, r16	; 59
  a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x14>
  aa:	07 90       	elpm	r0, Z+
  ac:	0d 92       	st	X+, r0
  ae:	a0 30       	cpi	r26, 0x00	; 0
  b0:	b1 07       	cpc	r27, r17
  b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0x10>

000000b4 <__do_clear_bss>:
  b4:	21 e0       	ldi	r18, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a9 32       	cpi	r26, 0x29	; 41
  c0:	b2 07       	cpc	r27, r18
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>

000000c4 <__do_global_ctors>:
  c4:	10 e0       	ldi	r17, 0x00	; 0
  c6:	c7 e4       	ldi	r28, 0x47	; 71
  c8:	d0 e0       	ldi	r29, 0x00	; 0
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <__do_global_ctors+0xe>
  cc:	21 97       	sbiw	r28, 0x01	; 1
  ce:	fe 01       	movw	r30, r28
  d0:	ec d1       	rcall	.+984    	; 0x4aa <__tablejump2__>
  d2:	c6 34       	cpi	r28, 0x46	; 70
  d4:	d1 07       	cpc	r29, r17
  d6:	d1 f7       	brne	.-12     	; 0xcc <__do_global_ctors+0x8>
  d8:	2f d0       	rcall	.+94     	; 0x138 <main>
  da:	f0 c1       	rjmp	.+992    	; 0x4bc <_exit>

000000dc <__bad_interrupt>:
  dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <_Z41__static_initialization_and_destruction_0ii>:
	leftMiddle = OFF;
	middle = OFF;
	rightMiddle = OFF;
	right = OFF;
	all = OFF;
}
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	e9 f4       	brne	.+58     	; 0x11c <_Z41__static_initialization_and_destruction_0ii+0x3e>
  e2:	6f 3f       	cpi	r22, 0xFF	; 255
  e4:	7f 4f       	sbci	r23, 0xFF	; 255
  e6:	d1 f4       	brne	.+52     	; 0x11c <_Z41__static_initialization_and_destruction_0ii+0x3e>
private:
	unsigned int m_MotorPort;
	unsigned int m_Speed;

public:
	Motor (int motorPort) { m_MotorPort = motorPort; }
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <rightMotor+0x1>
  f0:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <rightMotor>
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <leftMotor+0x1>
  fc:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <leftMotor>
	bool m_isReversal;
	NonOptimal m_NewValue;
	NonOptimal m_OldValue;

public:
	SW (int switchPort, bool isReversal) { m_SwitchPort = switchPort; m_isReversal = isReversal; }
 100:	e6 e1       	ldi	r30, 0x16	; 22
 102:	f1 e0       	ldi	r31, 0x01	; 1
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	91 83       	std	Z+1, r25	; 0x01
 10a:	80 83       	st	Z, r24
 10c:	82 83       	std	Z+2, r24	; 0x02
 10e:	ed e0       	ldi	r30, 0x0D	; 13
 110:	f1 e0       	ldi	r31, 0x01	; 1
 112:	24 e0       	ldi	r18, 0x04	; 4
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	31 83       	std	Z+1, r19	; 0x01
 118:	20 83       	st	Z, r18
 11a:	82 83       	std	Z+2, r24	; 0x02
 11c:	08 95       	ret

0000011e <_Z9sensorOffv>:
//========================================*/


void sensorOff (void)
{
	left = OFF;
 11e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <left>
	leftMiddle = OFF;
 122:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <leftMiddle>
	middle = OFF;
 126:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <middle>
	rightMiddle = OFF;
 12a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <rightMiddle>
	right = OFF;
 12e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <right>
	all = OFF;
 132:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <all>
 136:	08 95       	ret

00000138 <main>:
-------------   MAIN START   ---------------
//========================================*/

int main(void)
{
	beginPort(C, OUT);
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	e5 d0       	rcall	.+458    	; 0x30a <_ZN3MCU7Setting9beginPortEib>
    beginPort(D, OUT);
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	e1 d0       	rcall	.+450    	; 0x30a <_ZN3MCU7Setting9beginPortEib>
	beginPort(B, IN);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	dd d0       	rcall	.+442    	; 0x30a <_ZN3MCU7Setting9beginPortEib>
	beginPort(E, IN);
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	84 e0       	ldi	r24, 0x04	; 4
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	d9 d0       	rcall	.+434    	; 0x30a <_ZN3MCU7Setting9beginPortEib>
	
	beginTimer(0, OVF);
 158:	67 e0       	ldi	r22, 0x07	; 7
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	fd d0       	rcall	.+506    	; 0x35c <_ZN3MCU7Setting10beginTimerEii>
	beginTimer(2, COMP);
 162:	66 e0       	ldi	r22, 0x06	; 6
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	f8 d0       	rcall	.+496    	; 0x35c <_ZN3MCU7Setting10beginTimerEii>
	
	leftMotor.setSpeed(10);
 16c:	6a e0       	ldi	r22, 0x0A	; 10
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	8f e1       	ldi	r24, 0x1F	; 31
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	96 d1       	rcall	.+812    	; 0x4a2 <_ZN5Motor8setSpeedEi>
	rightMotor.setSpeed(10);
 176:	6a e0       	ldi	r22, 0x0A	; 10
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	84 e2       	ldi	r24, 0x24	; 36
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	91 d1       	rcall	.+802    	; 0x4a2 <_ZN5Motor8setSpeedEi>
 180:	78 94       	sei
	
	sei();
 182:	81 b1       	in	r24, 0x01	; 1
	
    while (true) 
    {
		
		newdata = PINE;
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <newdata+0x1>
 18a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <newdata>
 18e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <newdata>
		detection = olddata & (~ newdata);
 192:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <newdata+0x1>
 196:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <olddata>
 19a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <olddata+0x1>
 19e:	80 95       	com	r24
 1a0:	90 95       	com	r25
 1a2:	82 23       	and	r24, r18
 1a4:	93 23       	and	r25, r19
 1a6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		if (detection != 0x00)
 1b2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b6:	89 2b       	or	r24, r25
 1b8:	a1 f1       	breq	.+104    	; 0x222 <main+0xea>
 1ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		{
			switch (detection)
 1be:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1c2:	85 30       	cpi	r24, 0x05	; 5
 1c4:	91 05       	cpc	r25, r1
 1c6:	a9 f0       	breq	.+42     	; 0x1f2 <main+0xba>
 1c8:	30 f4       	brcc	.+12     	; 0x1d6 <main+0x9e>
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	91 05       	cpc	r25, r1
 1ce:	61 f0       	breq	.+24     	; 0x1e8 <main+0xb0>
 1d0:	04 97       	sbiw	r24, 0x04	; 4
 1d2:	a1 f0       	breq	.+40     	; 0x1fc <main+0xc4>
 1d4:	26 c0       	rjmp	.+76     	; 0x222 <main+0xea>
 1d6:	84 31       	cpi	r24, 0x14	; 20
 1d8:	91 05       	cpc	r25, r1
 1da:	a9 f0       	breq	.+42     	; 0x206 <main+0xce>
 1dc:	85 31       	cpi	r24, 0x15	; 21
 1de:	91 05       	cpc	r25, r1
 1e0:	e1 f0       	breq	.+56     	; 0x21a <main+0xe2>
 1e2:	40 97       	sbiw	r24, 0x10	; 16
 1e4:	f1 f4       	brne	.+60     	; 0x222 <main+0xea>
			{
				case 0x01:
					sensorOff();
 1e6:	14 c0       	rjmp	.+40     	; 0x210 <main+0xd8>
 1e8:	9a df       	rcall	.-204    	; 0x11e <_Z9sensorOffv>
					left = ON;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <left>
					break;
					
				case 0x05:
					sensorOff();
 1f0:	18 c0       	rjmp	.+48     	; 0x222 <main+0xea>
					leftMiddle = ON;
 1f2:	95 df       	rcall	.-214    	; 0x11e <_Z9sensorOffv>
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <leftMiddle>
					break;
					
				case 0x04:
					sensorOff();
 1fa:	13 c0       	rjmp	.+38     	; 0x222 <main+0xea>
					middle = ON;
 1fc:	90 df       	rcall	.-224    	; 0x11e <_Z9sensorOffv>
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <middle>
					break;
					
				case 0x14:
					sensorOff();
 204:	0e c0       	rjmp	.+28     	; 0x222 <main+0xea>
					rightMiddle = ON;
 206:	8b df       	rcall	.-234    	; 0x11e <_Z9sensorOffv>
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <rightMiddle>
					break;
					
				case 0x10:
					sensorOff();
 20e:	09 c0       	rjmp	.+18     	; 0x222 <main+0xea>
 210:	86 df       	rcall	.-244    	; 0x11e <_Z9sensorOffv>
					right = ON;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <right>
					break;
 218:	04 c0       	rjmp	.+8      	; 0x222 <main+0xea>
					
				case 0x15:
					sensorOff();
 21a:	81 df       	rcall	.-254    	; 0x11e <_Z9sensorOffv>
 21c:	81 e0       	ldi	r24, 0x01	; 1
					all = ON;
 21e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <all>
 222:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <newdata>
				default:
					break;
			}
		}

		olddata = newdata;
 226:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <newdata+0x1>
 22a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <olddata+0x1>
 22e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <olddata>
 232:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <left>
		
		if (left == ON)
 236:	88 23       	and	r24, r24
 238:	51 f0       	breq	.+20     	; 0x24e <main+0x116>
 23a:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTD = 0x01;
 23c:	82 bb       	out	0x12, r24	; 18
 23e:	85 e2       	ldi	r24, 0x25	; 37
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 240:	8a 95       	dec	r24
 242:	f1 f7       	brne	.-4      	; 0x240 <main+0x108>
 244:	00 00       	nop
 246:	12 ba       	out	0x12, r1	; 18
			_delay_us(7);
			PORTD = 0x00;
 248:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <isOn>
			
			isOn = false;
 24c:	9a cf       	rjmp	.-204    	; 0x182 <main+0x4a>
 24e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <leftMiddle>
		}
		
		else if (leftMiddle == ON)
 252:	88 23       	and	r24, r24
 254:	51 f0       	breq	.+20     	; 0x26a <main+0x132>
 256:	88 e0       	ldi	r24, 0x08	; 8
		{
			PORTD = 0x08;
 258:	82 bb       	out	0x12, r24	; 18
 25a:	8a e2       	ldi	r24, 0x2A	; 42
 25c:	8a 95       	dec	r24
 25e:	f1 f7       	brne	.-4      	; 0x25c <main+0x124>
 260:	00 c0       	rjmp	.+0      	; 0x262 <main+0x12a>
 262:	12 ba       	out	0x12, r1	; 18
			_delay_us(8);
			PORTD = 0x00;
 264:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <isOn>
			
			isOn = false;
 268:	8c cf       	rjmp	.-232    	; 0x182 <main+0x4a>
 26a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <middle>
		}
		
		else if (middle == ON)
 26e:	88 23       	and	r24, r24
 270:	61 f0       	breq	.+24     	; 0x28a <main+0x152>
 272:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTD = 0x01;
 274:	82 bb       	out	0x12, r24	; 18
 276:	85 bb       	out	0x15, r24	; 21
			PORTC = 0x01;
 278:	85 e2       	ldi	r24, 0x25	; 37
 27a:	8a 95       	dec	r24
 27c:	f1 f7       	brne	.-4      	; 0x27a <main+0x142>
 27e:	00 00       	nop
 280:	12 ba       	out	0x12, r1	; 18
			_delay_us(7);

			PORTD = 0x00;
 282:	15 ba       	out	0x15, r1	; 21
			PORTC = 0x00;
 284:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <isOn>
			
			isOn = false;
 288:	7c cf       	rjmp	.-264    	; 0x182 <main+0x4a>
 28a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <rightMiddle>
		}
		
		else if (rightMiddle == ON)
 28e:	88 23       	and	r24, r24
 290:	51 f0       	breq	.+20     	; 0x2a6 <main+0x16e>
 292:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTC = 0x01;
 294:	85 bb       	out	0x15, r24	; 21
 296:	8a e2       	ldi	r24, 0x2A	; 42
 298:	8a 95       	dec	r24
 29a:	f1 f7       	brne	.-4      	; 0x298 <main+0x160>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <main+0x166>
 29e:	15 ba       	out	0x15, r1	; 21
			_delay_us(8);
			PORTC = 0x00;
 2a0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <isOn>
			
			isOn = false;
 2a4:	6e cf       	rjmp	.-292    	; 0x182 <main+0x4a>
 2a6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <right>
		}
		
		else if (right == ON)
 2aa:	88 23       	and	r24, r24
 2ac:	51 f0       	breq	.+20     	; 0x2c2 <main+0x18a>
 2ae:	81 e0       	ldi	r24, 0x01	; 1
		{
			PORTC = 0x01;
 2b0:	85 bb       	out	0x15, r24	; 21
 2b2:	85 e2       	ldi	r24, 0x25	; 37
 2b4:	8a 95       	dec	r24
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <main+0x17c>
 2b8:	00 00       	nop
 2ba:	15 ba       	out	0x15, r1	; 21
			_delay_us(7);
			PORTC = 0x00;
 2bc:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <isOn>
			
			isOn = false;
 2c0:	60 cf       	rjmp	.-320    	; 0x182 <main+0x4a>
 2c2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <all>
		}
		
		else if (all == ON)
 2c6:	88 23       	and	r24, r24
 2c8:	09 f4       	brne	.+2      	; 0x2cc <main+0x194>
 2ca:	5b cf       	rjmp	.-330    	; 0x182 <main+0x4a>
 2cc:	88 e0       	ldi	r24, 0x08	; 8
		{
			PORTC = 0x08;
 2ce:	85 bb       	out	0x15, r24	; 21
 2d0:	85 e2       	ldi	r24, 0x25	; 37
 2d2:	8a 95       	dec	r24
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <main+0x19a>
 2d6:	00 00       	nop
 2d8:	15 ba       	out	0x15, r1	; 21
			_delay_us(7);
			PORTC = 0x00;
 2da:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <isOn>
			
			isOn = false;
 2de:	51 cf       	rjmp	.-350    	; 0x182 <main+0x4a>

000002e0 <_GLOBAL__sub_I_rightMotor>:
 2e0:	6f ef       	ldi	r22, 0xFF	; 255
	leftMiddle = OFF;
	middle = OFF;
	rightMiddle = OFF;
	right = OFF;
	all = OFF;
}
 2e2:	7f ef       	ldi	r23, 0xFF	; 255
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	fa ce       	rjmp	.-524    	; 0xde <_Z41__static_initialization_and_destruction_0ii>
 2ea:	08 95       	ret

000002ec <_ZN3MCU9insertBitEib>:
	else if (extendIndex >= 4)
	{
		EICRB = 0x00;
	}
	
}
 2ec:	66 23       	and	r22, r22
 2ee:	51 f0       	breq	.+20     	; 0x304 <_ZN3MCU9insertBitEib+0x18>
 2f0:	21 e0       	ldi	r18, 0x01	; 1
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	a9 01       	movw	r20, r18
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <_ZN3MCU9insertBitEib+0x10>
 2f8:	44 0f       	add	r20, r20
 2fa:	55 1f       	adc	r21, r21
 2fc:	8a 95       	dec	r24
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <_ZN3MCU9insertBitEib+0xc>
 300:	ca 01       	movw	r24, r20
 302:	08 95       	ret
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	08 95       	ret

0000030a <_ZN3MCU7Setting9beginPortEib>:
 30a:	66 23       	and	r22, r22
 30c:	11 f0       	breq	.+4      	; 0x312 <_ZN3MCU7Setting9beginPortEib+0x8>
 30e:	2f ef       	ldi	r18, 0xFF	; 255
 310:	01 c0       	rjmp	.+2      	; 0x314 <_ZN3MCU7Setting9beginPortEib+0xa>
 312:	20 e0       	ldi	r18, 0x00	; 0
 314:	82 30       	cpi	r24, 0x02	; 2
 316:	91 05       	cpc	r25, r1
 318:	99 f0       	breq	.+38     	; 0x340 <_ZN3MCU7Setting9beginPortEib+0x36>
 31a:	2c f4       	brge	.+10     	; 0x326 <_ZN3MCU7Setting9beginPortEib+0x1c>
 31c:	00 97       	sbiw	r24, 0x00	; 0
 31e:	51 f0       	breq	.+20     	; 0x334 <_ZN3MCU7Setting9beginPortEib+0x2a>
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	59 f0       	breq	.+22     	; 0x33a <_ZN3MCU7Setting9beginPortEib+0x30>
 324:	08 95       	ret
 326:	84 30       	cpi	r24, 0x04	; 4
 328:	91 05       	cpc	r25, r1
 32a:	81 f0       	breq	.+32     	; 0x34c <_ZN3MCU7Setting9beginPortEib+0x42>
 32c:	64 f0       	brlt	.+24     	; 0x346 <_ZN3MCU7Setting9beginPortEib+0x3c>
 32e:	05 97       	sbiw	r24, 0x05	; 5
 330:	81 f0       	breq	.+32     	; 0x352 <_ZN3MCU7Setting9beginPortEib+0x48>
 332:	08 95       	ret
 334:	2a bb       	out	0x1a, r18	; 26
 336:	1b ba       	out	0x1b, r1	; 27
 338:	08 95       	ret
 33a:	27 bb       	out	0x17, r18	; 23
 33c:	18 ba       	out	0x18, r1	; 24
 33e:	08 95       	ret
 340:	24 bb       	out	0x14, r18	; 20
 342:	15 ba       	out	0x15, r1	; 21
 344:	08 95       	ret
 346:	21 bb       	out	0x11, r18	; 17
 348:	12 ba       	out	0x12, r1	; 18
 34a:	08 95       	ret
 34c:	22 b9       	out	0x02, r18	; 2
 34e:	13 b8       	out	0x03, r1	; 3
 350:	08 95       	ret
 352:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 356:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 35a:	08 95       	ret

0000035c <_ZN3MCU7Setting10beginTimerEii>:
//----------------------------------------*/

void MCU::Setting::beginTimer (int timerIndex, int timerMode)
{
	
	switch (timerIndex)
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	91 05       	cpc	r25, r1
 360:	09 f4       	brne	.+2      	; 0x364 <_ZN3MCU7Setting10beginTimerEii+0x8>
 362:	49 c0       	rjmp	.+146    	; 0x3f6 <_ZN3MCU7Setting10beginTimerEii+0x9a>
 364:	1c f4       	brge	.+6      	; 0x36c <_ZN3MCU7Setting10beginTimerEii+0x10>
 366:	89 2b       	or	r24, r25
 368:	41 f0       	breq	.+16     	; 0x37a <_ZN3MCU7Setting10beginTimerEii+0x1e>
 36a:	08 95       	ret
 36c:	82 30       	cpi	r24, 0x02	; 2
 36e:	91 05       	cpc	r25, r1
 370:	19 f1       	breq	.+70     	; 0x3b8 <_ZN3MCU7Setting10beginTimerEii+0x5c>
 372:	03 97       	sbiw	r24, 0x03	; 3
 374:	09 f4       	brne	.+2      	; 0x378 <_ZN3MCU7Setting10beginTimerEii+0x1c>
 376:	63 c0       	rjmp	.+198    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 378:	08 95       	ret
	{
		// TIMER INTERRUPT 0, 2 (8 BIT)
		case 0:
			if (timerMode == OVF)
 37a:	67 30       	cpi	r22, 0x07	; 7
 37c:	71 05       	cpc	r23, r1
 37e:	59 f4       	brne	.+22     	; 0x396 <_ZN3MCU7Setting10beginTimerEii+0x3a>
			{
				TIMSK += insertBit(0, HIGH);
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	b2 df       	rcall	.-156    	; 0x2ec <_ZN3MCU9insertBitEib>
 388:	97 b7       	in	r25, 0x37	; 55
 38a:	89 0f       	add	r24, r25
 38c:	87 bf       	out	0x37, r24	; 55
				
				TCCR0 = 0x07;		// 1024, Normal Mode
 38e:	87 e0       	ldi	r24, 0x07	; 7
 390:	83 bf       	out	0x33, r24	; 51
				TCNT0 = 0x00;		// Start Counting 0x00
 392:	12 be       	out	0x32, r1	; 50
 394:	08 95       	ret
			}
			
			else if (timerMode == COMP)
 396:	66 30       	cpi	r22, 0x06	; 6
 398:	71 05       	cpc	r23, r1
 39a:	09 f0       	breq	.+2      	; 0x39e <_ZN3MCU7Setting10beginTimerEii+0x42>
 39c:	81 c0       	rjmp	.+258    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
			{
				TIMSK += insertBit(1, HIGH);
 39e:	61 e0       	ldi	r22, 0x01	; 1
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	a3 df       	rcall	.-186    	; 0x2ec <_ZN3MCU9insertBitEib>
 3a6:	97 b7       	in	r25, 0x37	; 55
 3a8:	89 0f       	add	r24, r25
 3aa:	87 bf       	out	0x37, r24	; 55
				
				TCCR0 = 0x0F;		// 1024, CTC Mode
 3ac:	8f e0       	ldi	r24, 0x0F	; 15
 3ae:	83 bf       	out	0x33, r24	; 51
				TCNT0 = 0x00;		// Start Counting 0x00
 3b0:	12 be       	out	0x32, r1	; 50
				OCR0 = 0xFF;		// Compare with 0xFF
 3b2:	8f ef       	ldi	r24, 0xFF	; 255
 3b4:	81 bf       	out	0x31, r24	; 49
 3b6:	08 95       	ret
			}
			
			break;
		
		case 2:
			if (timerMode == OVF)
 3b8:	67 30       	cpi	r22, 0x07	; 7
 3ba:	71 05       	cpc	r23, r1
 3bc:	59 f4       	brne	.+22     	; 0x3d4 <_ZN3MCU7Setting10beginTimerEii+0x78>
			{
				TIMSK += insertBit(6, HIGH);
 3be:	61 e0       	ldi	r22, 0x01	; 1
 3c0:	86 e0       	ldi	r24, 0x06	; 6
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	93 df       	rcall	.-218    	; 0x2ec <_ZN3MCU9insertBitEib>
 3c6:	97 b7       	in	r25, 0x37	; 55
 3c8:	89 0f       	add	r24, r25
 3ca:	87 bf       	out	0x37, r24	; 55
				
				TCCR2 = 0x05;		// 1024, Normal Mode
 3cc:	85 e0       	ldi	r24, 0x05	; 5
 3ce:	85 bd       	out	0x25, r24	; 37
				TCNT2 = 0x00;		// Start Counting 0x00
 3d0:	14 bc       	out	0x24, r1	; 36
 3d2:	08 95       	ret
			}
			
			else if (timerMode == COMP)
 3d4:	66 30       	cpi	r22, 0x06	; 6
 3d6:	71 05       	cpc	r23, r1
 3d8:	09 f0       	breq	.+2      	; 0x3dc <_ZN3MCU7Setting10beginTimerEii+0x80>
 3da:	62 c0       	rjmp	.+196    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
			{
				TIMSK += insertBit(7, HIGH);
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	87 e0       	ldi	r24, 0x07	; 7
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	84 df       	rcall	.-248    	; 0x2ec <_ZN3MCU9insertBitEib>
 3e4:	97 b7       	in	r25, 0x37	; 55
 3e6:	89 0f       	add	r24, r25
 3e8:	87 bf       	out	0x37, r24	; 55
				
				TCCR2 = 0x0D;		// 1024, CTC Mode
 3ea:	8d e0       	ldi	r24, 0x0D	; 13
 3ec:	85 bd       	out	0x25, r24	; 37
				TCNT2 = 0x00;		// Start Counting 0x00
 3ee:	14 bc       	out	0x24, r1	; 36
				OCR2 = 0xA0;		// Compare with 0xA0
 3f0:	80 ea       	ldi	r24, 0xA0	; 160
 3f2:	83 bd       	out	0x23, r24	; 35
 3f4:	08 95       	ret
			
			break;
		
		// TIMER INTERRUPT 1, 3 (16 BIT)
		case 1:
			if (timerMode == OVF)
 3f6:	67 30       	cpi	r22, 0x07	; 7
 3f8:	71 05       	cpc	r23, r1
			{
				TIMSK += insertBit(2, HIGH);
 3fa:	69 f4       	brne	.+26     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3fc:	61 e0       	ldi	r22, 0x01	; 1
 3fe:	82 e0       	ldi	r24, 0x02	; 2
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	74 df       	rcall	.-280    	; 0x2ec <_ZN3MCU9insertBitEib>
 404:	97 b7       	in	r25, 0x37	; 55
 406:	89 0f       	add	r24, r25
 408:	87 bf       	out	0x37, r24	; 55
				
				TCCR1A = 0x00;
 40a:	1f bc       	out	0x2f, r1	; 47
				TCCR1B = 0x05;		// 1024, Normal Mode
 40c:	85 e0       	ldi	r24, 0x05	; 5
 40e:	8e bd       	out	0x2e, r24	; 46
				TCNT1H = 0x00;
 410:	1d bc       	out	0x2d, r1	; 45
				TCNT1L = 0x00;		// Start Counting 0x0000
 412:	1c bc       	out	0x2c, r1	; 44
 414:	08 95       	ret
			}
			
			else if (timerMode == COMP)
 416:	66 30       	cpi	r22, 0x06	; 6
 418:	71 05       	cpc	r23, r1
 41a:	09 f0       	breq	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
			{
				TIMSK += insertBit(4, HIGH);
 41c:	41 c0       	rjmp	.+130    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 41e:	61 e0       	ldi	r22, 0x01	; 1
 420:	84 e0       	ldi	r24, 0x04	; 4
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	63 df       	rcall	.-314    	; 0x2ec <_ZN3MCU9insertBitEib>
 426:	97 b7       	in	r25, 0x37	; 55
 428:	89 0f       	add	r24, r25
 42a:	87 bf       	out	0x37, r24	; 55
				
				TCCR1A = 0x00;
 42c:	1f bc       	out	0x2f, r1	; 47
				TCCR1B = 0x0D;		// 1024, CTC Mode
 42e:	8d e0       	ldi	r24, 0x0D	; 13
 430:	8e bd       	out	0x2e, r24	; 46
				TCNT1H = 0x00;
 432:	1d bc       	out	0x2d, r1	; 45
				TCNT1L = 0x00;		// Start Counting 0x0000
 434:	1c bc       	out	0x2c, r1	; 44
				OCR1AH = 0xFF;
 436:	8f ef       	ldi	r24, 0xFF	; 255
 438:	8b bd       	out	0x2b, r24	; 43
				OCR1AL = 0xFF;		// Compare with 0xFFFF
 43a:	8a bd       	out	0x2a, r24	; 42
 43c:	08 95       	ret
			}
			
			break;
		
		case 3:
			if (timerMode == OVF)
 43e:	67 30       	cpi	r22, 0x07	; 7
 440:	71 05       	cpc	r23, r1
			{
				ETIMSK += insertBit(2, HIGH);
 442:	99 f4       	brne	.+38     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 444:	61 e0       	ldi	r22, 0x01	; 1
 446:	82 e0       	ldi	r24, 0x02	; 2
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	50 df       	rcall	.-352    	; 0x2ec <_ZN3MCU9insertBitEib>
 44c:	ed e7       	ldi	r30, 0x7D	; 125
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	90 81       	ld	r25, Z
 452:	89 0f       	add	r24, r25
 454:	80 83       	st	Z, r24
				
				TCCR3A = 0x00;
 456:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
				TCCR3B = 0x05;		// 1024, Normal Mode
 45a:	85 e0       	ldi	r24, 0x05	; 5
 45c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				TCNT3H = 0x00;
 460:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
				TCNT3L = 0x00;		// Start Counting 0x0000
 464:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			}
			
			else if (timerMode == COMP)
 468:	08 95       	ret
 46a:	66 30       	cpi	r22, 0x06	; 6
 46c:	71 05       	cpc	r23, r1
			{
				ETIMSK += insertBit(4, HIGH);
 46e:	c1 f4       	brne	.+48     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 470:	61 e0       	ldi	r22, 0x01	; 1
 472:	84 e0       	ldi	r24, 0x04	; 4
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	3a df       	rcall	.-396    	; 0x2ec <_ZN3MCU9insertBitEib>
 478:	ed e7       	ldi	r30, 0x7D	; 125
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	90 81       	ld	r25, Z
 47e:	89 0f       	add	r24, r25
 480:	80 83       	st	Z, r24
				
				TCCR3A = 0x00;
 482:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
				TCCR3B = 0x0D;		// 1024, CTC Mode
 486:	8d e0       	ldi	r24, 0x0D	; 13
 488:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				TCNT3H = 0x00;
 48c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
				TCNT3L = 0x00;		// Start Counting 0x0000
 490:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				OCR3AH = 0x3D;
 494:	8d e3       	ldi	r24, 0x3D	; 61
 496:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
				OCR3AL = 0x09;		// Compare with 0x3D09
 49a:	89 e0       	ldi	r24, 0x09	; 9
 49c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 4a0:	08 95       	ret

000004a2 <_ZN5Motor8setSpeedEi>:
			  Set Motor Speed
//----------------------------------------*/

void Motor::setSpeed (int speedValue)
{
    m_Speed = speedValue;
 4a2:	fc 01       	movw	r30, r24
 4a4:	73 83       	std	Z+3, r23	; 0x03
 4a6:	62 83       	std	Z+2, r22	; 0x02
 4a8:	08 95       	ret

000004aa <__tablejump2__>:
 4aa:	ee 0f       	add	r30, r30
 4ac:	ff 1f       	adc	r31, r31
 4ae:	00 24       	eor	r0, r0
 4b0:	00 1c       	adc	r0, r0
 4b2:	0b be       	out	0x3b, r0	; 59
 4b4:	07 90       	elpm	r0, Z+
 4b6:	f6 91       	elpm	r31, Z
 4b8:	e0 2d       	mov	r30, r0
 4ba:	09 94       	ijmp

000004bc <_exit>:
 4bc:	f8 94       	cli

000004be <__stop_program>:
 4be:	ff cf       	rjmp	.-2      	; 0x4be <__stop_program>
