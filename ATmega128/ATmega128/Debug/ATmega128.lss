
ATmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000890  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000081c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800100  00800100  00000890  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019d5  00000000  00000000  000009f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ce0  00000000  00000000  000023c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a1e  00000000  00000000  000030a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  00003ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d1  00000000  00000000  00003d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000acb  00000000  00000000  000044ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004fb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	56 c0       	rjmp	.+172    	; 0xae <__ctors_end>
   2:	00 00       	nop
   4:	7b c0       	rjmp	.+246    	; 0xfc <__bad_interrupt>
   6:	00 00       	nop
   8:	79 c0       	rjmp	.+242    	; 0xfc <__bad_interrupt>
   a:	00 00       	nop
   c:	77 c0       	rjmp	.+238    	; 0xfc <__bad_interrupt>
   e:	00 00       	nop
  10:	75 c0       	rjmp	.+234    	; 0xfc <__bad_interrupt>
  12:	00 00       	nop
  14:	73 c0       	rjmp	.+230    	; 0xfc <__bad_interrupt>
  16:	00 00       	nop
  18:	71 c0       	rjmp	.+226    	; 0xfc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6f c0       	rjmp	.+222    	; 0xfc <__bad_interrupt>
  1e:	00 00       	nop
  20:	6d c0       	rjmp	.+218    	; 0xfc <__bad_interrupt>
  22:	00 00       	nop
  24:	12 c1       	rjmp	.+548    	; 0x24a <__vector_9>
  26:	00 00       	nop
  28:	69 c0       	rjmp	.+210    	; 0xfc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	67 c0       	rjmp	.+206    	; 0xfc <__bad_interrupt>
  2e:	00 00       	nop
  30:	65 c0       	rjmp	.+202    	; 0xfc <__bad_interrupt>
  32:	00 00       	nop
  34:	63 c0       	rjmp	.+198    	; 0xfc <__bad_interrupt>
  36:	00 00       	nop
  38:	61 c0       	rjmp	.+194    	; 0xfc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5f c0       	rjmp	.+190    	; 0xfc <__bad_interrupt>
  3e:	00 00       	nop
  40:	ad c0       	rjmp	.+346    	; 0x19c <__vector_16>
  42:	00 00       	nop
  44:	5b c0       	rjmp	.+182    	; 0xfc <__bad_interrupt>
  46:	00 00       	nop
  48:	59 c0       	rjmp	.+178    	; 0xfc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	57 c0       	rjmp	.+174    	; 0xfc <__bad_interrupt>
  4e:	00 00       	nop
  50:	55 c0       	rjmp	.+170    	; 0xfc <__bad_interrupt>
  52:	00 00       	nop
  54:	53 c0       	rjmp	.+166    	; 0xfc <__bad_interrupt>
  56:	00 00       	nop
  58:	51 c0       	rjmp	.+162    	; 0xfc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4f c0       	rjmp	.+158    	; 0xfc <__bad_interrupt>
  5e:	00 00       	nop
  60:	4d c0       	rjmp	.+154    	; 0xfc <__bad_interrupt>
  62:	00 00       	nop
  64:	4b c0       	rjmp	.+150    	; 0xfc <__bad_interrupt>
  66:	00 00       	nop
  68:	49 c0       	rjmp	.+146    	; 0xfc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	47 c0       	rjmp	.+142    	; 0xfc <__bad_interrupt>
  6e:	00 00       	nop
  70:	45 c0       	rjmp	.+138    	; 0xfc <__bad_interrupt>
  72:	00 00       	nop
  74:	43 c0       	rjmp	.+134    	; 0xfc <__bad_interrupt>
  76:	00 00       	nop
  78:	41 c0       	rjmp	.+130    	; 0xfc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3f c0       	rjmp	.+126    	; 0xfc <__bad_interrupt>
  7e:	00 00       	nop
  80:	3d c0       	rjmp	.+122    	; 0xfc <__bad_interrupt>
  82:	00 00       	nop
  84:	3b c0       	rjmp	.+118    	; 0xfc <__bad_interrupt>
  86:	00 00       	nop
  88:	39 c0       	rjmp	.+114    	; 0xfc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d8 02       	muls	r29, r24
  8e:	e0 02       	muls	r30, r16
  90:	ef 02       	muls	r30, r31
  92:	fe 02       	muls	r31, r30
  94:	dc 02       	muls	r29, r28
  96:	0d 03       	fmul	r16, r21
  98:	1e 03       	fmul	r17, r22
  9a:	2f 03       	fmul	r18, r23
  9c:	5e 03       	fmul	r21, r22
  9e:	60 03       	mulsu	r22, r16
  a0:	65 03       	mulsu	r22, r21
  a2:	6a 03       	fmul	r22, r18
  a4:	71 03       	mulsu	r23, r17
  a6:	73 03       	mulsu	r23, r19
  a8:	7a 03       	fmul	r23, r18
  aa:	81 03       	fmuls	r16, r17

000000ac <__ctors_start>:
  ac:	ed 01       	movw	r28, r26

000000ae <__ctors_end>:
  ae:	11 24       	eor	r1, r1
  b0:	1f be       	out	0x3f, r1	; 63
  b2:	cf ef       	ldi	r28, 0xFF	; 255
  b4:	d0 e1       	ldi	r29, 0x10	; 16
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	cd bf       	out	0x3d, r28	; 61

000000ba <__do_copy_data>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	ec e1       	ldi	r30, 0x1C	; 28
  c2:	f8 e0       	ldi	r31, 0x08	; 8
  c4:	00 e0       	ldi	r16, 0x00	; 0
  c6:	0b bf       	out	0x3b, r16	; 59
  c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x14>
  ca:	07 90       	elpm	r0, Z+
  cc:	0d 92       	st	X+, r0
  ce:	a0 30       	cpi	r26, 0x00	; 0
  d0:	b1 07       	cpc	r27, r17
  d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0x10>

000000d4 <__do_clear_bss>:
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
  dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
  de:	a0 32       	cpi	r26, 0x20	; 32
  e0:	b2 07       	cpc	r27, r18
  e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>

000000e4 <__do_global_ctors>:
  e4:	10 e0       	ldi	r17, 0x00	; 0
  e6:	c7 e5       	ldi	r28, 0x57	; 87
  e8:	d0 e0       	ldi	r29, 0x00	; 0
  ea:	03 c0       	rjmp	.+6      	; 0xf2 <__do_global_ctors+0xe>
  ec:	21 97       	sbiw	r28, 0x01	; 1
  ee:	fe 01       	movw	r30, r28
  f0:	8a d3       	rcall	.+1812   	; 0x806 <__tablejump2__>
  f2:	c6 35       	cpi	r28, 0x56	; 86
  f4:	d1 07       	cpc	r29, r17
  f6:	d1 f7       	brne	.-12     	; 0xec <__do_global_ctors+0x8>
  f8:	23 d0       	rcall	.+70     	; 0x140 <main>
  fa:	8e c3       	rjmp	.+1820   	; 0x818 <_exit>

000000fc <__bad_interrupt>:
  fc:	81 cf       	rjmp	.-254    	; 0x0 <__vectors>

000000fe <_Z41__static_initialization_and_destruction_0ii>:
	else
	{
		oldData = oldData;
	}
	
}
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f4       	brne	.+60     	; 0x13e <_Z41__static_initialization_and_destruction_0ii+0x40>
 102:	6f 3f       	cpi	r22, 0xFF	; 255
 104:	7f 4f       	sbci	r23, 0xFF	; 255
 106:	d9 f4       	brne	.+54     	; 0x13e <_Z41__static_initialization_and_destruction_0ii+0x40>
	unsigned int m_MotorPin;
	unsigned int m_Speed;
	bool m_isOn;

public:
	Motor (int motorPin) { m_MotorPin = motorPin; }
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <rightCCW+0x1>
 110:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <rightCCW>
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <leftCW+0x1>
 11c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <leftCW>
	bool m_isReversal;
	NonOptimal m_NewValue;
	NonOptimal m_OldValue;

public:
	SW (int switchPort, bool isReversal) { m_SwitchPort = switchPort; m_isReversal = isReversal; }
 120:	ed e0       	ldi	r30, 0x0D	; 13
 122:	f1 e0       	ldi	r31, 0x01	; 1
 124:	83 e0       	ldi	r24, 0x03	; 3
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	91 83       	std	Z+1, r25	; 0x01
 12a:	80 83       	st	Z, r24
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	82 83       	std	Z+2, r24	; 0x02
 130:	e4 e0       	ldi	r30, 0x04	; 4
 132:	f1 e0       	ldi	r31, 0x01	; 1
 134:	24 e0       	ldi	r18, 0x04	; 4
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	31 83       	std	Z+1, r19	; 0x01
 13a:	20 83       	st	Z, r18
 13c:	82 83       	std	Z+2, r24	; 0x02
 13e:	08 95       	ret

00000140 <main>:
-------------   MAIN START   ---------------
//========================================*/

int main(void)
{
	beginPort(B, OUT);
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	5e d1       	rcall	.+700    	; 0x404 <_ZN3MCU7Setting9beginPortEib>
	beginPort(D, IN);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	5a d1       	rcall	.+692    	; 0x404 <_ZN3MCU7Setting9beginPortEib>
	beginPort(E, IN);
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	84 e0       	ldi	r24, 0x04	; 4
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	56 d1       	rcall	.+684    	; 0x404 <_ZN3MCU7Setting9beginPortEib>
	
	beginTimer(0, OVF);
 158:	68 e0       	ldi	r22, 0x08	; 8
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	7a d1       	rcall	.+756    	; 0x456 <_ZN3MCU7Setting10beginTimerEii>
	beginTimer(2, COMP);
 162:	67 e0       	ldi	r22, 0x07	; 7
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	90 e0       	ldi	r25, 0x00	; 0
	
	beginPWM(OC1A);
 16a:	75 d1       	rcall	.+746    	; 0x456 <_ZN3MCU7Setting10beginTimerEii>
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
	beginPWM(OC1B);
 170:	15 d2       	rcall	.+1066   	; 0x59c <_ZN3MCU7Setting8beginPWMEi>
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	90 e0       	ldi	r25, 0x00	; 0
	
	leftCW.stop();
 176:	12 d2       	rcall	.+1060   	; 0x59c <_ZN3MCU7Setting8beginPWMEi>
 178:	86 e1       	ldi	r24, 0x16	; 22
 17a:	91 e0       	ldi	r25, 0x01	; 1
	rightCCW.stop();
 17c:	e9 d2       	rcall	.+1490   	; 0x750 <_ZN5Motor4stopEv>
 17e:	8b e1       	ldi	r24, 0x1B	; 27
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	e6 d2       	rcall	.+1484   	; 0x750 <_ZN5Motor4stopEv>
	
	leftCW.setSpeed(4);
 184:	64 e0       	ldi	r22, 0x04	; 4
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	86 e1       	ldi	r24, 0x16	; 22
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	c1 d2       	rcall	.+1410   	; 0x710 <_ZN5Motor8setSpeedEi>
	rightCCW.setSpeed(4);
 18e:	64 e0       	ldi	r22, 0x04	; 4
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	8b e1       	ldi	r24, 0x1B	; 27
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	bc d2       	rcall	.+1400   	; 0x710 <_ZN5Motor8setSpeedEi>
 198:	78 94       	sei
	
	sei();
 19a:	ff cf       	rjmp	.-2      	; 0x19a <main+0x5a>

0000019c <__vector_16>:
 19c:	1f 92       	push	r1
--------------   MAIN END   ----------------
//========================================*/


ISR(TIMER0_OVF_vect)
{
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	0b b6       	in	r0, 0x3b	; 59
 1a8:	0f 92       	push	r0
 1aa:	2f 93       	push	r18
 1ac:	3f 93       	push	r19
 1ae:	4f 93       	push	r20
 1b0:	5f 93       	push	r21
 1b2:	6f 93       	push	r22
 1b4:	7f 93       	push	r23
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
	
	sw.init();
 1c2:	8d e0       	ldi	r24, 0x0D	; 13
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	ce d2       	rcall	.+1436   	; 0x764 <_ZN2SW4initEv>
	
	if (sw.result != 0x00)
 1c8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <sw+0x7>
 1cc:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <sw+0x8>
 1d0:	89 2b       	or	r24, r25
 1d2:	a9 f0       	breq	.+42     	; 0x1fe <__vector_16+0x62>
	{
		switch (sw.result)
 1d4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <sw+0x7>
 1d8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <sw+0x8>
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	91 05       	cpc	r25, r1
 1e0:	19 f0       	breq	.+6      	; 0x1e8 <__vector_16+0x4c>
 1e2:	02 97       	sbiw	r24, 0x02	; 2
 1e4:	31 f0       	breq	.+12     	; 0x1f2 <__vector_16+0x56>
 1e6:	0b c0       	rjmp	.+22     	; 0x1fe <__vector_16+0x62>
		{
			case SW_0:
				startSwitch = OFF;
 1e8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <startSwitch+0x1>
 1ec:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <startSwitch>
				break;
 1f0:	06 c0       	rjmp	.+12     	; 0x1fe <__vector_16+0x62>
			
			case SW_1:
				startSwitch = ON;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <startSwitch+0x1>
 1fa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <startSwitch>
			default:
				break;
		}
	}
	
	if (startSwitch == ON)
 1fe:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <startSwitch>
 202:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <startSwitch+0x1>
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	39 f4       	brne	.+14     	; 0x218 <__vector_16+0x7c>
	{
		leftCW.start();
 20a:	86 e1       	ldi	r24, 0x16	; 22
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	95 d2       	rcall	.+1322   	; 0x73a <_ZN5Motor5startEv>
		rightCCW.start();
 210:	8b e1       	ldi	r24, 0x1B	; 27
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	92 d2       	rcall	.+1316   	; 0x73a <_ZN5Motor5startEv>
 216:	06 c0       	rjmp	.+12     	; 0x224 <__vector_16+0x88>
	}
	
	else
	{
		leftCW.stop();
 218:	86 e1       	ldi	r24, 0x16	; 22
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	99 d2       	rcall	.+1330   	; 0x750 <_ZN5Motor4stopEv>
		rightCCW.stop();
 21e:	8b e1       	ldi	r24, 0x1B	; 27
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	96 d2       	rcall	.+1324   	; 0x750 <_ZN5Motor4stopEv>
 224:	ff 91       	pop	r31
	}
	
}
 226:	ef 91       	pop	r30
 228:	bf 91       	pop	r27
 22a:	af 91       	pop	r26
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	7f 91       	pop	r23
 232:	6f 91       	pop	r22
 234:	5f 91       	pop	r21
 236:	4f 91       	pop	r20
 238:	3f 91       	pop	r19
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0b be       	out	0x3b, r0	; 59
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <__vector_9>:
 24a:	1f 92       	push	r1


ISR(TIMER2_COMP_vect)
{
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	0b b6       	in	r0, 0x3b	; 59
 256:	0f 92       	push	r0
 258:	2f 93       	push	r18
 25a:	3f 93       	push	r19
 25c:	4f 93       	push	r20
 25e:	5f 93       	push	r21
 260:	6f 93       	push	r22
 262:	7f 93       	push	r23
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
 268:	af 93       	push	r26
 26a:	bf 93       	push	r27
 26c:	ef 93       	push	r30
 26e:	ff 93       	push	r31
	
	if (startSwitch == ON)
 270:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <startSwitch>
 274:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <startSwitch+0x1>
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	09 f0       	breq	.+2      	; 0x27e <__vector_9+0x34>
 27c:	84 c0       	rjmp	.+264    	; 0x386 <__vector_9+0x13c>
	{
		
		sensor.init();
 27e:	84 e0       	ldi	r24, 0x04	; 4
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	70 d2       	rcall	.+1248   	; 0x764 <_ZN2SW4initEv>
		
		switch (sensor.result)
 284:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <sensor+0x7>
 288:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <sensor+0x8>
 28c:	84 30       	cpi	r24, 0x04	; 4
 28e:	91 05       	cpc	r25, r1
 290:	39 f1       	breq	.+78     	; 0x2e0 <__vector_9+0x96>
 292:	30 f4       	brcc	.+12     	; 0x2a0 <__vector_9+0x56>
 294:	00 97       	sbiw	r24, 0x00	; 0
 296:	09 f4       	brne	.+2      	; 0x29a <__vector_9+0x50>
 298:	44 c0       	rjmp	.+136    	; 0x322 <__vector_9+0xd8>
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	59 f0       	breq	.+22     	; 0x2b4 <__vector_9+0x6a>
 29e:	73 c0       	rjmp	.+230    	; 0x386 <__vector_9+0x13c>
 2a0:	80 31       	cpi	r24, 0x10	; 16
 2a2:	91 05       	cpc	r25, r1
 2a4:	99 f1       	breq	.+102    	; 0x30c <__vector_9+0xc2>
 2a6:	84 31       	cpi	r24, 0x14	; 20
 2a8:	91 05       	cpc	r25, r1
 2aa:	29 f1       	breq	.+74     	; 0x2f6 <__vector_9+0xac>
 2ac:	05 97       	sbiw	r24, 0x05	; 5
 2ae:	09 f0       	breq	.+2      	; 0x2b2 <__vector_9+0x68>
 2b0:	6a c0       	rjmp	.+212    	; 0x386 <__vector_9+0x13c>
 2b2:	0b c0       	rjmp	.+22     	; 0x2ca <__vector_9+0x80>
		{
			case 0x01:
				leftCW.setSpeed(2);
 2b4:	62 e0       	ldi	r22, 0x02	; 2
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	86 e1       	ldi	r24, 0x16	; 22
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	29 d2       	rcall	.+1106   	; 0x710 <_ZN5Motor8setSpeedEi>
				rightCCW.setSpeed(3);
 2be:	63 e0       	ldi	r22, 0x03	; 3
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	8b e1       	ldi	r24, 0x1B	; 27
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	24 d2       	rcall	.+1096   	; 0x710 <_ZN5Motor8setSpeedEi>
				break;
 2c8:	5e c0       	rjmp	.+188    	; 0x386 <__vector_9+0x13c>
			
			case 0x05:
				leftCW.setSpeed(3);
 2ca:	63 e0       	ldi	r22, 0x03	; 3
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	86 e1       	ldi	r24, 0x16	; 22
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	1e d2       	rcall	.+1084   	; 0x710 <_ZN5Motor8setSpeedEi>
				rightCCW.setSpeed(4);
 2d4:	64 e0       	ldi	r22, 0x04	; 4
 2d6:	70 e0       	ldi	r23, 0x00	; 0
 2d8:	8b e1       	ldi	r24, 0x1B	; 27
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	19 d2       	rcall	.+1074   	; 0x710 <_ZN5Motor8setSpeedEi>
				break;
			
			case 0x04:
				leftCW.setSpeed(4);
 2de:	53 c0       	rjmp	.+166    	; 0x386 <__vector_9+0x13c>
 2e0:	64 e0       	ldi	r22, 0x04	; 4
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	86 e1       	ldi	r24, 0x16	; 22
 2e6:	91 e0       	ldi	r25, 0x01	; 1
				rightCCW.setSpeed(4);
 2e8:	13 d2       	rcall	.+1062   	; 0x710 <_ZN5Motor8setSpeedEi>
 2ea:	64 e0       	ldi	r22, 0x04	; 4
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	8b e1       	ldi	r24, 0x1B	; 27
 2f0:	91 e0       	ldi	r25, 0x01	; 1
				break;
 2f2:	0e d2       	rcall	.+1052   	; 0x710 <_ZN5Motor8setSpeedEi>
			
			case 0x14:
				leftCW.setSpeed(4);
 2f4:	48 c0       	rjmp	.+144    	; 0x386 <__vector_9+0x13c>
 2f6:	64 e0       	ldi	r22, 0x04	; 4
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	86 e1       	ldi	r24, 0x16	; 22
 2fc:	91 e0       	ldi	r25, 0x01	; 1
				rightCCW.setSpeed(3);
 2fe:	08 d2       	rcall	.+1040   	; 0x710 <_ZN5Motor8setSpeedEi>
 300:	63 e0       	ldi	r22, 0x03	; 3
 302:	70 e0       	ldi	r23, 0x00	; 0
 304:	8b e1       	ldi	r24, 0x1B	; 27
 306:	91 e0       	ldi	r25, 0x01	; 1
				break;
 308:	03 d2       	rcall	.+1030   	; 0x710 <_ZN5Motor8setSpeedEi>
			
			case 0x10:
				leftCW.setSpeed(3);
 30a:	3d c0       	rjmp	.+122    	; 0x386 <__vector_9+0x13c>
 30c:	63 e0       	ldi	r22, 0x03	; 3
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	86 e1       	ldi	r24, 0x16	; 22
 312:	91 e0       	ldi	r25, 0x01	; 1
				rightCCW.setSpeed(2);
 314:	fd d1       	rcall	.+1018   	; 0x710 <_ZN5Motor8setSpeedEi>
 316:	62 e0       	ldi	r22, 0x02	; 2
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	8b e1       	ldi	r24, 0x1B	; 27
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	f8 d1       	rcall	.+1008   	; 0x710 <_ZN5Motor8setSpeedEi>
				break;
			
			case 0x00:
				if (oldData == 0x01)
 320:	32 c0       	rjmp	.+100    	; 0x386 <__vector_9+0x13c>
 322:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 326:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
				{
					leftCW.setSpeed(0);
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	59 f4       	brne	.+22     	; 0x344 <__vector_9+0xfa>
 32e:	60 e0       	ldi	r22, 0x00	; 0
 330:	70 e0       	ldi	r23, 0x00	; 0
 332:	86 e1       	ldi	r24, 0x16	; 22
 334:	91 e0       	ldi	r25, 0x01	; 1
					rightCCW.setSpeed(2);
 336:	ec d1       	rcall	.+984    	; 0x710 <_ZN5Motor8setSpeedEi>
 338:	62 e0       	ldi	r22, 0x02	; 2
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	8b e1       	ldi	r24, 0x1B	; 27
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	e7 d1       	rcall	.+974    	; 0x710 <_ZN5Motor8setSpeedEi>
				}

				else if (oldData == 0x10)
 342:	21 c0       	rjmp	.+66     	; 0x386 <__vector_9+0x13c>
 344:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 348:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
				{
					leftCW.setSpeed(2);
 34c:	40 97       	sbiw	r24, 0x10	; 16
 34e:	59 f4       	brne	.+22     	; 0x366 <__vector_9+0x11c>
 350:	62 e0       	ldi	r22, 0x02	; 2
 352:	70 e0       	ldi	r23, 0x00	; 0
 354:	86 e1       	ldi	r24, 0x16	; 22
 356:	91 e0       	ldi	r25, 0x01	; 1
					rightCCW.setSpeed(0);
 358:	db d1       	rcall	.+950    	; 0x710 <_ZN5Motor8setSpeedEi>
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	8b e1       	ldi	r24, 0x1B	; 27
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	d6 d1       	rcall	.+940    	; 0x710 <_ZN5Motor8setSpeedEi>
				}
				
				else if (oldData == 0x04)
 364:	10 c0       	rjmp	.+32     	; 0x386 <__vector_9+0x13c>
 366:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 36a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
				{
					leftCW.setSpeed(3);
 36e:	04 97       	sbiw	r24, 0x04	; 4
 370:	51 f4       	brne	.+20     	; 0x386 <__vector_9+0x13c>
 372:	63 e0       	ldi	r22, 0x03	; 3
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	86 e1       	ldi	r24, 0x16	; 22
 378:	91 e0       	ldi	r25, 0x01	; 1
					rightCCW.setSpeed(3);
 37a:	ca d1       	rcall	.+916    	; 0x710 <_ZN5Motor8setSpeedEi>
 37c:	63 e0       	ldi	r22, 0x03	; 3
 37e:	70 e0       	ldi	r23, 0x00	; 0
 380:	8b e1       	ldi	r24, 0x1B	; 27
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	c5 d1       	rcall	.+906    	; 0x710 <_ZN5Motor8setSpeedEi>
				break;
		}
		
	}
	
	if (sensor.result != 0x00)
 386:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <sensor+0x7>
 38a:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <sensor+0x8>
 38e:	89 2b       	or	r24, r25
 390:	49 f0       	breq	.+18     	; 0x3a4 <__vector_9+0x15a>
	{
		oldData = sensor.result;
 392:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <sensor+0x7>
 396:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <sensor+0x8>
 39a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 39e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 3a2:	08 c0       	rjmp	.+16     	; 0x3b4 <__vector_9+0x16a>
	}

	else
	{
		oldData = oldData;
 3a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3a8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3ac:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	
}
 3b4:	ff 91       	pop	r31
 3b6:	ef 91       	pop	r30
 3b8:	bf 91       	pop	r27
 3ba:	af 91       	pop	r26
 3bc:	9f 91       	pop	r25
 3be:	8f 91       	pop	r24
 3c0:	7f 91       	pop	r23
 3c2:	6f 91       	pop	r22
 3c4:	5f 91       	pop	r21
 3c6:	4f 91       	pop	r20
 3c8:	3f 91       	pop	r19
 3ca:	2f 91       	pop	r18
 3cc:	0f 90       	pop	r0
 3ce:	0b be       	out	0x3b, r0	; 59
 3d0:	0f 90       	pop	r0
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	0f 90       	pop	r0
 3d6:	1f 90       	pop	r1
 3d8:	18 95       	reti

000003da <_GLOBAL__sub_I_rightCCW>:
 3da:	6f ef       	ldi	r22, 0xFF	; 255
 3dc:	7f ef       	ldi	r23, 0xFF	; 255
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	8d ce       	rjmp	.-742    	; 0xfe <_Z41__static_initialization_and_destruction_0ii>
 3e4:	08 95       	ret

000003e6 <_ZN3MCU9insertBitEib>:
	else if (extendIndex >= 4)
	{
		EICRB = 0x00;
	}
	
}
 3e6:	66 23       	and	r22, r22
 3e8:	51 f0       	breq	.+20     	; 0x3fe <_ZN3MCU9insertBitEib+0x18>
 3ea:	21 e0       	ldi	r18, 0x01	; 1
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	a9 01       	movw	r20, r18
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <_ZN3MCU9insertBitEib+0x10>
 3f2:	44 0f       	add	r20, r20
 3f4:	55 1f       	adc	r21, r21
 3f6:	8a 95       	dec	r24
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <_ZN3MCU9insertBitEib+0xc>
 3fa:	ca 01       	movw	r24, r20
 3fc:	08 95       	ret
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	08 95       	ret

00000404 <_ZN3MCU7Setting9beginPortEib>:
 404:	66 23       	and	r22, r22
 406:	11 f0       	breq	.+4      	; 0x40c <_ZN3MCU7Setting9beginPortEib+0x8>
 408:	2f ef       	ldi	r18, 0xFF	; 255
 40a:	01 c0       	rjmp	.+2      	; 0x40e <_ZN3MCU7Setting9beginPortEib+0xa>
 40c:	20 e0       	ldi	r18, 0x00	; 0
 40e:	82 30       	cpi	r24, 0x02	; 2
 410:	91 05       	cpc	r25, r1
 412:	99 f0       	breq	.+38     	; 0x43a <_ZN3MCU7Setting9beginPortEib+0x36>
 414:	2c f4       	brge	.+10     	; 0x420 <_ZN3MCU7Setting9beginPortEib+0x1c>
 416:	00 97       	sbiw	r24, 0x00	; 0
 418:	51 f0       	breq	.+20     	; 0x42e <_ZN3MCU7Setting9beginPortEib+0x2a>
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	59 f0       	breq	.+22     	; 0x434 <_ZN3MCU7Setting9beginPortEib+0x30>
 41e:	08 95       	ret
 420:	84 30       	cpi	r24, 0x04	; 4
 422:	91 05       	cpc	r25, r1
 424:	81 f0       	breq	.+32     	; 0x446 <_ZN3MCU7Setting9beginPortEib+0x42>
 426:	64 f0       	brlt	.+24     	; 0x440 <_ZN3MCU7Setting9beginPortEib+0x3c>
 428:	05 97       	sbiw	r24, 0x05	; 5
 42a:	81 f0       	breq	.+32     	; 0x44c <_ZN3MCU7Setting9beginPortEib+0x48>
 42c:	08 95       	ret
 42e:	2a bb       	out	0x1a, r18	; 26
 430:	1b ba       	out	0x1b, r1	; 27
 432:	08 95       	ret
 434:	27 bb       	out	0x17, r18	; 23
 436:	18 ba       	out	0x18, r1	; 24
 438:	08 95       	ret
 43a:	24 bb       	out	0x14, r18	; 20
 43c:	15 ba       	out	0x15, r1	; 21
 43e:	08 95       	ret
 440:	21 bb       	out	0x11, r18	; 17
 442:	12 ba       	out	0x12, r1	; 18
 444:	08 95       	ret
 446:	22 b9       	out	0x02, r18	; 2
 448:	13 b8       	out	0x03, r1	; 3
 44a:	08 95       	ret
 44c:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 450:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 454:	08 95       	ret

00000456 <_ZN3MCU7Setting10beginTimerEii>:
//----------------------------------------*/

void MCU::Setting::beginTimer (int timerIndex, int timerMode)
{
	
	switch (timerIndex)
 456:	81 30       	cpi	r24, 0x01	; 1
 458:	91 05       	cpc	r25, r1
 45a:	09 f4       	brne	.+2      	; 0x45e <_ZN3MCU7Setting10beginTimerEii+0x8>
 45c:	49 c0       	rjmp	.+146    	; 0x4f0 <_ZN3MCU7Setting10beginTimerEii+0x9a>
 45e:	1c f4       	brge	.+6      	; 0x466 <_ZN3MCU7Setting10beginTimerEii+0x10>
 460:	89 2b       	or	r24, r25
 462:	41 f0       	breq	.+16     	; 0x474 <_ZN3MCU7Setting10beginTimerEii+0x1e>
 464:	08 95       	ret
 466:	82 30       	cpi	r24, 0x02	; 2
 468:	91 05       	cpc	r25, r1
 46a:	19 f1       	breq	.+70     	; 0x4b2 <_ZN3MCU7Setting10beginTimerEii+0x5c>
 46c:	03 97       	sbiw	r24, 0x03	; 3
 46e:	09 f4       	brne	.+2      	; 0x472 <_ZN3MCU7Setting10beginTimerEii+0x1c>
 470:	63 c0       	rjmp	.+198    	; 0x538 <_ZN3MCU7Setting10beginTimerEii+0xe2>
 472:	08 95       	ret
	{
		// TIMER INTERRUPT 0, 2 (8 BIT)
		case 0:
			if (timerMode == OVF)
 474:	68 30       	cpi	r22, 0x08	; 8
 476:	71 05       	cpc	r23, r1
 478:	59 f4       	brne	.+22     	; 0x490 <_ZN3MCU7Setting10beginTimerEii+0x3a>
			{
				TIMSK += insertBit(0, HIGH);
 47a:	61 e0       	ldi	r22, 0x01	; 1
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	b2 df       	rcall	.-156    	; 0x3e6 <_ZN3MCU9insertBitEib>
 482:	97 b7       	in	r25, 0x37	; 55
 484:	89 0f       	add	r24, r25
 486:	87 bf       	out	0x37, r24	; 55
				
				TCCR0 = 0x07;		// 1024, Normal Mode
 488:	87 e0       	ldi	r24, 0x07	; 7
 48a:	83 bf       	out	0x33, r24	; 51
				TCNT0 = 0x00;		// Start Counting 0x00
 48c:	12 be       	out	0x32, r1	; 50
 48e:	08 95       	ret
			}
			
			else if (timerMode == COMP)
 490:	67 30       	cpi	r22, 0x07	; 7
 492:	71 05       	cpc	r23, r1
 494:	09 f0       	breq	.+2      	; 0x498 <_ZN3MCU7Setting10beginTimerEii+0x42>
 496:	81 c0       	rjmp	.+258    	; 0x59a <_ZN3MCU7Setting10beginTimerEii+0x144>
			{
				TIMSK += insertBit(1, HIGH);
 498:	61 e0       	ldi	r22, 0x01	; 1
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	a3 df       	rcall	.-186    	; 0x3e6 <_ZN3MCU9insertBitEib>
 4a0:	97 b7       	in	r25, 0x37	; 55
 4a2:	89 0f       	add	r24, r25
 4a4:	87 bf       	out	0x37, r24	; 55
				
				TCCR0 = 0x0F;		// 1024, CTC Mode
 4a6:	8f e0       	ldi	r24, 0x0F	; 15
 4a8:	83 bf       	out	0x33, r24	; 51
				TCNT0 = 0x00;		// Start Counting 0x00
 4aa:	12 be       	out	0x32, r1	; 50
				OCR0 = 0xFF;		// Compare with 0xFF
 4ac:	8f ef       	ldi	r24, 0xFF	; 255
 4ae:	81 bf       	out	0x31, r24	; 49
 4b0:	08 95       	ret
			}
			
			break;
		
		case 2:
			if (timerMode == OVF)
 4b2:	68 30       	cpi	r22, 0x08	; 8
 4b4:	71 05       	cpc	r23, r1
 4b6:	59 f4       	brne	.+22     	; 0x4ce <_ZN3MCU7Setting10beginTimerEii+0x78>
			{
				TIMSK += insertBit(6, HIGH);
 4b8:	61 e0       	ldi	r22, 0x01	; 1
 4ba:	86 e0       	ldi	r24, 0x06	; 6
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	93 df       	rcall	.-218    	; 0x3e6 <_ZN3MCU9insertBitEib>
 4c0:	97 b7       	in	r25, 0x37	; 55
 4c2:	89 0f       	add	r24, r25
 4c4:	87 bf       	out	0x37, r24	; 55
				
				TCCR2 = 0x05;		// 1024, Normal Mode
 4c6:	85 e0       	ldi	r24, 0x05	; 5
 4c8:	85 bd       	out	0x25, r24	; 37
				TCNT2 = 0x00;		// Start Counting 0x00
 4ca:	14 bc       	out	0x24, r1	; 36
 4cc:	08 95       	ret
			}
			
			else if (timerMode == COMP)
 4ce:	67 30       	cpi	r22, 0x07	; 7
 4d0:	71 05       	cpc	r23, r1
 4d2:	09 f0       	breq	.+2      	; 0x4d6 <_ZN3MCU7Setting10beginTimerEii+0x80>
 4d4:	62 c0       	rjmp	.+196    	; 0x59a <_ZN3MCU7Setting10beginTimerEii+0x144>
			{
				TIMSK += insertBit(7, HIGH);
 4d6:	61 e0       	ldi	r22, 0x01	; 1
 4d8:	87 e0       	ldi	r24, 0x07	; 7
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	84 df       	rcall	.-248    	; 0x3e6 <_ZN3MCU9insertBitEib>
 4de:	97 b7       	in	r25, 0x37	; 55
 4e0:	89 0f       	add	r24, r25
 4e2:	87 bf       	out	0x37, r24	; 55
				
				TCCR2 = 0x0D;		// 1024, CTC Mode
 4e4:	8d e0       	ldi	r24, 0x0D	; 13
 4e6:	85 bd       	out	0x25, r24	; 37
				TCNT2 = 0x00;		// Start Counting 0x00
 4e8:	14 bc       	out	0x24, r1	; 36
				OCR2 = 0xA0;		// Compare with 0xA0
 4ea:	80 ea       	ldi	r24, 0xA0	; 160
 4ec:	83 bd       	out	0x23, r24	; 35
 4ee:	08 95       	ret
			
			break;
		
		// TIMER INTERRUPT 1, 3 (16 BIT)
		case 1:
			if (timerMode == OVF)
 4f0:	68 30       	cpi	r22, 0x08	; 8
 4f2:	71 05       	cpc	r23, r1
			{
				TIMSK += insertBit(2, HIGH);
 4f4:	69 f4       	brne	.+26     	; 0x510 <_ZN3MCU7Setting10beginTimerEii+0xba>
 4f6:	61 e0       	ldi	r22, 0x01	; 1
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	74 df       	rcall	.-280    	; 0x3e6 <_ZN3MCU9insertBitEib>
 4fe:	97 b7       	in	r25, 0x37	; 55
 500:	89 0f       	add	r24, r25
 502:	87 bf       	out	0x37, r24	; 55
				
				TCCR1A = 0x00;
 504:	1f bc       	out	0x2f, r1	; 47
				TCCR1B = 0x05;		// 1024, Normal Mode
 506:	85 e0       	ldi	r24, 0x05	; 5
 508:	8e bd       	out	0x2e, r24	; 46
				TCNT1H = 0x00;
 50a:	1d bc       	out	0x2d, r1	; 45
				TCNT1L = 0x00;		// Start Counting 0x0000
 50c:	1c bc       	out	0x2c, r1	; 44
 50e:	08 95       	ret
			}
			
			else if (timerMode == COMP)
 510:	67 30       	cpi	r22, 0x07	; 7
 512:	71 05       	cpc	r23, r1
 514:	09 f0       	breq	.+2      	; 0x518 <_ZN3MCU7Setting10beginTimerEii+0xc2>
			{
				TIMSK += insertBit(4, HIGH);
 516:	41 c0       	rjmp	.+130    	; 0x59a <_ZN3MCU7Setting10beginTimerEii+0x144>
 518:	61 e0       	ldi	r22, 0x01	; 1
 51a:	84 e0       	ldi	r24, 0x04	; 4
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	63 df       	rcall	.-314    	; 0x3e6 <_ZN3MCU9insertBitEib>
 520:	97 b7       	in	r25, 0x37	; 55
 522:	89 0f       	add	r24, r25
 524:	87 bf       	out	0x37, r24	; 55
				
				TCCR1A = 0x00;
 526:	1f bc       	out	0x2f, r1	; 47
				TCCR1B = 0x0D;		// 1024, CTC Mode
 528:	8d e0       	ldi	r24, 0x0D	; 13
 52a:	8e bd       	out	0x2e, r24	; 46
				TCNT1H = 0x00;
 52c:	1d bc       	out	0x2d, r1	; 45
				TCNT1L = 0x00;		// Start Counting 0x0000
 52e:	1c bc       	out	0x2c, r1	; 44
				OCR1AH = 0xFF;
 530:	8f ef       	ldi	r24, 0xFF	; 255
 532:	8b bd       	out	0x2b, r24	; 43
				OCR1AL = 0xFF;		// Compare with 0xFFFF
 534:	8a bd       	out	0x2a, r24	; 42
 536:	08 95       	ret
			}
			
			break;
		
		case 3:
			if (timerMode == OVF)
 538:	68 30       	cpi	r22, 0x08	; 8
 53a:	71 05       	cpc	r23, r1
			{
				ETIMSK += insertBit(2, HIGH);
 53c:	99 f4       	brne	.+38     	; 0x564 <_ZN3MCU7Setting10beginTimerEii+0x10e>
 53e:	61 e0       	ldi	r22, 0x01	; 1
 540:	82 e0       	ldi	r24, 0x02	; 2
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	50 df       	rcall	.-352    	; 0x3e6 <_ZN3MCU9insertBitEib>
 546:	ed e7       	ldi	r30, 0x7D	; 125
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	90 81       	ld	r25, Z
 54c:	89 0f       	add	r24, r25
 54e:	80 83       	st	Z, r24
				
				TCCR3A = 0x00;
 550:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
				TCCR3B = 0x05;		// 1024, Normal Mode
 554:	85 e0       	ldi	r24, 0x05	; 5
 556:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				TCNT3H = 0x00;
 55a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
				TCNT3L = 0x00;		// Start Counting 0x0000
 55e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			}
			
			else if (timerMode == COMP)
 562:	08 95       	ret
 564:	67 30       	cpi	r22, 0x07	; 7
 566:	71 05       	cpc	r23, r1
			{
				ETIMSK += insertBit(4, HIGH);
 568:	c1 f4       	brne	.+48     	; 0x59a <_ZN3MCU7Setting10beginTimerEii+0x144>
 56a:	61 e0       	ldi	r22, 0x01	; 1
 56c:	84 e0       	ldi	r24, 0x04	; 4
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	3a df       	rcall	.-396    	; 0x3e6 <_ZN3MCU9insertBitEib>
 572:	ed e7       	ldi	r30, 0x7D	; 125
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	90 81       	ld	r25, Z
 578:	89 0f       	add	r24, r25
 57a:	80 83       	st	Z, r24
				
				TCCR3A = 0x00;
 57c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
				TCCR3B = 0x0D;		// 1024, CTC Mode
 580:	8d e0       	ldi	r24, 0x0D	; 13
 582:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				TCNT3H = 0x00;
 586:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
				TCNT3L = 0x00;		// Start Counting 0x0000
 58a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				OCR3AH = 0x3D;
 58e:	8d e3       	ldi	r24, 0x3D	; 61
 590:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
				OCR3AL = 0x09;		// Compare with 0x3D09
 594:	89 e0       	ldi	r24, 0x09	; 9
 596:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 59a:	08 95       	ret

0000059c <_ZN3MCU7Setting8beginPWMEi>:
/*----------------------------------------//
		  Begin Timer Interrupt
//----------------------------------------*/

void MCU::Setting::beginPWM (int PWMPin)
{
 59c:	cf 93       	push	r28
 59e:	df 93       	push	r29
	
	switch (PWMPin)
 5a0:	88 30       	cpi	r24, 0x08	; 8
 5a2:	91 05       	cpc	r25, r1
 5a4:	08 f0       	brcs	.+2      	; 0x5a8 <_ZN3MCU7Setting8beginPWMEi+0xc>
 5a6:	6b c0       	rjmp	.+214    	; 0x67e <_ZN3MCU7Setting8beginPWMEi+0xe2>
 5a8:	fc 01       	movw	r30, r24
 5aa:	ea 5b       	subi	r30, 0xBA	; 186
 5ac:	ff 4f       	sbci	r31, 0xFF	; 255
 5ae:	2b c1       	rjmp	.+598    	; 0x806 <__tablejump2__>
	{
		// TIMER PWM 0, 2 (8 BIT)
		case OC0:
			TCCR0 = 0x6E;		// 256, Fast PWM Mode
 5b0:	8e e6       	ldi	r24, 0x6E	; 110
 5b2:	83 bf       	out	0x33, r24	; 51
			TCNT0 = 0x00;		// Start Counting 0x00
 5b4:	12 be       	out	0x32, r1	; 50
			break;
 5b6:	63 c0       	rjmp	.+198    	; 0x67e <_ZN3MCU7Setting8beginPWMEi+0xe2>
		
		case OC2:
			TCCR2 = 0x6C;		// 256, Fast PWM Mode
 5b8:	8c e6       	ldi	r24, 0x6C	; 108
 5ba:	85 bd       	out	0x25, r24	; 37
			TCNT2 = 0x00;		// Start Counting 0x00
 5bc:	14 bc       	out	0x24, r1	; 36
			break;
 5be:	5f c0       	rjmp	.+190    	; 0x67e <_ZN3MCU7Setting8beginPWMEi+0xe2>
		
		// TIMER PWM 1, 3 (8, 9, 10 BIT)
		case OC1A:
			TCCR1A |= insertBit(0, HIGH);
 5c0:	61 e0       	ldi	r22, 0x01	; 1
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	0f df       	rcall	.-482    	; 0x3e6 <_ZN3MCU9insertBitEib>
 5c8:	9f b5       	in	r25, 0x2f	; 47
 5ca:	89 2b       	or	r24, r25
 5cc:	8f bd       	out	0x2f, r24	; 47
			TCCR1A |= insertBit(7, HIGH);
 5ce:	61 e0       	ldi	r22, 0x01	; 1
 5d0:	87 e0       	ldi	r24, 0x07	; 7
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	08 df       	rcall	.-496    	; 0x3e6 <_ZN3MCU9insertBitEib>
 5d6:	9f b5       	in	r25, 0x2f	; 47
 5d8:	89 2b       	or	r24, r25
 5da:	8f bd       	out	0x2f, r24	; 47
			break;
 5dc:	50 c0       	rjmp	.+160    	; 0x67e <_ZN3MCU7Setting8beginPWMEi+0xe2>
			
		case OC1B:
			TCCR1A |= insertBit(0, HIGH);
 5de:	61 e0       	ldi	r22, 0x01	; 1
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	00 df       	rcall	.-512    	; 0x3e6 <_ZN3MCU9insertBitEib>
 5e6:	9f b5       	in	r25, 0x2f	; 47
 5e8:	89 2b       	or	r24, r25
 5ea:	8f bd       	out	0x2f, r24	; 47
			TCCR1A |= insertBit(5, HIGH);
 5ec:	61 e0       	ldi	r22, 0x01	; 1
 5ee:	85 e0       	ldi	r24, 0x05	; 5
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	f9 de       	rcall	.-526    	; 0x3e6 <_ZN3MCU9insertBitEib>
 5f4:	9f b5       	in	r25, 0x2f	; 47
 5f6:	89 2b       	or	r24, r25
 5f8:	8f bd       	out	0x2f, r24	; 47
			break;
 5fa:	41 c0       	rjmp	.+130    	; 0x67e <_ZN3MCU7Setting8beginPWMEi+0xe2>
			
		case OC1C:
			TCCR1A |= insertBit(0, HIGH);
 5fc:	61 e0       	ldi	r22, 0x01	; 1
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	f1 de       	rcall	.-542    	; 0x3e6 <_ZN3MCU9insertBitEib>
 604:	9f b5       	in	r25, 0x2f	; 47
 606:	89 2b       	or	r24, r25
 608:	8f bd       	out	0x2f, r24	; 47
			TCCR1A |= insertBit(3, HIGH);
 60a:	61 e0       	ldi	r22, 0x01	; 1
 60c:	83 e0       	ldi	r24, 0x03	; 3
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	ea de       	rcall	.-556    	; 0x3e6 <_ZN3MCU9insertBitEib>
 612:	9f b5       	in	r25, 0x2f	; 47
 614:	89 2b       	or	r24, r25
 616:	8f bd       	out	0x2f, r24	; 47
			break;
 618:	32 c0       	rjmp	.+100    	; 0x67e <_ZN3MCU7Setting8beginPWMEi+0xe2>
		
		case OC3A:
			TCCR3A |= insertBit(0, HIGH);
 61a:	61 e0       	ldi	r22, 0x01	; 1
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	e2 de       	rcall	.-572    	; 0x3e6 <_ZN3MCU9insertBitEib>
 622:	cb e8       	ldi	r28, 0x8B	; 139
 624:	d0 e0       	ldi	r29, 0x00	; 0
 626:	98 81       	ld	r25, Y
 628:	89 2b       	or	r24, r25
 62a:	88 83       	st	Y, r24
			TCCR3A |= insertBit(7, HIGH);
 62c:	61 e0       	ldi	r22, 0x01	; 1
 62e:	87 e0       	ldi	r24, 0x07	; 7
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	d9 de       	rcall	.-590    	; 0x3e6 <_ZN3MCU9insertBitEib>
 634:	98 81       	ld	r25, Y
 636:	89 2b       	or	r24, r25
 638:	88 83       	st	Y, r24
			break;
 63a:	21 c0       	rjmp	.+66     	; 0x67e <_ZN3MCU7Setting8beginPWMEi+0xe2>
			
		case OC3B:
			TCCR3A |= insertBit(0, HIGH);
 63c:	61 e0       	ldi	r22, 0x01	; 1
 63e:	80 e0       	ldi	r24, 0x00	; 0
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	d1 de       	rcall	.-606    	; 0x3e6 <_ZN3MCU9insertBitEib>
 644:	cb e8       	ldi	r28, 0x8B	; 139
 646:	d0 e0       	ldi	r29, 0x00	; 0
 648:	98 81       	ld	r25, Y
 64a:	89 2b       	or	r24, r25
 64c:	88 83       	st	Y, r24
			TCCR3A |= insertBit(5, HIGH);
 64e:	61 e0       	ldi	r22, 0x01	; 1
 650:	85 e0       	ldi	r24, 0x05	; 5
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	c8 de       	rcall	.-624    	; 0x3e6 <_ZN3MCU9insertBitEib>
 656:	98 81       	ld	r25, Y
 658:	89 2b       	or	r24, r25
 65a:	88 83       	st	Y, r24
			break;
 65c:	10 c0       	rjmp	.+32     	; 0x67e <_ZN3MCU7Setting8beginPWMEi+0xe2>
			
		case OC3C:
			TCCR3A |= insertBit(0, HIGH);
 65e:	61 e0       	ldi	r22, 0x01	; 1
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	c0 de       	rcall	.-640    	; 0x3e6 <_ZN3MCU9insertBitEib>
 666:	cb e8       	ldi	r28, 0x8B	; 139
 668:	d0 e0       	ldi	r29, 0x00	; 0
 66a:	98 81       	ld	r25, Y
 66c:	89 2b       	or	r24, r25
 66e:	88 83       	st	Y, r24
			TCCR3A |= insertBit(3, HIGH);
 670:	61 e0       	ldi	r22, 0x01	; 1
 672:	83 e0       	ldi	r24, 0x03	; 3
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	b7 de       	rcall	.-658    	; 0x3e6 <_ZN3MCU9insertBitEib>
 678:	98 81       	ld	r25, Y
 67a:	89 2b       	or	r24, r25
 67c:	88 83       	st	Y, r24
 67e:	8f b5       	in	r24, 0x2f	; 47
		
		default:
			break;
	}
	
	if (TCCR1A != 0x04)
 680:	84 30       	cpi	r24, 0x04	; 4
 682:	29 f0       	breq	.+10     	; 0x68e <_ZN3MCU7Setting8beginPWMEi+0xf2>
 684:	84 e0       	ldi	r24, 0x04	; 4
	{
		TCCR1B = 0x04;		// 256, Phase Correct PWM (8Bit)
 686:	8e bd       	out	0x2e, r24	; 46
 688:	1d bc       	out	0x2d, r1	; 45
		TCNT1H = 0x00;
 68a:	1c bc       	out	0x2c, r1	; 44
		TCNT1L = 0x00;		// Start Counting 0x0000
 68c:	0b c0       	rjmp	.+22     	; 0x6a4 <_ZN3MCU7Setting8beginPWMEi+0x108>
 68e:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	}
	
	else if (TCCR3A != 0x04)
 692:	84 30       	cpi	r24, 0x04	; 4
 694:	39 f0       	breq	.+14     	; 0x6a4 <_ZN3MCU7Setting8beginPWMEi+0x108>
 696:	84 e0       	ldi	r24, 0x04	; 4
	{
		TCCR3B = 0x04;		// 256, Phase Correct PWM (8Bit)
 698:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 69c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
		TCNT3H = 0x00;
 6a0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		TCNT3L = 0x00;		// Start Counting 0x0000
 6a4:	df 91       	pop	r29
	}
	
 6a6:	cf 91       	pop	r28
 6a8:	08 95       	ret

000006aa <_ZN5Motor9attachPinEi>:
//----------------------------------------*/

void Motor::attachPin(int pinValue)
{
	
	switch (m_MotorPin)
 6aa:	dc 01       	movw	r26, r24
 6ac:	ed 91       	ld	r30, X+
 6ae:	fc 91       	ld	r31, X
 6b0:	e8 30       	cpi	r30, 0x08	; 8
 6b2:	f1 05       	cpc	r31, r1
 6b4:	60 f5       	brcc	.+88     	; 0x70e <_ZN5Motor9attachPinEi+0x64>
 6b6:	e2 5b       	subi	r30, 0xB2	; 178
 6b8:	ff 4f       	sbci	r31, 0xFF	; 255
 6ba:	a5 c0       	rjmp	.+330    	; 0x806 <__tablejump2__>
	{
		// OC0
		case OC0:
			OCR0 = pinValue;
 6bc:	61 bf       	out	0x31, r22	; 49
			break;
 6be:	08 95       	ret
		
		// OC1A
		case OC1A:
			OCR1A = pinValue;
 6c0:	86 2f       	mov	r24, r22
 6c2:	97 2f       	mov	r25, r23
 6c4:	9b bd       	out	0x2b, r25	; 43
 6c6:	8a bd       	out	0x2a, r24	; 42
			break;
 6c8:	08 95       	ret
		
		// OC1B
		case OC1B:
			OCR1B = pinValue;
 6ca:	86 2f       	mov	r24, r22
 6cc:	97 2f       	mov	r25, r23
 6ce:	99 bd       	out	0x29, r25	; 41
 6d0:	88 bd       	out	0x28, r24	; 40
			break;
 6d2:	08 95       	ret
		
		// OC1C
		case OC1C:
			OCR1C = pinValue;
 6d4:	86 2f       	mov	r24, r22
 6d6:	97 2f       	mov	r25, r23
 6d8:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 6dc:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
			break;
 6e0:	08 95       	ret
		
		// OC2
		case OC2:
			OCR2 = pinValue;
 6e2:	63 bd       	out	0x23, r22	; 35
			break;
 6e4:	08 95       	ret
		
		// OC3A
		case OC3A:
			OCR3A = pinValue;
 6e6:	86 2f       	mov	r24, r22
 6e8:	97 2f       	mov	r25, r23
 6ea:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 6ee:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
			break;
 6f2:	08 95       	ret
		
		// OC3B
		case OC3B:
			OCR3B = pinValue;
 6f4:	86 2f       	mov	r24, r22
 6f6:	97 2f       	mov	r25, r23
 6f8:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 6fc:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
			break;
 700:	08 95       	ret
		
		// OC3C
		case OC3C:
			OCR3C = pinValue;
 702:	86 2f       	mov	r24, r22
 704:	97 2f       	mov	r25, r23
 706:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
 70a:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
 70e:	08 95       	ret

00000710 <_ZN5Motor8setSpeedEi>:
//----------------------------------------*/

void Motor::setSpeed (int speedValue)
{
	
	for (int i=0; i<=10; i++)
 710:	20 e0       	ldi	r18, 0x00	; 0
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	2b 30       	cpi	r18, 0x0B	; 11
 716:	31 05       	cpc	r19, r1
 718:	7c f4       	brge	.+30     	; 0x738 <_ZN5Motor8setSpeedEi+0x28>
	{
		if (speedValue == i)
 71a:	26 17       	cp	r18, r22
 71c:	37 07       	cpc	r19, r23
 71e:	49 f4       	brne	.+18     	; 0x732 <_ZN5Motor8setSpeedEi+0x22>
		{
			m_Speed = i * 25;
 720:	e9 e1       	ldi	r30, 0x19	; 25
 722:	e2 9f       	mul	r30, r18
 724:	a0 01       	movw	r20, r0
 726:	e3 9f       	mul	r30, r19
 728:	50 0d       	add	r21, r0
 72a:	11 24       	eor	r1, r1
 72c:	fc 01       	movw	r30, r24
 72e:	53 83       	std	Z+3, r21	; 0x03
 730:	42 83       	std	Z+2, r20	; 0x02
//----------------------------------------*/

void Motor::setSpeed (int speedValue)
{
	
	for (int i=0; i<=10; i++)
 732:	2f 5f       	subi	r18, 0xFF	; 255
 734:	3f 4f       	sbci	r19, 0xFF	; 255
 736:	ee cf       	rjmp	.-36     	; 0x714 <_ZN5Motor8setSpeedEi+0x4>
 738:	08 95       	ret

0000073a <_ZN5Motor5startEv>:
/*----------------------------------------//
			 	Start Motor
//----------------------------------------*/

void Motor::start (void)
{
 73a:	cf 93       	push	r28
 73c:	df 93       	push	r29
 73e:	ec 01       	movw	r28, r24
	attachPin(m_Speed);
 740:	6a 81       	ldd	r22, Y+2	; 0x02
 742:	7b 81       	ldd	r23, Y+3	; 0x03
 744:	b2 df       	rcall	.-156    	; 0x6aa <_ZN5Motor9attachPinEi>
	m_isOn = true;
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	8c 83       	std	Y+4, r24	; 0x04
}
 74a:	df 91       	pop	r29
 74c:	cf 91       	pop	r28
 74e:	08 95       	ret

00000750 <_ZN5Motor4stopEv>:
/*----------------------------------------//
			 	 Stop Motor
//----------------------------------------*/

void Motor::stop (void)
{
 750:	cf 93       	push	r28
 752:	df 93       	push	r29
 754:	ec 01       	movw	r28, r24
    attachPin(0);
 756:	60 e0       	ldi	r22, 0x00	; 0
 758:	70 e0       	ldi	r23, 0x00	; 0
 75a:	a7 df       	rcall	.-178    	; 0x6aa <_ZN5Motor9attachPinEi>
    m_isOn = false;
 75c:	1c 82       	std	Y+4, r1	; 0x04
 75e:	df 91       	pop	r29
 760:	cf 91       	pop	r28
 762:	08 95       	ret

00000764 <_ZN2SW4initEv>:
/*----------------------------------------//
			 Initialize Switch
//----------------------------------------*/

void SW::init (void)
{
 764:	fc 01       	movw	r30, r24
	
	switch (m_SwitchPort)
 766:	80 81       	ld	r24, Z
 768:	91 81       	ldd	r25, Z+1	; 0x01
 76a:	82 30       	cpi	r24, 0x02	; 2
 76c:	91 05       	cpc	r25, r1
 76e:	b9 f0       	breq	.+46     	; 0x79e <_ZN2SW4initEv+0x3a>
 770:	28 f4       	brcc	.+10     	; 0x77c <_ZN2SW4initEv+0x18>
 772:	00 97       	sbiw	r24, 0x00	; 0
 774:	51 f0       	breq	.+20     	; 0x78a <_ZN2SW4initEv+0x26>
 776:	01 97       	sbiw	r24, 0x01	; 1
 778:	69 f0       	breq	.+26     	; 0x794 <_ZN2SW4initEv+0x30>
 77a:	24 c0       	rjmp	.+72     	; 0x7c4 <_ZN2SW4initEv+0x60>
 77c:	84 30       	cpi	r24, 0x04	; 4
 77e:	91 05       	cpc	r25, r1
 780:	c1 f0       	breq	.+48     	; 0x7b2 <_ZN2SW4initEv+0x4e>
 782:	90 f0       	brcs	.+36     	; 0x7a8 <_ZN2SW4initEv+0x44>
 784:	05 97       	sbiw	r24, 0x05	; 5
 786:	d1 f0       	breq	.+52     	; 0x7bc <_ZN2SW4initEv+0x58>
 788:	1d c0       	rjmp	.+58     	; 0x7c4 <_ZN2SW4initEv+0x60>
	{
		// PORTA
		case A:
			m_NewValue = PINA;
 78a:	89 b3       	in	r24, 0x19	; 25
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	94 83       	std	Z+4, r25	; 0x04
 790:	83 83       	std	Z+3, r24	; 0x03
			break;
 792:	18 c0       	rjmp	.+48     	; 0x7c4 <_ZN2SW4initEv+0x60>
		
		// PORTB
		case B:
			m_NewValue = PINB;
 794:	86 b3       	in	r24, 0x16	; 22
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	94 83       	std	Z+4, r25	; 0x04
 79a:	83 83       	std	Z+3, r24	; 0x03
			break;
 79c:	13 c0       	rjmp	.+38     	; 0x7c4 <_ZN2SW4initEv+0x60>
		
		// PORTC
		case C:
			m_NewValue = PINC;
 79e:	83 b3       	in	r24, 0x13	; 19
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	94 83       	std	Z+4, r25	; 0x04
 7a4:	83 83       	std	Z+3, r24	; 0x03
			break;
 7a6:	0e c0       	rjmp	.+28     	; 0x7c4 <_ZN2SW4initEv+0x60>
		
		// PORTD
		case D:
			m_NewValue = PIND;
 7a8:	80 b3       	in	r24, 0x10	; 16
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	94 83       	std	Z+4, r25	; 0x04
 7ae:	83 83       	std	Z+3, r24	; 0x03
			break;
 7b0:	09 c0       	rjmp	.+18     	; 0x7c4 <_ZN2SW4initEv+0x60>
		
		// PORTE
		case E:
			m_NewValue = PINE;
 7b2:	81 b1       	in	r24, 0x01	; 1
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	94 83       	std	Z+4, r25	; 0x04
 7b8:	83 83       	std	Z+3, r24	; 0x03
			break;
 7ba:	04 c0       	rjmp	.+8      	; 0x7c4 <_ZN2SW4initEv+0x60>
		
		// PORTF
		case F:
			m_NewValue = PINF;
 7bc:	80 b1       	in	r24, 0x00	; 0
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	94 83       	std	Z+4, r25	; 0x04
 7c2:	83 83       	std	Z+3, r24	; 0x03
		
		default:
			break;
	}
	
	if (m_isReversal == true)
 7c4:	82 81       	ldd	r24, Z+2	; 0x02
 7c6:	88 23       	and	r24, r24
 7c8:	79 f0       	breq	.+30     	; 0x7e8 <_ZN2SW4initEv+0x84>
	{
		result = m_OldValue & ~m_NewValue;
 7ca:	25 81       	ldd	r18, Z+5	; 0x05
 7cc:	36 81       	ldd	r19, Z+6	; 0x06
 7ce:	83 81       	ldd	r24, Z+3	; 0x03
 7d0:	94 81       	ldd	r25, Z+4	; 0x04
 7d2:	80 95       	com	r24
 7d4:	90 95       	com	r25
 7d6:	82 23       	and	r24, r18
 7d8:	93 23       	and	r25, r19
 7da:	90 87       	std	Z+8, r25	; 0x08
 7dc:	87 83       	std	Z+7, r24	; 0x07
		m_OldValue = m_NewValue;
 7de:	83 81       	ldd	r24, Z+3	; 0x03
 7e0:	94 81       	ldd	r25, Z+4	; 0x04
 7e2:	96 83       	std	Z+6, r25	; 0x06
 7e4:	85 83       	std	Z+5, r24	; 0x05
 7e6:	08 95       	ret
	}
	
	else
	{
		result = m_OldValue & m_NewValue;
 7e8:	25 81       	ldd	r18, Z+5	; 0x05
 7ea:	36 81       	ldd	r19, Z+6	; 0x06
 7ec:	83 81       	ldd	r24, Z+3	; 0x03
 7ee:	94 81       	ldd	r25, Z+4	; 0x04
 7f0:	82 23       	and	r24, r18
 7f2:	93 23       	and	r25, r19
 7f4:	90 87       	std	Z+8, r25	; 0x08
 7f6:	87 83       	std	Z+7, r24	; 0x07
		m_OldValue = ~m_NewValue;
 7f8:	83 81       	ldd	r24, Z+3	; 0x03
 7fa:	94 81       	ldd	r25, Z+4	; 0x04
 7fc:	80 95       	com	r24
 7fe:	90 95       	com	r25
 800:	96 83       	std	Z+6, r25	; 0x06
 802:	85 83       	std	Z+5, r24	; 0x05
 804:	08 95       	ret

00000806 <__tablejump2__>:
 806:	ee 0f       	add	r30, r30
 808:	ff 1f       	adc	r31, r31
 80a:	00 24       	eor	r0, r0
 80c:	00 1c       	adc	r0, r0
 80e:	0b be       	out	0x3b, r0	; 59
 810:	07 90       	elpm	r0, Z+
 812:	f6 91       	elpm	r31, Z
 814:	e0 2d       	mov	r30, r0
 816:	09 94       	ijmp

00000818 <_exit>:
 818:	f8 94       	cli

0000081a <__stop_program>:
 81a:	ff cf       	rjmp	.-2      	; 0x81a <__stop_program>
