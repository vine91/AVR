
ATmega128A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000488  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  000004fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000052c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012ae  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000abe  00000000  00000000  000018c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000849  00000000  00000000  00002380  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00002bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000071b  00000000  00000000  00002d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ca  00000000  00000000  00003447  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003e11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	54 c0       	rjmp	.+168    	; 0xaa <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	80 c0       	rjmp	.+256    	; 0x132 <__vector_12>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	b9 00       	.word	0x00b9	; ????
  8e:	bb 00       	.word	0x00bb	; ????
  90:	bd 00       	.word	0x00bd	; ????
  92:	bf 00       	.word	0x00bf	; ????
  94:	c1 00       	.word	0x00c1	; ????
  96:	c3 00       	.word	0x00c3	; ????
  98:	c6 00       	.word	0x00c6	; ????
  9a:	7c 01       	movw	r14, r24
  9c:	7f 01       	movw	r14, r30
  9e:	82 01       	movw	r16, r4
  a0:	85 01       	movw	r16, r10
  a2:	88 01       	movw	r16, r16
  a4:	8b 01       	movw	r16, r22
  a6:	90 01       	movw	r18, r0

000000a8 <__ctors_start>:
  a8:	5b 01       	movw	r10, r22

000000aa <__ctors_end>:
  aa:	11 24       	eor	r1, r1
  ac:	1f be       	out	0x3f, r1	; 63
  ae:	cf ef       	ldi	r28, 0xFF	; 255
  b0:	d0 e1       	ldi	r29, 0x10	; 16
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
  b6:	11 e0       	ldi	r17, 0x01	; 1
  b8:	a0 e0       	ldi	r26, 0x00	; 0
  ba:	b1 e0       	ldi	r27, 0x01	; 1
  bc:	e8 e8       	ldi	r30, 0x88	; 136
  be:	f4 e0       	ldi	r31, 0x04	; 4
  c0:	00 e0       	ldi	r16, 0x00	; 0
  c2:	0b bf       	out	0x3b, r16	; 59
  c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x14>
  c6:	07 90       	elpm	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	a0 30       	cpi	r26, 0x00	; 0
  cc:	b1 07       	cpc	r27, r17
  ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x10>

000000d0 <__do_clear_bss>:
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
  d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
  da:	ac 30       	cpi	r26, 0x0C	; 12
  dc:	b2 07       	cpc	r27, r18
  de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>

000000e0 <__do_global_ctors>:
  e0:	10 e0       	ldi	r17, 0x00	; 0
  e2:	c5 e5       	ldi	r28, 0x55	; 85
  e4:	d0 e0       	ldi	r29, 0x00	; 0
  e6:	03 c0       	rjmp	.+6      	; 0xee <__do_global_ctors+0xe>
  e8:	21 97       	sbiw	r28, 0x01	; 1
  ea:	fe 01       	movw	r30, r28
  ec:	c2 d1       	rcall	.+900    	; 0x472 <__tablejump2__>
  ee:	c4 35       	cpi	r28, 0x54	; 84
  f0:	d1 07       	cpc	r29, r17
  f2:	d1 f7       	brne	.-12     	; 0xe8 <__do_global_ctors+0x8>
  f4:	6b d0       	rcall	.+214    	; 0x1cc <main>
  f6:	c6 c1       	rjmp	.+908    	; 0x484 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <_Z41__static_initialization_and_destruction_0ii>:
		
		default:
			break;
	}
	
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	c9 f4       	brne	.+50     	; 0x130 <_Z41__static_initialization_and_destruction_0ii+0x36>
  fe:	6f 3f       	cpi	r22, 0xFF	; 255
 100:	7f 4f       	sbci	r23, 0xFF	; 255
 102:	b1 f4       	brne	.+44     	; 0x130 <_Z41__static_initialization_and_destruction_0ii+0x36>

private:
	unsigned int m_TrafficPort;

public:
	Traffic (int trafficPort) { m_TrafficPort = trafficPort; }
 104:	85 e0       	ldi	r24, 0x05	; 5
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <east+0x1>
 10c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <east>
 110:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <north+0x1>
 114:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <north>
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <west+0x1>
 120:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <west>
 124:	84 e0       	ldi	r24, 0x04	; 4
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <south+0x1>
 12c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <south>
 130:	08 95       	ret

00000132 <__vector_12>:
--------------   MAIN END   ----------------
//========================================*/


ISR(TIMER1_COMPA_vect)
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
	count++;
 140:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 144:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <count+0x1>
 14e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count>
}
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <_ZN7Traffic10attachPortEi>:
//----------------------------------------*/

void Traffic::attachPort(int portValue)
{
	
	switch (m_TrafficPort)
 160:	dc 01       	movw	r26, r24
 162:	ed 91       	ld	r30, X+
 164:	fc 91       	ld	r31, X
 166:	e7 30       	cpi	r30, 0x07	; 7
 168:	f1 05       	cpc	r31, r1
 16a:	90 f4       	brcc	.+36     	; 0x190 <_ZN7Traffic10attachPortEi+0x30>
 16c:	ea 5b       	subi	r30, 0xBA	; 186
 16e:	ff 4f       	sbci	r31, 0xFF	; 255
 170:	80 c1       	rjmp	.+768    	; 0x472 <__tablejump2__>
	{
		// PORTA
		case A:
			PORTA = portValue;
 172:	6b bb       	out	0x1b, r22	; 27
			break;
 174:	08 95       	ret
		
		// PORTB
		case B:
			PORTB = portValue;
 176:	68 bb       	out	0x18, r22	; 24
			break;
 178:	08 95       	ret
		
		// PORTC
		case C:
			PORTC = portValue;
 17a:	65 bb       	out	0x15, r22	; 21
			break;
 17c:	08 95       	ret
		
		// PORTD
		case D:
			PORTD = portValue;
 17e:	62 bb       	out	0x12, r22	; 18
			break;
 180:	08 95       	ret
		
		// PORTE
		case E:
			PORTE = portValue;
 182:	63 b9       	out	0x03, r22	; 3
			break;
 184:	08 95       	ret
		
		// PORTF
		case F:
			PORTF = portValue;
 186:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
			break;
 18a:	08 95       	ret
		
		// PORTG
		case G:
			PORTG = portValue;
 18c:	60 93 65 00 	sts	0x0065, r22	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 190:	08 95       	ret

00000192 <_Z6selectii>:


void select(int directionValue, int signalValue)
{
	
	switch (directionValue)
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	91 05       	cpc	r25, r1
 196:	71 f0       	breq	.+28     	; 0x1b4 <_Z6selectii+0x22>
 198:	1c f4       	brge	.+6      	; 0x1a0 <_Z6selectii+0xe>
 19a:	89 2b       	or	r24, r25
 19c:	39 f0       	breq	.+14     	; 0x1ac <_Z6selectii+0x1a>
 19e:	08 95       	ret
 1a0:	82 30       	cpi	r24, 0x02	; 2
 1a2:	91 05       	cpc	r25, r1
 1a4:	59 f0       	breq	.+22     	; 0x1bc <_Z6selectii+0x2a>
 1a6:	03 97       	sbiw	r24, 0x03	; 3
 1a8:	69 f0       	breq	.+26     	; 0x1c4 <_Z6selectii+0x32>
 1aa:	08 95       	ret
	{
		case EAST:
			east.attachPort(signalValue);
 1ac:	8a e0       	ldi	r24, 0x0A	; 10
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	d7 cf       	rjmp	.-82     	; 0x160 <_ZN7Traffic10attachPortEi>
			break;
 1b2:	08 95       	ret
		
		case NORTH:
			north.attachPort(signalValue);
 1b4:	88 e0       	ldi	r24, 0x08	; 8
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	d3 cf       	rjmp	.-90     	; 0x160 <_ZN7Traffic10attachPortEi>
			break;
 1ba:	08 95       	ret
		
		case WEST:
			west.attachPort(signalValue);
 1bc:	86 e0       	ldi	r24, 0x06	; 6
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	cf cf       	rjmp	.-98     	; 0x160 <_ZN7Traffic10attachPortEi>
			break;
		
		case SOUTH:
			south.attachPort(signalValue);
 1c2:	08 95       	ret
 1c4:	84 e0       	ldi	r24, 0x04	; 4
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	cb cf       	rjmp	.-106    	; 0x160 <_ZN7Traffic10attachPortEi>
 1ca:	08 95       	ret

000001cc <main>:
-------------   MAIN START   ---------------
//========================================*/

int main (void)
{
	beginPort(B, OUT);
 1cc:	61 e0       	ldi	r22, 0x01	; 1
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	86 d0       	rcall	.+268    	; 0x2e0 <_ZN3MCU7Setting9beginPortEib>
	beginPort(E, OUT);
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	84 e0       	ldi	r24, 0x04	; 4
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	82 d0       	rcall	.+260    	; 0x2e0 <_ZN3MCU7Setting9beginPortEib>
	beginPort(F, OUT);
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	85 e0       	ldi	r24, 0x05	; 5
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	7e d0       	rcall	.+252    	; 0x2e0 <_ZN3MCU7Setting9beginPortEib>
	beginPort(A, OUT);
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	7a d0       	rcall	.+244    	; 0x2e0 <_ZN3MCU7Setting9beginPortEib>
	
	beginTimer(1, COMP);
 1ec:	63 e0       	ldi	r22, 0x03	; 3
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	9a d0       	rcall	.+308    	; 0x32a <_ZN3MCU7Setting10beginTimerEii>
	
	sei();
 1f6:	78 94       	sei
	
	while (true)
	{
		if (count == 0)
 1f8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 1fc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 200:	00 97       	sbiw	r24, 0x00	; 0
 202:	31 f5       	brne	.+76     	; 0x250 <main+0x84>
		{
			select(direction, 0xAC);
 204:	6c ea       	ldi	r22, 0xAC	; 172
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 20c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 210:	c0 df       	rcall	.-128    	; 0x192 <_Z6selectii>
			select( (direction+1)%4, 0xA1);
 212:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 216:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	61 ea       	ldi	r22, 0xA1	; 161
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	83 70       	andi	r24, 0x03	; 3
 222:	99 27       	eor	r25, r25
 224:	b6 df       	rcall	.-148    	; 0x192 <_Z6selectii>
			select( (direction+2)%4, 0xA1);
 226:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 22a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 22e:	02 96       	adiw	r24, 0x02	; 2
 230:	61 ea       	ldi	r22, 0xA1	; 161
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	83 70       	andi	r24, 0x03	; 3
 236:	99 27       	eor	r25, r25
 238:	ac df       	rcall	.-168    	; 0x192 <_Z6selectii>
			select( (direction+3)%4, 0x51);
 23a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 23e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 242:	03 96       	adiw	r24, 0x03	; 3
 244:	61 e5       	ldi	r22, 0x51	; 81
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	83 70       	andi	r24, 0x03	; 3
 24a:	99 27       	eor	r25, r25
 24c:	a2 df       	rcall	.-188    	; 0x192 <_Z6selectii>
 24e:	d4 cf       	rjmp	.-88     	; 0x1f8 <main+0x2c>
		}
		
		else if (count == 5)
 250:	85 30       	cpi	r24, 0x05	; 5
 252:	91 05       	cpc	r25, r1
		{
			select(direction, 0xA2);
 254:	91 f4       	brne	.+36     	; 0x27a <main+0xae>
 256:	62 ea       	ldi	r22, 0xA2	; 162
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 25e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			select( (direction+3)%4, 0xA1);
 262:	97 df       	rcall	.-210    	; 0x192 <_Z6selectii>
 264:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 268:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 26c:	03 96       	adiw	r24, 0x03	; 3
 26e:	61 ea       	ldi	r22, 0xA1	; 161
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	83 70       	andi	r24, 0x03	; 3
 274:	99 27       	eor	r25, r25
 276:	8d df       	rcall	.-230    	; 0x192 <_Z6selectii>
		}
		
		else if (count == 6)
 278:	bf cf       	rjmp	.-130    	; 0x1f8 <main+0x2c>
 27a:	06 97       	sbiw	r24, 0x06	; 6
 27c:	09 f0       	breq	.+2      	; 0x280 <main+0xb4>
		{
			select(direction, 0xA1);
 27e:	bc cf       	rjmp	.-136    	; 0x1f8 <main+0x2c>
 280:	61 ea       	ldi	r22, 0xA1	; 161
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 288:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 28c:	82 df       	rcall	.-252    	; 0x192 <_Z6selectii>
			
			direction++;
 28e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 292:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 296:	01 96       	adiw	r24, 0x01	; 1
 298:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 29c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			if (direction > 3)
 2a0:	04 97       	sbiw	r24, 0x04	; 4
 2a2:	20 f0       	brcs	.+8      	; 0x2ac <main+0xe0>
			{
				direction = 0;
 2a4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2a8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
			
			count = 0;
 2ac:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <count+0x1>
 2b0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <count>
 2b4:	a1 cf       	rjmp	.-190    	; 0x1f8 <main+0x2c>

000002b6 <_GLOBAL__sub_I_east>:
		
		default:
			break;
	}
	
 2b6:	6f ef       	ldi	r22, 0xFF	; 255
 2b8:	7f ef       	ldi	r23, 0xFF	; 255
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	1d cf       	rjmp	.-454    	; 0xfa <_Z41__static_initialization_and_destruction_0ii>
 2c0:	08 95       	ret

000002c2 <_ZN3MCU9insertBitEib>:
		
		default:
			break;
	}
	
}
 2c2:	66 23       	and	r22, r22
 2c4:	51 f0       	breq	.+20     	; 0x2da <_ZN3MCU9insertBitEib+0x18>
 2c6:	21 e0       	ldi	r18, 0x01	; 1
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	a9 01       	movw	r20, r18
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <_ZN3MCU9insertBitEib+0x10>
 2ce:	44 0f       	add	r20, r20
 2d0:	55 1f       	adc	r21, r21
 2d2:	8a 95       	dec	r24
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <_ZN3MCU9insertBitEib+0xc>
 2d6:	ca 01       	movw	r24, r20
 2d8:	08 95       	ret
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	08 95       	ret

000002e0 <_ZN3MCU7Setting9beginPortEib>:
 2e0:	66 23       	and	r22, r22
 2e2:	11 f0       	breq	.+4      	; 0x2e8 <_ZN3MCU7Setting9beginPortEib+0x8>
 2e4:	2f ef       	ldi	r18, 0xFF	; 255
 2e6:	01 c0       	rjmp	.+2      	; 0x2ea <_ZN3MCU7Setting9beginPortEib+0xa>
 2e8:	20 e0       	ldi	r18, 0x00	; 0
 2ea:	87 30       	cpi	r24, 0x07	; 7
 2ec:	91 05       	cpc	r25, r1
 2ee:	e0 f4       	brcc	.+56     	; 0x328 <_ZN3MCU7Setting9beginPortEib+0x48>
 2f0:	fc 01       	movw	r30, r24
 2f2:	e3 5b       	subi	r30, 0xB3	; 179
 2f4:	ff 4f       	sbci	r31, 0xFF	; 255
 2f6:	bd c0       	rjmp	.+378    	; 0x472 <__tablejump2__>
 2f8:	2a bb       	out	0x1a, r18	; 26
 2fa:	1b ba       	out	0x1b, r1	; 27
 2fc:	08 95       	ret
 2fe:	27 bb       	out	0x17, r18	; 23
 300:	18 ba       	out	0x18, r1	; 24
 302:	08 95       	ret
 304:	24 bb       	out	0x14, r18	; 20
 306:	15 ba       	out	0x15, r1	; 21
 308:	08 95       	ret
 30a:	21 bb       	out	0x11, r18	; 17
 30c:	12 ba       	out	0x12, r1	; 18
 30e:	08 95       	ret
 310:	22 b9       	out	0x02, r18	; 2
 312:	13 b8       	out	0x03, r1	; 3
 314:	08 95       	ret
 316:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 31a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 31e:	08 95       	ret
 320:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
 324:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 328:	08 95       	ret

0000032a <_ZN3MCU7Setting10beginTimerEii>:
//----------------------------------------*/

void MCU::Setting::beginTimer (int timerIndex, int timerMode)
{
	
	switch (timerIndex)
 32a:	81 30       	cpi	r24, 0x01	; 1
 32c:	91 05       	cpc	r25, r1
 32e:	09 f4       	brne	.+2      	; 0x332 <_ZN3MCU7Setting10beginTimerEii+0x8>
 330:	49 c0       	rjmp	.+146    	; 0x3c4 <_ZN3MCU7Setting10beginTimerEii+0x9a>
 332:	1c f4       	brge	.+6      	; 0x33a <_ZN3MCU7Setting10beginTimerEii+0x10>
 334:	89 2b       	or	r24, r25
 336:	41 f0       	breq	.+16     	; 0x348 <_ZN3MCU7Setting10beginTimerEii+0x1e>
 338:	08 95       	ret
 33a:	82 30       	cpi	r24, 0x02	; 2
 33c:	91 05       	cpc	r25, r1
 33e:	19 f1       	breq	.+70     	; 0x386 <_ZN3MCU7Setting10beginTimerEii+0x5c>
 340:	03 97       	sbiw	r24, 0x03	; 3
 342:	09 f4       	brne	.+2      	; 0x346 <_ZN3MCU7Setting10beginTimerEii+0x1c>
 344:	64 c0       	rjmp	.+200    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 346:	08 95       	ret
	{
		// TIMER INTERRUPT 0, 2 (8 BIT)
		case 0:
			if (timerMode == OVF)
 348:	64 30       	cpi	r22, 0x04	; 4
 34a:	71 05       	cpc	r23, r1
 34c:	59 f4       	brne	.+22     	; 0x364 <_ZN3MCU7Setting10beginTimerEii+0x3a>
			{
				TIMSK += insertBit(0, HIGH);
 34e:	61 e0       	ldi	r22, 0x01	; 1
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	b6 df       	rcall	.-148    	; 0x2c2 <_ZN3MCU9insertBitEib>
 356:	97 b7       	in	r25, 0x37	; 55
 358:	89 0f       	add	r24, r25
 35a:	87 bf       	out	0x37, r24	; 55
				
				TCCR0 = 0x07;		// 1024, Normal Mode
 35c:	87 e0       	ldi	r24, 0x07	; 7
 35e:	83 bf       	out	0x33, r24	; 51
				TCNT0 = 0x00;		// Start Counting 0x00
 360:	12 be       	out	0x32, r1	; 50
 362:	08 95       	ret
			}
			
			else if (timerMode == COMP)
 364:	63 30       	cpi	r22, 0x03	; 3
 366:	71 05       	cpc	r23, r1
 368:	09 f0       	breq	.+2      	; 0x36c <_ZN3MCU7Setting10beginTimerEii+0x42>
 36a:	82 c0       	rjmp	.+260    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
			{
				TIMSK += insertBit(1, HIGH);
 36c:	61 e0       	ldi	r22, 0x01	; 1
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	a7 df       	rcall	.-178    	; 0x2c2 <_ZN3MCU9insertBitEib>
 374:	97 b7       	in	r25, 0x37	; 55
 376:	89 0f       	add	r24, r25
 378:	87 bf       	out	0x37, r24	; 55
				
				TCCR0 = 0x0F;		// 1024, CTC Mode
 37a:	8f e0       	ldi	r24, 0x0F	; 15
 37c:	83 bf       	out	0x33, r24	; 51
				TCNT0 = 0x00;		// Start Counting 0x00
 37e:	12 be       	out	0x32, r1	; 50
				OCR0 = _OCR0;
 380:	8f ef       	ldi	r24, 0xFF	; 255
 382:	81 bf       	out	0x31, r24	; 49
 384:	08 95       	ret
			}
			
			break;
		
		case 2:
			if (timerMode == OVF)
 386:	64 30       	cpi	r22, 0x04	; 4
 388:	71 05       	cpc	r23, r1
 38a:	59 f4       	brne	.+22     	; 0x3a2 <_ZN3MCU7Setting10beginTimerEii+0x78>
			{
				TIMSK += insertBit(6, HIGH);
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	86 e0       	ldi	r24, 0x06	; 6
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	97 df       	rcall	.-210    	; 0x2c2 <_ZN3MCU9insertBitEib>
 394:	97 b7       	in	r25, 0x37	; 55
 396:	89 0f       	add	r24, r25
 398:	87 bf       	out	0x37, r24	; 55
				
				TCCR2 = 0x05;		// 1024, Normal Mode
 39a:	85 e0       	ldi	r24, 0x05	; 5
 39c:	85 bd       	out	0x25, r24	; 37
				TCNT2 = 0x00;		// Start Counting 0x00
 39e:	14 bc       	out	0x24, r1	; 36
 3a0:	08 95       	ret
			}
			
			else if (timerMode == COMP)
 3a2:	63 30       	cpi	r22, 0x03	; 3
 3a4:	71 05       	cpc	r23, r1
 3a6:	09 f0       	breq	.+2      	; 0x3aa <_ZN3MCU7Setting10beginTimerEii+0x80>
 3a8:	63 c0       	rjmp	.+198    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
			{
				TIMSK += insertBit(7, HIGH);
 3aa:	61 e0       	ldi	r22, 0x01	; 1
 3ac:	87 e0       	ldi	r24, 0x07	; 7
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	88 df       	rcall	.-240    	; 0x2c2 <_ZN3MCU9insertBitEib>
 3b2:	97 b7       	in	r25, 0x37	; 55
 3b4:	89 0f       	add	r24, r25
 3b6:	87 bf       	out	0x37, r24	; 55
				
				TCCR2 = 0x0D;		// 1024, CTC Mode
 3b8:	8d e0       	ldi	r24, 0x0D	; 13
 3ba:	85 bd       	out	0x25, r24	; 37
				TCNT2 = 0x00;		// Start Counting 0x00
 3bc:	14 bc       	out	0x24, r1	; 36
				OCR2 = _OCR2;
 3be:	80 ea       	ldi	r24, 0xA0	; 160
 3c0:	83 bd       	out	0x23, r24	; 35
 3c2:	08 95       	ret
			
			break;
		
		// TIMER INTERRUPT 1, 3 (16 BIT)
		case 1:
			if (timerMode == OVF)
 3c4:	64 30       	cpi	r22, 0x04	; 4
 3c6:	71 05       	cpc	r23, r1
			{
				TIMSK += insertBit(2, HIGH);
 3c8:	69 f4       	brne	.+26     	; 0x3e4 <_ZN3MCU7Setting10beginTimerEii+0xba>
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	78 df       	rcall	.-272    	; 0x2c2 <_ZN3MCU9insertBitEib>
 3d2:	97 b7       	in	r25, 0x37	; 55
 3d4:	89 0f       	add	r24, r25
 3d6:	87 bf       	out	0x37, r24	; 55
				
				TCCR1A = 0x00;
 3d8:	1f bc       	out	0x2f, r1	; 47
				TCCR1B = 0x05;		// 1024, Normal Mode
 3da:	85 e0       	ldi	r24, 0x05	; 5
 3dc:	8e bd       	out	0x2e, r24	; 46
				TCNT1H = 0x00;
 3de:	1d bc       	out	0x2d, r1	; 45
				TCNT1L = 0x00;		// Start Counting 0x0000
 3e0:	1c bc       	out	0x2c, r1	; 44
 3e2:	08 95       	ret
			}
			
			else if (timerMode == COMP)
 3e4:	63 30       	cpi	r22, 0x03	; 3
 3e6:	71 05       	cpc	r23, r1
 3e8:	09 f0       	breq	.+2      	; 0x3ec <_ZN3MCU7Setting10beginTimerEii+0xc2>
			{
				TIMSK += insertBit(4, HIGH);
 3ea:	42 c0       	rjmp	.+132    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 3ec:	61 e0       	ldi	r22, 0x01	; 1
 3ee:	84 e0       	ldi	r24, 0x04	; 4
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	67 df       	rcall	.-306    	; 0x2c2 <_ZN3MCU9insertBitEib>
 3f4:	97 b7       	in	r25, 0x37	; 55
 3f6:	89 0f       	add	r24, r25
 3f8:	87 bf       	out	0x37, r24	; 55
				
				TCCR1A = 0x00;
 3fa:	1f bc       	out	0x2f, r1	; 47
				TCCR1B = 0x0D;		// 1024, CTC Mode
 3fc:	8d e0       	ldi	r24, 0x0D	; 13
 3fe:	8e bd       	out	0x2e, r24	; 46
				TCNT1H = 0x00;
 400:	1d bc       	out	0x2d, r1	; 45
				TCNT1L = 0x00;		// Start Counting 0x0000
 402:	1c bc       	out	0x2c, r1	; 44
				OCR1AH = _OCR1AH;
 404:	8d e3       	ldi	r24, 0x3D	; 61
 406:	8b bd       	out	0x2b, r24	; 43
				OCR1AL = _OCR1AL;
 408:	89 e0       	ldi	r24, 0x09	; 9
 40a:	8a bd       	out	0x2a, r24	; 42
 40c:	08 95       	ret
			}
			
			break;
		
		case 3:
			if (timerMode == OVF)
 40e:	64 30       	cpi	r22, 0x04	; 4
 410:	71 05       	cpc	r23, r1
			{
				ETIMSK += insertBit(2, HIGH);
 412:	99 f4       	brne	.+38     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 414:	61 e0       	ldi	r22, 0x01	; 1
 416:	82 e0       	ldi	r24, 0x02	; 2
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	53 df       	rcall	.-346    	; 0x2c2 <_ZN3MCU9insertBitEib>
 41c:	ed e7       	ldi	r30, 0x7D	; 125
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	90 81       	ld	r25, Z
 422:	89 0f       	add	r24, r25
 424:	80 83       	st	Z, r24
				
				TCCR3A = 0x00;
 426:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
				TCCR3B = 0x05;		// 1024, Normal Mode
 42a:	85 e0       	ldi	r24, 0x05	; 5
 42c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				TCNT3H = 0x00;
 430:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
				TCNT3L = 0x00;		// Start Counting 0x0000
 434:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			}
			
			else if (timerMode == COMP)
 438:	08 95       	ret
 43a:	63 30       	cpi	r22, 0x03	; 3
 43c:	71 05       	cpc	r23, r1
			{
				ETIMSK += insertBit(4, HIGH);
 43e:	c1 f4       	brne	.+48     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 440:	61 e0       	ldi	r22, 0x01	; 1
 442:	84 e0       	ldi	r24, 0x04	; 4
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	3d df       	rcall	.-390    	; 0x2c2 <_ZN3MCU9insertBitEib>
 448:	ed e7       	ldi	r30, 0x7D	; 125
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	90 81       	ld	r25, Z
 44e:	89 0f       	add	r24, r25
 450:	80 83       	st	Z, r24
				
				TCCR3A = 0x00;
 452:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
				TCCR3B = 0x0D;		// 1024, CTC Mode
 456:	8d e0       	ldi	r24, 0x0D	; 13
 458:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				TCNT3H = 0x00;
 45c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
				TCNT3L = 0x00;		// Start Counting 0x0000
 460:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				OCR3AH = _OCR3AH;
 464:	8d e3       	ldi	r24, 0x3D	; 61
 466:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
				OCR3AL = _OCR3AL;
 46a:	89 e0       	ldi	r24, 0x09	; 9
 46c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 470:	08 95       	ret

00000472 <__tablejump2__>:
 472:	ee 0f       	add	r30, r30
 474:	ff 1f       	adc	r31, r31
 476:	00 24       	eor	r0, r0
 478:	00 1c       	adc	r0, r0
 47a:	0b be       	out	0x3b, r0	; 59
 47c:	07 90       	elpm	r0, Z+
 47e:	f6 91       	elpm	r31, Z
 480:	e0 2d       	mov	r30, r0
 482:	09 94       	ijmp

00000484 <_exit>:
 484:	f8 94       	cli

00000486 <__stop_program>:
 486:	ff cf       	rjmp	.-2      	; 0x486 <__stop_program>
