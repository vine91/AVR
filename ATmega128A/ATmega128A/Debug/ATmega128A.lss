
ATmega128A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000042e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  0000042e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000042e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000460  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021ff  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000db7  00000000  00000000  0000278f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cec  00000000  00000000  00003546  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00004234  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008b1  00000000  00000000  000044b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013bf  00000000  00000000  00004d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00006120  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	5b c0       	rjmp	.+182    	; 0xb8 <__ctors_end>
   2:	00 00       	nop
   4:	80 c0       	rjmp	.+256    	; 0x106 <__bad_interrupt>
   6:	00 00       	nop
   8:	7e c0       	rjmp	.+252    	; 0x106 <__bad_interrupt>
   a:	00 00       	nop
   c:	7c c0       	rjmp	.+248    	; 0x106 <__bad_interrupt>
   e:	00 00       	nop
  10:	7a c0       	rjmp	.+244    	; 0x106 <__bad_interrupt>
  12:	00 00       	nop
  14:	78 c0       	rjmp	.+240    	; 0x106 <__bad_interrupt>
  16:	00 00       	nop
  18:	76 c0       	rjmp	.+236    	; 0x106 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	74 c0       	rjmp	.+232    	; 0x106 <__bad_interrupt>
  1e:	00 00       	nop
  20:	72 c0       	rjmp	.+228    	; 0x106 <__bad_interrupt>
  22:	00 00       	nop
  24:	70 c0       	rjmp	.+224    	; 0x106 <__bad_interrupt>
  26:	00 00       	nop
  28:	6e c0       	rjmp	.+220    	; 0x106 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6c c0       	rjmp	.+216    	; 0x106 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6a c0       	rjmp	.+212    	; 0x106 <__bad_interrupt>
  32:	00 00       	nop
  34:	68 c0       	rjmp	.+208    	; 0x106 <__bad_interrupt>
  36:	00 00       	nop
  38:	66 c0       	rjmp	.+204    	; 0x106 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	64 c0       	rjmp	.+200    	; 0x106 <__bad_interrupt>
  3e:	00 00       	nop
  40:	62 c0       	rjmp	.+196    	; 0x106 <__bad_interrupt>
  42:	00 00       	nop
  44:	60 c0       	rjmp	.+192    	; 0x106 <__bad_interrupt>
  46:	00 00       	nop
  48:	5e c0       	rjmp	.+188    	; 0x106 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5c c0       	rjmp	.+184    	; 0x106 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5a c0       	rjmp	.+180    	; 0x106 <__bad_interrupt>
  52:	00 00       	nop
  54:	58 c0       	rjmp	.+176    	; 0x106 <__bad_interrupt>
  56:	00 00       	nop
  58:	56 c0       	rjmp	.+172    	; 0x106 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	54 c0       	rjmp	.+168    	; 0x106 <__bad_interrupt>
  5e:	00 00       	nop
  60:	52 c0       	rjmp	.+164    	; 0x106 <__bad_interrupt>
  62:	00 00       	nop
  64:	50 c0       	rjmp	.+160    	; 0x106 <__bad_interrupt>
  66:	00 00       	nop
  68:	4e c0       	rjmp	.+156    	; 0x106 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4c c0       	rjmp	.+152    	; 0x106 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4a c0       	rjmp	.+148    	; 0x106 <__bad_interrupt>
  72:	00 00       	nop
  74:	48 c0       	rjmp	.+144    	; 0x106 <__bad_interrupt>
  76:	00 00       	nop
  78:	46 c0       	rjmp	.+140    	; 0x106 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	44 c0       	rjmp	.+136    	; 0x106 <__bad_interrupt>
  7e:	00 00       	nop
  80:	42 c0       	rjmp	.+132    	; 0x106 <__bad_interrupt>
  82:	00 00       	nop
  84:	40 c0       	rjmp	.+128    	; 0x106 <__bad_interrupt>
  86:	00 00       	nop
  88:	3e c0       	rjmp	.+124    	; 0x106 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	dd 00       	.word	0x00dd	; ????
  8e:	df 00       	.word	0x00df	; ????
  90:	e1 00       	.word	0x00e1	; ????
  92:	e3 00       	.word	0x00e3	; ????
  94:	e5 00       	.word	0x00e5	; ????
  96:	e7 00       	.word	0x00e7	; ????
  98:	ea 00       	.word	0x00ea	; ????
  9a:	f8 00       	.word	0x00f8	; ????
  9c:	fa 00       	.word	0x00fa	; ????
  9e:	fc 00       	.word	0x00fc	; ????
  a0:	fe 00       	.word	0x00fe	; ????
  a2:	00 01       	movw	r0, r0
  a4:	02 01       	movw	r0, r4
  a6:	05 01       	movw	r0, r10
  a8:	b9 01       	movw	r22, r18
  aa:	bc 01       	movw	r22, r24
  ac:	bf 01       	movw	r22, r30
  ae:	c2 01       	movw	r24, r4
  b0:	c5 01       	movw	r24, r10
  b2:	c8 01       	movw	r24, r16
  b4:	cd 01       	movw	r24, r26

000000b6 <__ctors_start>:
  b6:	ce 00       	.word	0x00ce	; ????

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	d0 e1       	ldi	r29, 0x10	; 16
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
  c4:	11 e0       	ldi	r17, 0x01	; 1
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	ea eb       	ldi	r30, 0xBA	; 186
  cc:	f3 e0       	ldi	r31, 0x03	; 3
  ce:	00 e0       	ldi	r16, 0x00	; 0
  d0:	0b bf       	out	0x3b, r16	; 59
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x14>
  d4:	07 90       	elpm	r0, Z+
  d6:	0d 92       	st	X+, r0
  d8:	a0 30       	cpi	r26, 0x00	; 0
  da:	b1 07       	cpc	r27, r17
  dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0x10>

000000de <__do_clear_bss>:
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	a0 e0       	ldi	r26, 0x00	; 0
  e2:	b1 e0       	ldi	r27, 0x01	; 1
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
  e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
  e8:	a7 30       	cpi	r26, 0x07	; 7
  ea:	b2 07       	cpc	r27, r18
  ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>

000000ee <__do_global_ctors>:
  ee:	10 e0       	ldi	r17, 0x00	; 0
  f0:	cc e5       	ldi	r28, 0x5C	; 92
  f2:	d0 e0       	ldi	r29, 0x00	; 0
  f4:	03 c0       	rjmp	.+6      	; 0xfc <__do_global_ctors+0xe>
  f6:	21 97       	sbiw	r28, 0x01	; 1
  f8:	fe 01       	movw	r30, r28
  fa:	54 d1       	rcall	.+680    	; 0x3a4 <__tablejump2__>
  fc:	cb 35       	cpi	r28, 0x5B	; 91
  fe:	d1 07       	cpc	r29, r17
 100:	d1 f7       	brne	.-12     	; 0xf6 <__do_global_ctors+0x8>
 102:	21 d0       	rcall	.+66     	; 0x146 <main>
 104:	58 c1       	rjmp	.+688    	; 0x3b6 <_exit>

00000106 <__bad_interrupt>:
 106:	7c cf       	rjmp	.-264    	; 0x0 <__vectors>

00000108 <_Z41__static_initialization_and_destruction_0ii>:
		
		_delay_ms(250);
	}
	
	return 0;
}
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	61 f4       	brne	.+24     	; 0x124 <_Z41__static_initialization_and_destruction_0ii+0x1c>
 10c:	6f 3f       	cpi	r22, 0xFF	; 255
 10e:	7f 4f       	sbci	r23, 0xFF	; 255
 110:	49 f4       	brne	.+18     	; 0x124 <_Z41__static_initialization_and_destruction_0ii+0x1c>
	unsigned int m_LCDPort;
	unsigned int m_ExtendPort;
	bool m_isDataLong;

public:
	LCD (int LCDPort) { m_LCDPort = LCDPort; }
 112:	e2 e0       	ldi	r30, 0x02	; 2
 114:	f1 e0       	ldi	r31, 0x01	; 1
 116:	11 82       	std	Z+1, r1	; 0x01
 118:	10 82       	st	Z, r1

class DataLongLCD : public LCD
{

public:
	DataLongLCD (int LCDPort, int extendPort) : LCD (LCDPort) { m_ExtendPort = extendPort; m_isDataLong = true; }
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	93 83       	std	Z+3, r25	; 0x03
 120:	82 83       	std	Z+2, r24	; 0x02
 122:	84 83       	std	Z+4, r24	; 0x04
 124:	08 95       	ret

00000126 <_Z8read_adch>:
using namespace MCU::Features;
using namespace MCU::Setting;

unsigned char read_adc(unsigned char adc_input)
{
	ADMUX=adc_input | (0<<REFS1) | (0<<REFS0) | (1<<ADLAR);
 126:	80 62       	ori	r24, 0x20	; 32
 128:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	81 e3       	ldi	r24, 0x31	; 49
 12c:	8a 95       	dec	r24
 12e:	f1 f7       	brne	.-4      	; 0x12c <_Z8read_adch+0x6>
 130:	00 00       	nop
	// Delay needed for the stabilization of the ADC input voltage
	_delay_us(10);
	// Start the AD conversion
	ADCSRA|=(1<<ADSC);
 132:	86 b1       	in	r24, 0x06	; 6
 134:	80 64       	ori	r24, 0x40	; 64
 136:	86 b9       	out	0x06, r24	; 6
	// Wait for the AD conversion to complete
	while ((ADCSRA & (1<<ADIF))==0);
 138:	34 9b       	sbis	0x06, 4	; 6
 13a:	fe cf       	rjmp	.-4      	; 0x138 <_Z8read_adch+0x12>
	ADCSRA|=(1<<ADIF);
 13c:	86 b1       	in	r24, 0x06	; 6
 13e:	80 61       	ori	r24, 0x10	; 16
 140:	86 b9       	out	0x06, r24	; 6
	return ADCH;
 142:	85 b1       	in	r24, 0x05	; 5
}
 144:	08 95       	ret

00000146 <main>:
-------------   MAIN START   ---------------
//========================================*/

int main (void)
{
	beginPort(A, OUT);
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	06 d1       	rcall	.+524    	; 0x35a <_ZN3MCU7Setting9beginPortEib>
	beginPort(B, OUT);
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 d1       	rcall	.+516    	; 0x35a <_ZN3MCU7Setting9beginPortEib>
	beginPort(E, OUT);
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	84 e0       	ldi	r24, 0x04	; 4
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	fe d0       	rcall	.+508    	; 0x35a <_ZN3MCU7Setting9beginPortEib>
	
	ADMUX=(0<<REFS1) | (0<<REFS0) | (1<<ADLAR);
 15e:	80 e2       	ldi	r24, 0x20	; 32
 160:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
 162:	84 e8       	ldi	r24, 0x84	; 132
 164:	86 b9       	out	0x06, r24	; 6
	SFIOR=(0<<ACME);
	
	lcd.init();
 166:	10 bc       	out	0x20, r1	; 32
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	91 e0       	ldi	r25, 0x01	; 1
	
	while (true)
	{
		result = read_adc(1);
 16c:	c9 d0       	rcall	.+402    	; 0x300 <_ZN3LCD4initEv>
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	da df       	rcall	.-76     	; 0x126 <_Z8read_adch>
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 178:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		if (result > 111 && result < 131)
 17c:	80 57       	subi	r24, 0x70	; 112
 17e:	91 09       	sbc	r25, r1
 180:	43 97       	sbiw	r24, 0x13	; 19
 182:	10 f4       	brcc	.+4      	; 0x188 <main+0x42>
		{
			PORTE = 0x01;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	83 b9       	out	0x03, r24	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 188:	2f ef       	ldi	r18, 0xFF	; 255
 18a:	8f e3       	ldi	r24, 0x3F	; 63
 18c:	9b e0       	ldi	r25, 0x0B	; 11
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	80 40       	sbci	r24, 0x00	; 0
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <main+0x48>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x52>
 198:	00 00       	nop
 19a:	e9 cf       	rjmp	.-46     	; 0x16e <main+0x28>

0000019c <_GLOBAL__sub_I__Z8read_adch>:
		
		_delay_ms(250);
	}
	
	return 0;
}
 19c:	6f ef       	ldi	r22, 0xFF	; 255
 19e:	7f ef       	ldi	r23, 0xFF	; 255
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	b1 cf       	rjmp	.-158    	; 0x108 <_Z41__static_initialization_and_destruction_0ii>
 1a6:	08 95       	ret

000001a8 <_ZN3LCD10attachPortEi>:
	{
		setLine(2, 1);
		print("                ");
	}
	
}
 1a8:	dc 01       	movw	r26, r24
 1aa:	ed 91       	ld	r30, X+
 1ac:	fc 91       	ld	r31, X
 1ae:	e7 30       	cpi	r30, 0x07	; 7
 1b0:	f1 05       	cpc	r31, r1
 1b2:	90 f4       	brcc	.+36     	; 0x1d8 <_ZN3LCD10attachPortEi+0x30>
 1b4:	ea 5b       	subi	r30, 0xBA	; 186
 1b6:	ff 4f       	sbci	r31, 0xFF	; 255
 1b8:	f5 c0       	rjmp	.+490    	; 0x3a4 <__tablejump2__>
 1ba:	6b bb       	out	0x1b, r22	; 27
 1bc:	08 95       	ret
 1be:	68 bb       	out	0x18, r22	; 24
 1c0:	08 95       	ret
 1c2:	65 bb       	out	0x15, r22	; 21
 1c4:	08 95       	ret
 1c6:	62 bb       	out	0x12, r22	; 18
 1c8:	08 95       	ret
 1ca:	63 b9       	out	0x03, r22	; 3
 1cc:	08 95       	ret
 1ce:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 1d2:	08 95       	ret
 1d4:	60 93 65 00 	sts	0x0065, r22	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 1d8:	08 95       	ret

000001da <_ZN3LCD16attachExtendPortEi>:
 1da:	dc 01       	movw	r26, r24
 1dc:	12 96       	adiw	r26, 0x02	; 2
 1de:	ed 91       	ld	r30, X+
 1e0:	fc 91       	ld	r31, X
 1e2:	13 97       	sbiw	r26, 0x03	; 3
 1e4:	e7 30       	cpi	r30, 0x07	; 7
 1e6:	f1 05       	cpc	r31, r1
 1e8:	90 f4       	brcc	.+36     	; 0x20e <_ZN3LCD16attachExtendPortEi+0x34>
 1ea:	e3 5b       	subi	r30, 0xB3	; 179
 1ec:	ff 4f       	sbci	r31, 0xFF	; 255
 1ee:	da c0       	rjmp	.+436    	; 0x3a4 <__tablejump2__>
 1f0:	6b bb       	out	0x1b, r22	; 27
 1f2:	08 95       	ret
 1f4:	68 bb       	out	0x18, r22	; 24
 1f6:	08 95       	ret
 1f8:	65 bb       	out	0x15, r22	; 21
 1fa:	08 95       	ret
 1fc:	62 bb       	out	0x12, r22	; 18
 1fe:	08 95       	ret
 200:	63 b9       	out	0x03, r22	; 3
 202:	08 95       	ret
 204:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 208:	08 95       	ret
 20a:	60 93 65 00 	sts	0x0065, r22	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 20e:	08 95       	ret

00000210 <_ZN3LCD17exportInstructionEi>:
 210:	af 92       	push	r10
 212:	bf 92       	push	r11
 214:	cf 92       	push	r12
 216:	df 92       	push	r13
 218:	ef 92       	push	r14
 21a:	ff 92       	push	r15
 21c:	0f 93       	push	r16
 21e:	1f 93       	push	r17
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	ec 01       	movw	r28, r24
 226:	8b 01       	movw	r16, r22
 228:	8c 81       	ldd	r24, Y+4	; 0x04
 22a:	81 11       	cpse	r24, r1
 22c:	3f c0       	rjmp	.+126    	; 0x2ac <_ZN3LCD17exportInstructionEi+0x9c>
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	87 e0       	ldi	r24, 0x07	; 7
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	83 d0       	rcall	.+262    	; 0x33c <_ZN3MCU9insertBitEib>
 236:	6c 01       	movw	r12, r24
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	87 e0       	ldi	r24, 0x07	; 7
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	7e d0       	rcall	.+252    	; 0x33c <_ZN3MCU9insertBitEib>
 240:	5c 01       	movw	r10, r24
 242:	8c ec       	ldi	r24, 0xCC	; 204
 244:	9c e1       	ldi	r25, 0x1C	; 28
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <_ZN3LCD17exportInstructionEi+0x36>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <_ZN3LCD17exportInstructionEi+0x3c>
 24c:	00 00       	nop
 24e:	78 01       	movw	r14, r16
 250:	f5 94       	asr	r15
 252:	e7 94       	ror	r14
 254:	f5 94       	asr	r15
 256:	e7 94       	ror	r14
 258:	f5 94       	asr	r15
 25a:	e7 94       	ror	r14
 25c:	f5 94       	asr	r15
 25e:	e7 94       	ror	r14
 260:	9f e0       	ldi	r25, 0x0F	; 15
 262:	e9 22       	and	r14, r25
 264:	ff 24       	eor	r15, r15
 266:	b6 01       	movw	r22, r12
 268:	6e 29       	or	r22, r14
 26a:	7f 29       	or	r23, r15
 26c:	ce 01       	movw	r24, r28
 26e:	9c df       	rcall	.-200    	; 0x1a8 <_ZN3LCD10attachPortEi>
 270:	85 e0       	ldi	r24, 0x05	; 5
 272:	8a 95       	dec	r24
 274:	f1 f7       	brne	.-4      	; 0x272 <_ZN3LCD17exportInstructionEi+0x62>
 276:	b5 01       	movw	r22, r10
 278:	6e 29       	or	r22, r14
 27a:	7f 29       	or	r23, r15
 27c:	ce 01       	movw	r24, r28
 27e:	94 df       	rcall	.-216    	; 0x1a8 <_ZN3LCD10attachPortEi>
 280:	95 e0       	ldi	r25, 0x05	; 5
 282:	9a 95       	dec	r25
 284:	f1 f7       	brne	.-4      	; 0x282 <_ZN3LCD17exportInstructionEi+0x72>
 286:	0f 70       	andi	r16, 0x0F	; 15
 288:	11 27       	eor	r17, r17
 28a:	b6 01       	movw	r22, r12
 28c:	60 2b       	or	r22, r16
 28e:	71 2b       	or	r23, r17
 290:	ce 01       	movw	r24, r28
 292:	8a df       	rcall	.-236    	; 0x1a8 <_ZN3LCD10attachPortEi>
 294:	85 e0       	ldi	r24, 0x05	; 5
 296:	8a 95       	dec	r24
 298:	f1 f7       	brne	.-4      	; 0x296 <_ZN3LCD17exportInstructionEi+0x86>
 29a:	b5 01       	movw	r22, r10
 29c:	60 2b       	or	r22, r16
 29e:	71 2b       	or	r23, r17
 2a0:	ce 01       	movw	r24, r28
 2a2:	82 df       	rcall	.-252    	; 0x1a8 <_ZN3LCD10attachPortEi>
 2a4:	95 e0       	ldi	r25, 0x05	; 5
 2a6:	9a 95       	dec	r25
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <_ZN3LCD17exportInstructionEi+0x96>
 2aa:	1f c0       	rjmp	.+62     	; 0x2ea <_ZN3LCD17exportInstructionEi+0xda>
 2ac:	61 e0       	ldi	r22, 0x01	; 1
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	44 d0       	rcall	.+136    	; 0x33c <_ZN3MCU9insertBitEib>
 2b4:	6c 01       	movw	r12, r24
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	82 e0       	ldi	r24, 0x02	; 2
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	3f d0       	rcall	.+126    	; 0x33c <_ZN3MCU9insertBitEib>
 2be:	7c 01       	movw	r14, r24
 2c0:	8c ec       	ldi	r24, 0xCC	; 204
 2c2:	9c e1       	ldi	r25, 0x1C	; 28
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <_ZN3LCD17exportInstructionEi+0xb4>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <_ZN3LCD17exportInstructionEi+0xba>
 2ca:	00 00       	nop
 2cc:	b8 01       	movw	r22, r16
 2ce:	ce 01       	movw	r24, r28
 2d0:	84 df       	rcall	.-248    	; 0x1da <_ZN3LCD16attachExtendPortEi>
 2d2:	b6 01       	movw	r22, r12
 2d4:	ce 01       	movw	r24, r28
 2d6:	68 df       	rcall	.-304    	; 0x1a8 <_ZN3LCD10attachPortEi>
 2d8:	95 e0       	ldi	r25, 0x05	; 5
 2da:	9a 95       	dec	r25
 2dc:	f1 f7       	brne	.-4      	; 0x2da <_ZN3LCD17exportInstructionEi+0xca>
 2de:	b7 01       	movw	r22, r14
 2e0:	ce 01       	movw	r24, r28
 2e2:	62 df       	rcall	.-316    	; 0x1a8 <_ZN3LCD10attachPortEi>
 2e4:	85 e0       	ldi	r24, 0x05	; 5
 2e6:	8a 95       	dec	r24
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <_ZN3LCD17exportInstructionEi+0xd6>
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	1f 91       	pop	r17
 2f0:	0f 91       	pop	r16
 2f2:	ff 90       	pop	r15
 2f4:	ef 90       	pop	r14
 2f6:	df 90       	pop	r13
 2f8:	cf 90       	pop	r12
 2fa:	bf 90       	pop	r11
 2fc:	af 90       	pop	r10
 2fe:	08 95       	ret

00000300 <_ZN3LCD4initEv>:
/*----------------------------------------//
			  Initialize LCD
//----------------------------------------*/

void LCD::init (void)
{
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	ec 01       	movw	r28, r24
	
	if (m_isDataLong == false)
 306:	8c 81       	ldd	r24, Y+4	; 0x04
 308:	81 11       	cpse	r24, r1
 30a:	05 c0       	rjmp	.+10     	; 0x316 <_ZN3LCD4initEv+0x16>
	{
		exportInstruction(0x28);			// Set Function		[ DL = 4 Bit		N = 2 LINE		F = 5 x 7	]
 30c:	68 e2       	ldi	r22, 0x28	; 40
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	ce 01       	movw	r24, r28
 312:	7e df       	rcall	.-260    	; 0x210 <_ZN3LCD17exportInstructionEi>
 314:	04 c0       	rjmp	.+8      	; 0x31e <_ZN3LCD4initEv+0x1e>
	}
	
	else
	{
		exportInstruction(0x38);			// Set Function		[ DL = 8 Bit		N = 2 LINE		F = 5 x 7	]
 316:	68 e3       	ldi	r22, 0x38	; 56
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	ce 01       	movw	r24, r28
 31c:	79 df       	rcall	.-270    	; 0x210 <_ZN3LCD17exportInstructionEi>
	}
	
	exportInstruction(0x0C);				// Control Display	[ D = Display H		C = Cursor L	B = Blink L ]
 31e:	6c e0       	ldi	r22, 0x0C	; 12
 320:	70 e0       	ldi	r23, 0x00	; 0
 322:	ce 01       	movw	r24, r28
 324:	75 df       	rcall	.-278    	; 0x210 <_ZN3LCD17exportInstructionEi>
	exportInstruction(0x06);				// Set Entry Mode	[ I/D = Right						S = Shift L	]
 326:	66 e0       	ldi	r22, 0x06	; 6
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	ce 01       	movw	r24, r28
 32c:	71 df       	rcall	.-286    	; 0x210 <_ZN3LCD17exportInstructionEi>
	exportInstruction(0x01);				// Clear Display
 32e:	61 e0       	ldi	r22, 0x01	; 1
 330:	70 e0       	ldi	r23, 0x00	; 0
 332:	ce 01       	movw	r24, r28
 334:	6d df       	rcall	.-294    	; 0x210 <_ZN3LCD17exportInstructionEi>
 336:	df 91       	pop	r29
	
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

0000033c <_ZN3MCU9insertBitEib>:
 33c:	66 23       	and	r22, r22
	{
		ASKIIValue = decimal + 0x30;
	}
	
	return ASKIIValue;
}
 33e:	51 f0       	breq	.+20     	; 0x354 <_ZN3MCU9insertBitEib+0x18>
 340:	21 e0       	ldi	r18, 0x01	; 1
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	a9 01       	movw	r20, r18
 346:	02 c0       	rjmp	.+4      	; 0x34c <_ZN3MCU9insertBitEib+0x10>
 348:	44 0f       	add	r20, r20
 34a:	55 1f       	adc	r21, r21
 34c:	8a 95       	dec	r24
 34e:	e2 f7       	brpl	.-8      	; 0x348 <_ZN3MCU9insertBitEib+0xc>
 350:	ca 01       	movw	r24, r20
 352:	08 95       	ret
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	08 95       	ret

0000035a <_ZN3MCU7Setting9beginPortEib>:
	
	int ddrValue;
	int portValue;
	
	// INPUT or OUTPUT
	if (isOutput == true)
 35a:	66 23       	and	r22, r22
 35c:	11 f0       	breq	.+4      	; 0x362 <_ZN3MCU7Setting9beginPortEib+0x8>
	{
		ddrValue = 0xFF;
 35e:	2f ef       	ldi	r18, 0xFF	; 255
 360:	01 c0       	rjmp	.+2      	; 0x364 <_ZN3MCU7Setting9beginPortEib+0xa>
		portValue = 0x00;
	}
	
	else
	{
		ddrValue = 0x00;
 362:	20 e0       	ldi	r18, 0x00	; 0
	}
	
	switch (port)
 364:	87 30       	cpi	r24, 0x07	; 7
 366:	91 05       	cpc	r25, r1
 368:	e0 f4       	brcc	.+56     	; 0x3a2 <_ZN3MCU7Setting9beginPortEib+0x48>
 36a:	fc 01       	movw	r30, r24
 36c:	ec 5a       	subi	r30, 0xAC	; 172
 36e:	ff 4f       	sbci	r31, 0xFF	; 255
 370:	19 c0       	rjmp	.+50     	; 0x3a4 <__tablejump2__>
	{
		// PORTA
		case A:
			DDRA = ddrValue;
 372:	2a bb       	out	0x1a, r18	; 26
			PORTA = portValue;
 374:	1b ba       	out	0x1b, r1	; 27
			break;
 376:	08 95       	ret
		
		// PORTB
		case B:
			DDRB = ddrValue;
 378:	27 bb       	out	0x17, r18	; 23
			PORTB = portValue;
 37a:	18 ba       	out	0x18, r1	; 24
			break;
 37c:	08 95       	ret
		
		// PORTC
		case C:
			DDRC = ddrValue;
 37e:	24 bb       	out	0x14, r18	; 20
			PORTC = portValue;
 380:	15 ba       	out	0x15, r1	; 21
			break;
 382:	08 95       	ret
		
		// PORTD
		case D:
			DDRD = ddrValue;
 384:	21 bb       	out	0x11, r18	; 17
			PORTD = portValue;
 386:	12 ba       	out	0x12, r1	; 18
			break;
 388:	08 95       	ret
		
		// PORTE
		case E:
			DDRE = ddrValue;
 38a:	22 b9       	out	0x02, r18	; 2
			PORTE = portValue;
 38c:	13 b8       	out	0x03, r1	; 3
			break;
 38e:	08 95       	ret
		
		// PORTF
		case F:
			DDRF = ddrValue;
 390:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
			PORTF = portValue;
 394:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
			break;
 398:	08 95       	ret
		
		// PORTG
		case G:
			DDRG = ddrValue;
 39a:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
			PORTG = portValue;
 39e:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 3a2:	08 95       	ret

000003a4 <__tablejump2__>:
 3a4:	ee 0f       	add	r30, r30
 3a6:	ff 1f       	adc	r31, r31
 3a8:	00 24       	eor	r0, r0
 3aa:	00 1c       	adc	r0, r0
 3ac:	0b be       	out	0x3b, r0	; 59
 3ae:	07 90       	elpm	r0, Z+
 3b0:	f6 91       	elpm	r31, Z
 3b2:	e0 2d       	mov	r30, r0
 3b4:	09 94       	ijmp

000003b6 <_exit>:
 3b6:	f8 94       	cli

000003b8 <__stop_program>:
 3b8:	ff cf       	rjmp	.-2      	; 0x3b8 <__stop_program>
